<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CoinEx.Net</name>
    </assembly>
    <members>
        <member name="T:CoinEx.Net.Clients.CoinExRestClient">
            <inheritdoc cref="T:CoinEx.Net.Interfaces.Clients.ICoinExRestClient" />
        </member>
        <member name="P:CoinEx.Net.Clients.CoinExRestClient.SpotApi">
            <inheritdoc />
        </member>
        <member name="P:CoinEx.Net.Clients.CoinExRestClient.SpotApiV2">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.CoinExRestClient.#ctor(System.Action{CoinEx.Net.Objects.Options.CoinExRestOptions})">
            <summary>
            Create a new instance of the CoinExRestClient using provided options
            </summary>
            <param name="optionsDelegate">Option configuration delegate</param>
        </member>
        <member name="M:CoinEx.Net.Clients.CoinExRestClient.#ctor(System.Net.Http.HttpClient,Microsoft.Extensions.Logging.ILoggerFactory,System.Action{CoinEx.Net.Objects.Options.CoinExRestOptions})">
            <summary>
            Create a new instance of the CoinExRestClient
            </summary>
            <param name="optionsDelegate">Option configuration delegate</param>
            <param name="loggerFactory">The logger factory</param>
            <param name="httpClient">Http client for this client</param>
        </member>
        <member name="M:CoinEx.Net.Clients.CoinExRestClient.SetDefaultOptions(System.Action{CoinEx.Net.Objects.Options.CoinExRestOptions})">
            <summary>
            Set the default options to be used when creating new clients
            </summary>
            <param name="optionsDelegate">Option configuration delegate</param>
        </member>
        <member name="M:CoinEx.Net.Clients.CoinExRestClient.SetApiCredentials(CryptoExchange.Net.Authentication.ApiCredentials)">
            <inheritdoc />
        </member>
        <member name="T:CoinEx.Net.Clients.CoinExSocketClient">
            <inheritdoc cref="T:CoinEx.Net.Interfaces.Clients.ICoinExSocketClient" />
        </member>
        <member name="P:CoinEx.Net.Clients.CoinExSocketClient.SpotApiV2">
            <inheritdoc />
        </member>
        <member name="P:CoinEx.Net.Clients.CoinExSocketClient.SpotApi">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.CoinExSocketClient.#ctor(Microsoft.Extensions.Logging.ILoggerFactory)">
            <summary>
            Create a new instance of the CoinExSocketClient
            </summary>
            <param name="loggerFactory">The logger factory</param>
        </member>
        <member name="M:CoinEx.Net.Clients.CoinExSocketClient.#ctor(System.Action{CoinEx.Net.Objects.Options.CoinExSocketOptions})">
            <summary>
            Create a new instance of the CoinExSocketClient
            </summary>
            <param name="optionsDelegate">Option configuration delegate</param>
        </member>
        <member name="M:CoinEx.Net.Clients.CoinExSocketClient.#ctor(System.Action{CoinEx.Net.Objects.Options.CoinExSocketOptions},Microsoft.Extensions.Logging.ILoggerFactory)">
            <summary>
            Create a new instance of the CoinExSocketClient
            </summary>
            <param name="loggerFactory">The logger factory</param>
            <param name="optionsDelegate">Option configuration delegate</param>
        </member>
        <member name="M:CoinEx.Net.Clients.CoinExSocketClient.SetDefaultOptions(System.Action{CoinEx.Net.Objects.Options.CoinExSocketOptions})">
            <summary>
            Set the default options to be used when creating new clients
            </summary>
            <param name="optionsDelegate">Option configuration delegate</param>
        </member>
        <member name="M:CoinEx.Net.Clients.CoinExSocketClient.SetApiCredentials(CryptoExchange.Net.Authentication.ApiCredentials)">
            <inheritdoc />
        </member>
        <member name="T:CoinEx.Net.Clients.SpotApiV1.CoinExRestClientSpotApi">
            <inheritdoc cref="T:CoinEx.Net.Interfaces.Clients.SpotApiV1.ICoinExRestClientSpotApi" />
        </member>
        <member name="P:CoinEx.Net.Clients.SpotApiV1.CoinExRestClientSpotApi.ClientOptions">
            <inheritdoc />
        </member>
        <member name="E:CoinEx.Net.Clients.SpotApiV1.CoinExRestClientSpotApi.OnOrderPlaced">
            <summary>
            Event triggered when an order is placed via this client
            </summary>
        </member>
        <member name="E:CoinEx.Net.Clients.SpotApiV1.CoinExRestClientSpotApi.OnOrderCanceled">
            <summary>
            Event triggered when an order is canceled via this client. Note that this does not trigger when using CancelAllOrdersAsync
            </summary>
        </member>
        <member name="P:CoinEx.Net.Clients.SpotApiV1.CoinExRestClientSpotApi.ExchangeName">
            <inheritdoc />
        </member>
        <member name="P:CoinEx.Net.Clients.SpotApiV1.CoinExRestClientSpotApi.Account">
            <inheritdoc />
        </member>
        <member name="P:CoinEx.Net.Clients.SpotApiV1.CoinExRestClientSpotApi.ExchangeData">
            <inheritdoc />
        </member>
        <member name="P:CoinEx.Net.Clients.SpotApiV1.CoinExRestClientSpotApi.Trading">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV1.CoinExRestClientSpotApi.CreateAuthenticationProvider(CryptoExchange.Net.Authentication.ApiCredentials)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV1.CoinExRestClientSpotApi.GetSymbolName(System.String,System.String)">
            <summary>
            Get the name of a symbol for CoinEx based on the base and quote asset
            </summary>
            <param name="baseAsset"></param>
            <param name="quoteAsset"></param>
            <returns></returns>
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV1.CoinExRestClientSpotApi.ParseErrorResponse(System.Int32,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Collections.Generic.IEnumerable{System.String}}},CryptoExchange.Net.Interfaces.IMessageAccessor)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV1.CoinExRestClientSpotApi.GetTimeSyncInfo">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV1.CoinExRestClientSpotApi.GetTimeOffset">
            <inheritdoc />
        </member>
        <member name="P:CoinEx.Net.Clients.SpotApiV1.CoinExRestClientSpotApi.CommonSpotClient">
            <inheritdoc />
        </member>
        <member name="T:CoinEx.Net.Clients.SpotApiV1.CoinExRestClientSpotApiAccount">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV1.CoinExRestClientSpotApiAccount.GetBalancesAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV1.CoinExRestClientSpotApiAccount.GetDepositHistoryAsync(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV1.CoinExRestClientSpotApiAccount.GetWithdrawalHistoryAsync(System.String,System.Nullable{System.Int64},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV1.CoinExRestClientSpotApiAccount.WithdrawAsync(System.String,System.String,System.Boolean,System.Decimal,System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV1.CoinExRestClientSpotApiAccount.CancelWithdrawalAsync(System.Int64,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV1.CoinExRestClientSpotApiAccount.GetDepositAddressAsync(System.String,System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:CoinEx.Net.Clients.SpotApiV1.CoinExRestClientSpotApiExchangeData">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV1.CoinExRestClientSpotApiExchangeData.GetSymbolsAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV1.CoinExRestClientSpotApiExchangeData.GetCurrencyRateAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV1.CoinExRestClientSpotApiExchangeData.GetAssetsAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV1.CoinExRestClientSpotApiExchangeData.GetTickerAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV1.CoinExRestClientSpotApiExchangeData.GetTickersAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV1.CoinExRestClientSpotApiExchangeData.GetOrderBookAsync(System.String,System.Int32,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV1.CoinExRestClientSpotApiExchangeData.GetTradeHistoryAsync(System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV1.CoinExRestClientSpotApiExchangeData.GetSymbolInfoAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV1.CoinExRestClientSpotApiExchangeData.GetSymbolInfoAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV1.CoinExRestClientSpotApiExchangeData.GetKlinesAsync(System.String,CoinEx.Net.Enums.KlineInterval,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV1.CoinExRestClientSpotApiExchangeData.GetMiningDifficultyAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:CoinEx.Net.Clients.SpotApiV1.CoinExRestClientSpotApiTrading">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV1.CoinExRestClientSpotApiTrading.PlaceOrderAsync(System.String,CoinEx.Net.Enums.OrderSide,CoinEx.Net.Enums.OrderType,System.Decimal,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Boolean},System.Nullable{CoinEx.Net.Enums.OrderOption},System.String,System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV1.CoinExRestClientSpotApiTrading.GetOpenOrdersAsync(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV1.CoinExRestClientSpotApiTrading.GetOpenStopOrdersAsync(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV1.CoinExRestClientSpotApiTrading.GetClosedOrdersAsync(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV1.CoinExRestClientSpotApiTrading.GetOrderAsync(System.String,System.Int64,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV1.CoinExRestClientSpotApiTrading.GetOrderTradesAsync(System.Int64,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV1.CoinExRestClientSpotApiTrading.GetUserTradesAsync(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV1.CoinExRestClientSpotApiTrading.CancelOrderAsync(System.String,System.Int64,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV1.CoinExRestClientSpotApiTrading.CancelAllOrdersAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV1.CoinExRestClientSpotApiTrading.CancelAllStopOrdersAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:CoinEx.Net.Clients.SpotApiV1.CoinExSocketClientSpotApi">
            <inheritdoc cref="T:CoinEx.Net.Interfaces.Clients.SpotApiV1.ICoinExSocketClientSpotApi" />
        </member>
        <member name="P:CoinEx.Net.Clients.SpotApiV1.CoinExSocketClientSpotApi.ClientOptions">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV1.CoinExSocketClientSpotApi.#ctor(Microsoft.Extensions.Logging.ILogger,CoinEx.Net.Objects.Options.CoinExSocketOptions)">
            <summary>
            Create a new instance of CoinExSocketClient with default options
            </summary>
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV1.CoinExSocketClientSpotApi.CreateAuthenticationProvider(CryptoExchange.Net.Authentication.ApiCredentials)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV1.CoinExSocketClientSpotApi.GetListenerIdentifier(CryptoExchange.Net.Interfaces.IMessageAccessor)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV1.CoinExSocketClientSpotApi.GetAuthenticationRequest">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV1.CoinExSocketClientSpotApi.PingAsync">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV1.CoinExSocketClientSpotApi.GetServerTimeAsync">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV1.CoinExSocketClientSpotApi.GetTickerAsync(System.String,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV1.CoinExSocketClientSpotApi.GetOrderBookAsync(System.String,System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV1.CoinExSocketClientSpotApi.GetTradeHistoryAsync(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV1.CoinExSocketClientSpotApi.GetKlinesAsync(System.String,CoinEx.Net.Enums.KlineInterval)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV1.CoinExSocketClientSpotApi.GetBalancesAsync(System.Collections.Generic.IEnumerable{System.String})">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV1.CoinExSocketClientSpotApi.GetOpenOrdersAsync(System.String,System.Nullable{CoinEx.Net.Enums.OrderSide},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV1.CoinExSocketClientSpotApi.SubscribeToTickerUpdatesAsync(System.String,System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{CoinEx.Net.Objects.Models.Socket.CoinExSocketSymbolState}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV1.CoinExSocketClientSpotApi.SubscribeToAllTickerUpdatesAsync(System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{System.Collections.Generic.IEnumerable{CoinEx.Net.Objects.Models.Socket.CoinExSocketSymbolState}}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV1.CoinExSocketClientSpotApi.SubscribeToOrderBookUpdatesAsync(System.String,System.Int32,System.Int32,System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{CoinEx.Net.Objects.Models.Socket.CoinExSocketOrderBook}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV1.CoinExSocketClientSpotApi.SubscribeToTradeUpdatesAsync(System.String,System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{System.Collections.Generic.IEnumerable{CoinEx.Net.Objects.Models.Socket.CoinExSocketSymbolTrade}}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV1.CoinExSocketClientSpotApi.SubscribeToBalanceUpdatesAsync(System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{System.Collections.Generic.IEnumerable{CoinEx.Net.Objects.Models.CoinExBalance}}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV1.CoinExSocketClientSpotApi.SubscribeToOrderUpdatesAsync(System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{CoinEx.Net.Objects.Models.Socket.CoinExSocketOrderUpdate}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV1.CoinExSocketClientSpotApi.SubscribeToOrderUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{CoinEx.Net.Objects.Models.Socket.CoinExSocketOrderUpdate}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:CoinEx.Net.Clients.SpotApiV2.CoinExRestClientSpotApi">
            <inheritdoc cref="T:CoinEx.Net.Interfaces.Clients.SpotApiV2.ICoinExRestClientSpotApi" />
        </member>
        <member name="P:CoinEx.Net.Clients.SpotApiV2.CoinExRestClientSpotApi.ClientOptions">
            <inheritdoc />
        </member>
        <member name="E:CoinEx.Net.Clients.SpotApiV2.CoinExRestClientSpotApi.OnOrderPlaced">
            <summary>
            Event triggered when an order is placed via this client
            </summary>
        </member>
        <member name="E:CoinEx.Net.Clients.SpotApiV2.CoinExRestClientSpotApi.OnOrderCanceled">
            <summary>
            Event triggered when an order is canceled via this client. Note that this does not trigger when using CancelAllOrdersAsync
            </summary>
        </member>
        <member name="P:CoinEx.Net.Clients.SpotApiV2.CoinExRestClientSpotApi.ExchangeName">
            <inheritdoc />
        </member>
        <member name="P:CoinEx.Net.Clients.SpotApiV2.CoinExRestClientSpotApi.Account">
            <inheritdoc />
        </member>
        <member name="P:CoinEx.Net.Clients.SpotApiV2.CoinExRestClientSpotApi.ExchangeData">
            <inheritdoc />
        </member>
        <member name="P:CoinEx.Net.Clients.SpotApiV2.CoinExRestClientSpotApi.Trading">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV2.CoinExRestClientSpotApi.CreateAccessor">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV2.CoinExRestClientSpotApi.CreateSerializer">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV2.CoinExRestClientSpotApi.CreateAuthenticationProvider(CryptoExchange.Net.Authentication.ApiCredentials)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV2.CoinExRestClientSpotApi.TryParseError(CryptoExchange.Net.Interfaces.IMessageAccessor)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV2.CoinExRestClientSpotApi.GetTimeSyncInfo">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV2.CoinExRestClientSpotApi.GetTimeOffset">
            <inheritdoc />
        </member>
        <member name="P:CoinEx.Net.Clients.SpotApiV2.CoinExRestClientSpotApi.CommonSpotClient">
            <inheritdoc />
        </member>
        <member name="T:CoinEx.Net.Clients.SpotApiV2.CoinExRestClientSpotApiAccount">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV2.CoinExRestClientSpotApiAccount.GetTradingFeesAsync(System.String,CoinEx.Net.Enums.AccountType,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV2.CoinExRestClientSpotApiAccount.SetAccountConfigAsync(System.Boolean,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV2.CoinExRestClientSpotApiAccount.GetBalancesAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV2.CoinExRestClientSpotApiAccount.GetMarginBalancesAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV2.CoinExRestClientSpotApiAccount.GetFinancialBalancesAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV2.CoinExRestClientSpotApiAccount.GetCreditAccountAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV2.CoinExRestClientSpotApiAccount.GetAutoMarketMakerAccountLiquidityAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV2.CoinExRestClientSpotApiAccount.MarginBorrowAsync(System.String,System.String,System.Decimal,System.Boolean,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV2.CoinExRestClientSpotApiAccount.MarginRepayAsync(System.String,System.String,System.Decimal,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV2.CoinExRestClientSpotApiAccount.GetBorrowHistoryAsync(System.String,System.Nullable{CoinEx.Net.Enums.BorrowStatus},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV2.CoinExRestClientSpotApiAccount.GetBorrowLimitAsync(System.String,System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV2.CoinExRestClientSpotApiAccount.GetDepositAddressAsync(System.String,System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV2.CoinExRestClientSpotApiAccount.RenewDepositAddressAsync(System.String,System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV2.CoinExRestClientSpotApiAccount.GetDepositHistoryAsync(System.String,System.String,System.Nullable{CoinEx.Net.Enums.DepositStatus},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:CoinEx.Net.Clients.SpotApiV2.CoinExRestClientSpotApiExchangeData">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV2.CoinExRestClientSpotApiExchangeData.GetSymbolsAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV2.CoinExRestClientSpotApiExchangeData.GetTickersAsync(System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV2.CoinExRestClientSpotApiExchangeData.GetOrderBookAsync(System.String,System.Int32,System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV2.CoinExRestClientSpotApiExchangeData.GetTradeHistoryAsync(System.String,System.Nullable{System.Int32},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV2.CoinExRestClientSpotApiExchangeData.GetKlinesAsync(System.String,CoinEx.Net.Enums.KlineInterval,System.Nullable{System.Int32},System.Nullable{CoinEx.Net.Enums.PriceType},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV2.CoinExRestClientSpotApiExchangeData.GetIndexPricesAsync(System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:CoinEx.Net.Clients.SpotApiV2.CoinExRestClientSpotApiTrading">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV2.CoinExRestClientSpotApiTrading.PlaceOrderAsync(System.String,CoinEx.Net.Enums.AccountType,CoinEx.Net.Enums.OrderSide,CoinEx.Net.Enums.OrderTypeV2,System.Decimal,System.Nullable{System.Decimal},System.String,System.String,System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV2.CoinExRestClientSpotApiTrading.PlaceStopOrderAsync(System.String,CoinEx.Net.Enums.AccountType,CoinEx.Net.Enums.OrderSide,CoinEx.Net.Enums.OrderTypeV2,System.Decimal,System.Decimal,System.Nullable{System.Decimal},System.String,System.String,System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV2.CoinExRestClientSpotApiTrading.GetOrderAsync(System.String,System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV2.CoinExRestClientSpotApiTrading.GetOpenOrdersAsync(CoinEx.Net.Enums.AccountType,System.String,System.Nullable{CoinEx.Net.Enums.OrderSide},System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV2.CoinExRestClientSpotApiTrading.GetClosedOrdersAsync(CoinEx.Net.Enums.AccountType,System.String,System.Nullable{CoinEx.Net.Enums.OrderSide},System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV2.CoinExRestClientSpotApiTrading.GetOpenStopOrdersAsync(CoinEx.Net.Enums.AccountType,System.String,System.Nullable{CoinEx.Net.Enums.OrderSide},System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV2.CoinExRestClientSpotApiTrading.GetClosedStopOrdersAsync(CoinEx.Net.Enums.AccountType,System.String,System.Nullable{CoinEx.Net.Enums.OrderSide},System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV2.CoinExRestClientSpotApiTrading.EditOrderAsync(System.String,CoinEx.Net.Enums.AccountType,System.String,System.Decimal,System.Nullable{System.Decimal},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV2.CoinExRestClientSpotApiTrading.EditStopOrderAsync(System.String,CoinEx.Net.Enums.AccountType,System.String,System.Decimal,System.Decimal,System.Nullable{System.Decimal},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV2.CoinExRestClientSpotApiTrading.CancelAllOrdersAsync(System.String,CoinEx.Net.Enums.AccountType,System.Nullable{CoinEx.Net.Enums.OrderSide},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV2.CoinExRestClientSpotApiTrading.CancelOrderAsync(System.String,CoinEx.Net.Enums.AccountType,System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV2.CoinExRestClientSpotApiTrading.CancelStopOrderAsync(System.String,CoinEx.Net.Enums.AccountType,System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV2.CoinExRestClientSpotApiTrading.CancelOrderByClientOrderIdAsync(System.String,CoinEx.Net.Enums.AccountType,System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV2.CoinExRestClientSpotApiTrading.CancelStopOrderByClientOrderIdAsync(System.String,CoinEx.Net.Enums.AccountType,System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV2.CoinExRestClientSpotApiTrading.GetUserTradesAsync(System.String,CoinEx.Net.Enums.AccountType,System.Nullable{CoinEx.Net.Enums.OrderSide},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV2.CoinExRestClientSpotApiTrading.GetUserOrderTradesAsync(System.String,CoinEx.Net.Enums.AccountType,System.Int64,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:CoinEx.Net.Clients.SpotApiV2.CoinExSocketClientSpotApi">
            <inheritdoc cref="T:CoinEx.Net.Interfaces.Clients.SpotApiV2.ICoinExSocketClientSpotApi" />
        </member>
        <member name="P:CoinEx.Net.Clients.SpotApiV2.CoinExSocketClientSpotApi.ClientOptions">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV2.CoinExSocketClientSpotApi.#ctor(Microsoft.Extensions.Logging.ILogger,CoinEx.Net.Objects.Options.CoinExSocketOptions)">
            <summary>
            Create a new instance of CoinExSocketClient with default options
            </summary>
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV2.CoinExSocketClientSpotApi.CreateAuthenticationProvider(CryptoExchange.Net.Authentication.ApiCredentials)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV2.CoinExSocketClientSpotApi.CreateAccessor">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV2.CoinExSocketClientSpotApi.CreateSerializer">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV2.CoinExSocketClientSpotApi.GetListenerIdentifier(CryptoExchange.Net.Interfaces.IMessageAccessor)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV2.CoinExSocketClientSpotApi.GetAuthenticationRequest">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV2.CoinExSocketClientSpotApi.PreprocessStreamMessage(System.Net.WebSockets.WebSocketMessageType,System.ReadOnlyMemory{System.Byte})">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV2.CoinExSocketClientSpotApi.SubscribeToTickerUpdatesAsync(System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{System.Collections.Generic.IEnumerable{CoinEx.Net.Objects.Models.V2.CoinExTicker}}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV2.CoinExSocketClientSpotApi.SubscribeToTickerUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{System.Collections.Generic.IEnumerable{CoinEx.Net.Objects.Models.V2.CoinExTicker}}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV2.CoinExSocketClientSpotApi.SubscribeToOrderBookUpdatesAsync(System.String,System.Int32,System.String,System.Boolean,System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{CoinEx.Net.Objects.Models.V2.CoinExOrderBook}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV2.CoinExSocketClientSpotApi.SubscribeToOrderBookUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},System.Int32,System.String,System.Boolean,System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{CoinEx.Net.Objects.Models.V2.CoinExOrderBook}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV2.CoinExSocketClientSpotApi.SubscribeToTradeUpdatesAsync(System.String,System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{System.Collections.Generic.IEnumerable{CoinEx.Net.Objects.Models.V2.CoinExTrade}}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV2.CoinExSocketClientSpotApi.SubscribeToTradeUpdatesAsync(System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{System.Collections.Generic.IEnumerable{CoinEx.Net.Objects.Models.V2.CoinExTrade}}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV2.CoinExSocketClientSpotApi.SubscribeToTradeUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{System.Collections.Generic.IEnumerable{CoinEx.Net.Objects.Models.V2.CoinExTrade}}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV2.CoinExSocketClientSpotApi.SubscribeToIndexPriceUpdatesAsync(System.String,System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{CoinEx.Net.Objects.Models.V2.CoinExIndexPriceUpdate}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV2.CoinExSocketClientSpotApi.SubscribeToIndexPriceUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{CoinEx.Net.Objects.Models.V2.CoinExIndexPriceUpdate}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV2.CoinExSocketClientSpotApi.SubscribeToBookPriceUpdatesAsync(System.String,System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{CoinEx.Net.Objects.Models.V2.CoinExBookPriceUpdate}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV2.CoinExSocketClientSpotApi.SubscribeToBookPriceUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{CoinEx.Net.Objects.Models.V2.CoinExBookPriceUpdate}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV2.CoinExSocketClientSpotApi.SubscribeToOrderUpdatesAsync(System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{CoinEx.Net.Objects.Models.V2.CoinExOrderUpdate}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV2.CoinExSocketClientSpotApi.SubscribeToStopOrderUpdatesAsync(System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{CoinEx.Net.Objects.Models.V2.CoinExStopOrderUpdate}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV2.CoinExSocketClientSpotApi.SubscribeToUserTradeUpdatesAsync(System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{CoinEx.Net.Objects.Models.V2.CoinExUserTrade}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV2.CoinExSocketClientSpotApi.SubscribeToBalanceUpdatesAsync(System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{System.Collections.Generic.IEnumerable{CoinEx.Net.Objects.Models.V2.CoinExBalanceUpdate}}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:CoinEx.Net.CoinExEnvironment">
            <summary>
            CoinEx environments
            </summary>
        </member>
        <member name="P:CoinEx.Net.CoinExEnvironment.RestBaseAddress">
            <summary>
            Spot Rest client address
            </summary>
        </member>
        <member name="P:CoinEx.Net.CoinExEnvironment.SocketBaseAddress">
            <summary>
            Spot V1 Socket client address
            </summary>
        </member>
        <member name="P:CoinEx.Net.CoinExEnvironment.Live">
            <summary>
            Live environment
            </summary>
        </member>
        <member name="M:CoinEx.Net.CoinExEnvironment.CreateCustom(System.String,System.String,System.String)">
            <summary>
            Create a custom environment
            </summary>
            <param name="name"></param>
            <param name="restAddress"></param>
            <param name="socketAddress"></param>
            <returns></returns>
        </member>
        <member name="T:CoinEx.Net.CoinExHelpers">
            <summary>
            CoinEx helpers
            </summary>
        </member>
        <member name="M:CoinEx.Net.CoinExHelpers.ToSeconds(CoinEx.Net.Enums.KlineInterval)">
            <summary>
            Kline interval to seconds
            </summary>
            <param name="interval"></param>
            <returns></returns>
        </member>
        <member name="M:CoinEx.Net.CoinExHelpers.MergeDepthIntToString(System.Int32)">
            <summary>
            Merge depth to string parameter
            </summary>
            <param name="depth"></param>
            <returns></returns>
        </member>
        <member name="T:CoinEx.Net.Enums.AccountType">
            <summary>
            Account type
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.AccountType.Spot">
            <summary>
            Spot account
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.AccountType.Margin">
            <summary>
            Margin account
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.AccountType.Futures">
            <summary>
            Futures account
            </summary>
        </member>
        <member name="T:CoinEx.Net.Enums.BorrowStatus">
            <summary>
            Borrow status
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.BorrowStatus.Loan">
            <summary>
            Borrowing
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.BorrowStatus.Debt">
            <summary>
            In debt
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.BorrowStatus.Liquidated">
            <summary>
            Forcefully liquidated
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.BorrowStatus.Finish">
            <summary>
            Has been repaid
            </summary>
        </member>
        <member name="T:CoinEx.Net.Enums.DepositStatus">
            <summary>
            Deposit status
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.DepositStatus.Processing">
            <summary>
            Currently processing
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.DepositStatus.Confirming">
            <summary>
            Awaiting blockchain confirmation
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.DepositStatus.Canceled">
            <summary>
            Canceled
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.DepositStatus.Finished">
            <summary>
            Finished
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.DepositStatus.TooSmall">
            <summary>
            Deposit amount was too small
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.DepositStatus.Exception">
            <summary>
            Exception
            </summary>
        </member>
        <member name="T:CoinEx.Net.Enums.KlineInterval">
            <summary>
            Interval for klines, int value represent the time in seconds
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.KlineInterval.OneMinute">
            <summary>
            1m
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.KlineInterval.ThreeMinutes">
            <summary>
            3m
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.KlineInterval.FiveMinutes">
            <summary>
            5m
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.KlineInterval.FifteenMinutes">
            <summary>
            15m
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.KlineInterval.ThirtyMinutes">
            <summary>
            30m
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.KlineInterval.OneHour">
            <summary>
            1h
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.KlineInterval.TwoHours">
            <summary>
            2h
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.KlineInterval.FourHours">
            <summary>
            4h
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.KlineInterval.SixHours">
            <summary>
            6h
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.KlineInterval.TwelveHours">
            <summary>
            12h
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.KlineInterval.OneDay">
            <summary>
            1d
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.KlineInterval.ThreeDays">
            <summary>
            3d
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.KlineInterval.OneWeek">
            <summary>
            1w
            </summary>
        </member>
        <member name="T:CoinEx.Net.Enums.OrderOption">
            <summary>
            Options when placing an order
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.OrderOption.Normal">
            <summary>
            Normal order
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.OrderOption.ImmediateOrCancel">
            <summary>
            Immediate or cancel order
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.OrderOption.FillOrKill">
            <summary>
            Fill or kill order
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.OrderOption.MakerOnly">
            <summary>
            Maker only order
            </summary>
        </member>
        <member name="T:CoinEx.Net.Enums.OrderSide">
            <summary>
            Order side
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.OrderSide.Either">
            <summary>
            Either (only usable for filtering)
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.OrderSide.Buy">
            <summary>
            Buy
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.OrderSide.Sell">
            <summary>
            Sell
            </summary>
        </member>
        <member name="T:CoinEx.Net.Enums.OrderStatus">
            <summary>
            Status of an order
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.OrderStatus.Executed">
            <summary>
            Executed
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.OrderStatus.PartiallyExecuted">
            <summary>
            Partially executed
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.OrderStatus.UnExecuted">
            <summary>
            New
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.OrderStatus.Canceled">
            <summary>
            Canceled
            </summary>
        </member>
        <member name="T:CoinEx.Net.Enums.OrderStatusV2">
            <summary>
            Order status
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.OrderStatusV2.Open">
            <summary>
            Open
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.OrderStatusV2.PartiallyFilled">
            <summary>
            Partially filled
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.OrderStatusV2.Filled">
            <summary>
            Fully filled
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.OrderStatusV2.PartiallyCanceled">
            <summary>
            Partially filled, partially canceled
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.OrderStatusV2.Canceled">
            <summary>
            Fully canceled
            </summary>
        </member>
        <member name="T:CoinEx.Net.Enums.OrderType">
            <summary>
            Type of order
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.OrderType.Limit">
            <summary>
            Limit order
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.OrderType.Market">
            <summary>
            Market order
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.OrderType.StopLimit">
            <summary>
            Stop limit order
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.OrderType.StopMarket">
            <summary>
            Stop market order
            </summary>
        </member>
        <member name="T:CoinEx.Net.Enums.OrderTypeV2">
            <summary>
            Order type
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.OrderTypeV2.Limit">
            <summary>
            Limit order
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.OrderTypeV2.Market">
            <summary>
            Market order
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.OrderTypeV2.PostOnly">
            <summary>
            Post only
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.OrderTypeV2.ImmediateOrCancel">
            <summary>
            Immediate or cancel
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.OrderTypeV2.FillOrKill">
            <summary>
            Fill or kill
            </summary>
        </member>
        <member name="T:CoinEx.Net.Enums.OrderUpdateType">
            <summary>
            Order update type
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.OrderUpdateType.Put">
            <summary>
            Order created
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.OrderUpdateType.Update">
            <summary>
            Order updated
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.OrderUpdateType.Finish">
            <summary>
            Order finished
            </summary>
        </member>
        <member name="T:CoinEx.Net.Enums.PriceType">
            <summary>
            Price type
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.PriceType.LastPrice">
            <summary>
            Last price
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.PriceType.MarkPrice">
            <summary>
            Mark price
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.PriceType.IndexPrice">
            <summary>
            Index price
            </summary>
        </member>
        <member name="T:CoinEx.Net.Enums.StopOrderUpdateType">
            <summary>
            Stop order update type
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.StopOrderUpdateType.Put">
            <summary>
            Order created
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.StopOrderUpdateType.Active">
            <summary>
            Order active
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.StopOrderUpdateType.Cancel">
            <summary>
            Order canceled
            </summary>
        </member>
        <member name="T:CoinEx.Net.Enums.TransactionRole">
            <summary>
            Role of a transaction
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.TransactionRole.Maker">
            <summary>
            Maker of a new order book entry
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.TransactionRole.Taker">
            <summary>
            Taker of an existing order book entry
            </summary>
        </member>
        <member name="T:CoinEx.Net.Enums.TriggerDirection">
            <summary>
            Trigger direction
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.TriggerDirection.Higher">
            <summary>
            Should trigger when the price is higher than the trigger price
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.TriggerDirection.Lower">
            <summary>
            Should trigger when the price is lower than the trigger price
            </summary>
        </member>
        <member name="T:CoinEx.Net.Enums.UpdateType">
            <summary>
            Type of update
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.UpdateType.New">
            <summary>
            New
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.UpdateType.Update">
            <summary>
            Update
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.UpdateType.Done">
            <summary>
            Done
            </summary>
        </member>
        <member name="T:CoinEx.Net.Enums.WithdrawStatus">
            <summary>
            Status of a withdrawal
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.WithdrawStatus.Audit">
            <summary>
            Under audit
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.WithdrawStatus.Pass">
            <summary>
            Passed audit
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.WithdrawStatus.Processing">
            <summary>
            Processing
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.WithdrawStatus.Confirming">
            <summary>
            Confirming
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.WithdrawStatus.NotPass">
            <summary>
            Not passed audit
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.WithdrawStatus.Cancel">
            <summary>
            Canceled
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.WithdrawStatus.Finish">
            <summary>
            Finished
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.WithdrawStatus.Fail">
            <summary>
            Failed
            </summary>
        </member>
        <member name="T:CoinEx.Net.ExtensionMethods.CoinExExtensionMethods">
            <summary>
            Extension methods specific to using the CoinEx API
            </summary>
        </member>
        <member name="T:CoinEx.Net.Interfaces.Clients.ICoinExRestClient">
            <summary>
            Client for accessing the CoinEx API. 
            </summary>
        </member>
        <member name="P:CoinEx.Net.Interfaces.Clients.ICoinExRestClient.SpotApi">
            <summary>
            Spot V1 API endpoints. Use V2 API if possible, V1 API will be removed at a later date
            </summary>
        </member>
        <member name="P:CoinEx.Net.Interfaces.Clients.ICoinExRestClient.SpotApiV2">
            <summary>
            Spot V2 API endpoints
            </summary>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.ICoinExRestClient.SetApiCredentials(CryptoExchange.Net.Authentication.ApiCredentials)">
            <summary>
            Set the API credentials for this client. All Api clients in this client will use the new credentials, regardless of earlier set options.
            </summary>
            <param name="credentials">The credentials to set</param>
        </member>
        <member name="T:CoinEx.Net.Interfaces.Clients.ICoinExSocketClient">
            <summary>
            Client for accessing the CoinEx websocket API
            </summary>
        </member>
        <member name="P:CoinEx.Net.Interfaces.Clients.ICoinExSocketClient.SpotApiV2">
            <summary>
            V2 API Spot streams
            </summary>
        </member>
        <member name="P:CoinEx.Net.Interfaces.Clients.ICoinExSocketClient.SpotApi">
            <summary>
            V1 API Spot streams. Use V2 if possible, V1 will be removed at a later date
            </summary>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.ICoinExSocketClient.SetApiCredentials(CryptoExchange.Net.Authentication.ApiCredentials)">
            <summary>
            Set the API credentials for this client. All Api clients in this client will use the new credentials, regardless of earlier set options.
            </summary>
            <param name="credentials">The credentials to set</param>
        </member>
        <member name="T:CoinEx.Net.Interfaces.Clients.SpotApiV1.ICoinExRestClientSpotApi">
            <summary>
            Spot API
            </summary>
        </member>
        <member name="P:CoinEx.Net.Interfaces.Clients.SpotApiV1.ICoinExRestClientSpotApi.Account">
            <summary>
            Endpoints related to account settings, info or actions
            </summary>
        </member>
        <member name="P:CoinEx.Net.Interfaces.Clients.SpotApiV1.ICoinExRestClientSpotApi.ExchangeData">
            <summary>
            Endpoints related to retrieving market and system data
            </summary>
        </member>
        <member name="P:CoinEx.Net.Interfaces.Clients.SpotApiV1.ICoinExRestClientSpotApi.Trading">
            <summary>
            Endpoints related to orders and trades
            </summary>
        </member>
        <member name="P:CoinEx.Net.Interfaces.Clients.SpotApiV1.ICoinExRestClientSpotApi.CommonSpotClient">
            <summary>
            Get the ISpotClient for this client. This is a common interface which allows for some basic operations without knowing any details of the exchange.
            </summary>
            <returns></returns>
        </member>
        <member name="T:CoinEx.Net.Interfaces.Clients.SpotApiV1.ICoinExRestClientSpotApiAccount">
            <summary>
            CoinEx account endpoints. Account endpoints include balance info, withdraw/deposit info and requesting and account settings
            </summary>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.SpotApiV1.ICoinExRestClientSpotApiAccount.GetBalancesAsync(System.Threading.CancellationToken)">
            <summary>
            Retrieves a list of balances. Requires API credentials
            <para><a href="https://github.com/coinexcom/coinex_exchange_api/wiki/060balance" /></para>
            </summary>
            <param name="ct">Cancellation token</param>
            <returns>List of balances</returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.SpotApiV1.ICoinExRestClientSpotApiAccount.GetDepositHistoryAsync(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Retrieves a list of deposits. Requires API credentials and withdrawal permission on the API key
            <para><a href="https://github.com/coinexcom/coinex_exchange_api/wiki/065get_deposit_list" /></para>
            </summary>
            <param name="asset">The asset to get history for</param>
            <param name="page">The page in the results to retrieve</param>
            <param name="limit">The number of results to return per page</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.SpotApiV1.ICoinExRestClientSpotApiAccount.GetDepositAddressAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Get the deposit address of an asset
            <para><a href="https://github.com/coinexcom/coinex_exchange_api/wiki/072get_deposit_address" /></para>
            </summary>
            <param name="asset">The asset to deposit</param>
            <param name="smartContractName">Name of the network to use</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.SpotApiV1.ICoinExRestClientSpotApiAccount.GetWithdrawalHistoryAsync(System.String,System.Nullable{System.Int64},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Retrieves a list of withdrawals. Requires API credentials and withdrawal permission on the API key
            <para><a href="https://github.com/coinexcom/coinex_exchange_api/wiki/061get_withdraw_list" /></para>
            </summary>
            <param name="asset">The asset to get history for</param>
            <param name="withdrawId">Retrieve a withdrawal with a specific id</param>
            <param name="page">The page in the results to retrieve</param>
            <param name="limit">The number of results to return per page</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.SpotApiV1.ICoinExRestClientSpotApiAccount.WithdrawAsync(System.String,System.String,System.Boolean,System.Decimal,System.String,System.Threading.CancellationToken)">
            <summary>
            Withdraw assets from CoinEx to a specific address. Requires API credentials and withdrawal permission on the API key
            <para><a href="https://github.com/coinexcom/coinex_exchange_api/wiki/062submit_withdraw" /></para>
            </summary>
            <param name="asset">The asset to withdraw</param>
            <param name="localTransfer">Is it a local transfer between users or onchain</param>
            <param name="address">The address to withdraw to</param>
            <param name="quantity">The quantity to withdraw. This is the quantity AFTER fees have been deducted. For fee rates see https://www.coinex.com/fees </param>
            <param name="network">The network to use for the withdrawal</param>
            <param name="ct">Cancellation token</param>
            <returns>The withdrawal object</returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.SpotApiV1.ICoinExRestClientSpotApiAccount.CancelWithdrawalAsync(System.Int64,System.Threading.CancellationToken)">
            <summary>
            Cancel a specific withdrawal. Requires API credentials and withdrawal permission on the API key
            <para><a href="https://github.com/coinexcom/coinex_exchange_api/wiki/064cancel_withdraw" /></para>
            </summary>
            <param name="withdrawId">The id of the withdrawal to cancel</param>
            <param name="ct">Cancellation token</param>
            <returns>True if successful, false otherwise</returns>
        </member>
        <member name="T:CoinEx.Net.Interfaces.Clients.SpotApiV1.ICoinExRestClientSpotApiExchangeData">
            <summary>
            CoinEx exchange data endpoints. Exchange data includes market data (tickers, order books, etc) and system status.
            </summary>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.SpotApiV1.ICoinExRestClientSpotApiExchangeData.GetCurrencyRateAsync(System.Threading.CancellationToken)">
            <summary>
            Gets the exchange rates of currencies
            <para><a href="https://github.com/coinexcom/coinex_exchange_api/wiki/070currency_rate" /></para>
            </summary>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.SpotApiV1.ICoinExRestClientSpotApiExchangeData.GetAssetsAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the asset configs
            <para><a href="https://github.com/coinexcom/coinex_exchange_api/wiki/071asset_config" /></para>
            </summary>
            <param name="assetType">Optionally only return a certain type of asset, for example BCH</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.SpotApiV1.ICoinExRestClientSpotApiExchangeData.GetSymbolsAsync(System.Threading.CancellationToken)">
            <summary>
            Gets a list of symbols active on CoinEx
            <para><a href="https://github.com/coinexcom/coinex_exchange_api/wiki/020market" /></para>
            </summary>
            <param name="ct">Cancellation token</param>
            <returns>List of symbol names</returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.SpotApiV1.ICoinExRestClientSpotApiExchangeData.GetTickerAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the state of a specific symbol
            <para><a href="https://github.com/coinexcom/coinex_exchange_api/wiki/021ticker" /></para>
            </summary>
            <param name="symbol">The symbol to retrieve state for</param>
            <param name="ct">Cancellation token</param>
            <returns>The state of the symbol</returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.SpotApiV1.ICoinExRestClientSpotApiExchangeData.GetTickersAsync(System.Threading.CancellationToken)">
            <summary>
            Gets the states of all symbols
            <para><a href="https://github.com/coinexcom/coinex_exchange_api/wiki/021ticker" /></para>
            </summary>
            <param name="ct">Cancellation token</param>
            <returns>List of states for all symbols</returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.SpotApiV1.ICoinExRestClientSpotApiExchangeData.GetOrderBookAsync(System.String,System.Int32,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets the order book for a symbol
            <para><a href="https://github.com/coinexcom/coinex_exchange_api/wiki/022depth" /></para>
            </summary>
            <param name="symbol">The symbol to retrieve depth data for</param>
            <param name="mergeDepth">The depth of merging, based on 8 decimals. 1 mergeDepth will merge the last decimals of all order in the book, 7 will merge the last 7 decimals of all orders together</param>
            <param name="limit">The limit of results returned</param>
            <param name="ct">Cancellation token</param>
            <returns>Order book for a symbol</returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.SpotApiV1.ICoinExRestClientSpotApiExchangeData.GetTradeHistoryAsync(System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Gets the latest trades for a symbol
            <para><a href="https://github.com/coinexcom/coinex_exchange_api/wiki/023deals" /></para>
            </summary>
            <param name="symbol">The symbol to retrieve data for</param>
            <param name="fromId">The id from which on to return trades</param>
            <param name="ct">Cancellation token</param>
            <returns>List of trades for a symbol</returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.SpotApiV1.ICoinExRestClientSpotApiExchangeData.GetKlinesAsync(System.String,CoinEx.Net.Enums.KlineInterval,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Retrieves kline data for a specific symbol
            <para><a href="https://github.com/coinexcom/coinex_exchange_api/wiki/024kline" /></para>
            </summary>
            <param name="symbol">The symbol to retrieve klines for</param>
            <param name="interval">The interval of the candles</param>
            <param name="limit">Limit of the number of results</param>
            <param name="ct">Cancellation token</param>
            <returns>List of klines for a symbol</returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.SpotApiV1.ICoinExRestClientSpotApiExchangeData.GetSymbolInfoAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Retrieves market data for the exchange
            <para><a href="https://github.com/coinexcom/coinex_exchange_api/wiki/026market_single_info" /></para>
            </summary>
            <param name="symbol">The symbol to retrieve data for</param>
            <param name="ct">Cancellation token</param>
            <returns>List of market data for the exchange</returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.SpotApiV1.ICoinExRestClientSpotApiExchangeData.GetSymbolInfoAsync(System.Threading.CancellationToken)">
            <summary>
            Retrieves market data for the exchange
            <para><a href="https://github.com/coinexcom/coinex_exchange_api/wiki/025marketinfo" /></para>
            </summary>
            <param name="ct">Cancellation token</param>
            <returns>List of market data for the exchange</returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.SpotApiV1.ICoinExRestClientSpotApiExchangeData.GetMiningDifficultyAsync(System.Threading.CancellationToken)">
            <summary>
            Retrieve the mining difficulty. Requires API credentials
            <para><a href="https://github.com/coinexcom/coinex_exchange_api/wiki/0310mining_difficulty" /></para>
            </summary>
            <param name="ct">Cancellation token</param>
            <returns>Mining difficulty</returns>
        </member>
        <member name="T:CoinEx.Net.Interfaces.Clients.SpotApiV1.ICoinExRestClientSpotApiTrading">
            <summary>
            CoinEx trading endpoints, placing and mananging orders.
            </summary>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.SpotApiV1.ICoinExRestClientSpotApiTrading.PlaceOrderAsync(System.String,CoinEx.Net.Enums.OrderSide,CoinEx.Net.Enums.OrderType,System.Decimal,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Boolean},System.Nullable{CoinEx.Net.Enums.OrderOption},System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Places an order. This is a single method for multiple place order endpoints. The called endpoint depends on the provided order type.
            <para><a href="https://github.com/coinexcom/coinex_exchange_api/wiki/031limit_order" /></para>
            <para><a href="https://github.com/coinexcom/coinex_exchange_api/wiki/032market_order" /></para>
            <para><a href="https://github.com/coinexcom/coinex_exchange_api/wiki/03111stop_limit_order" /></para>
            <para><a href="https://github.com/coinexcom/coinex_exchange_api/wiki/033IOC_order" /></para>
            </summary>
            <param name="symbol">The symbol to place the order for</param>
            <param name="side">Order side</param>
            <param name="type">Order type</param>
            <param name="quantity">The quantity of the order</param>
            <param name="price">The price of a single unit of the order</param>
            <param name="orderOption">Option for the order</param>
            <param name="stopPrice">The stop-price of a single unit of the order</param>
            <param name="immediateOrCancel">True if the order should be filled immediately up on placing, otherwise it will be canceled</param>
            <param name="clientOrderId">Client id which can be used to match the order</param>
            <param name="sourceId">User defined number</param>
            <param name="ct">Cancellation token</param>
            <returns>Details of the order that was placed</returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.SpotApiV1.ICoinExRestClientSpotApiTrading.GetOpenOrdersAsync(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Retrieves a list of open orders for a symbol. Requires API credentials
            <para><a href="https://github.com/coinexcom/coinex_exchange_api/wiki/034pending" /></para>
            </summary>
            <param name="symbol">The symbol to retrieve the open orders for</param>
            <param name="page">The page of the resulting list</param>
            <param name="limit">The number of results per page</param>
            <param name="ct">Cancellation token</param>
            <returns>List of open orders for a symbol</returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.SpotApiV1.ICoinExRestClientSpotApiTrading.GetOpenStopOrdersAsync(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Retrieves a list of open stop orders for a symbol. Requires API credentials
            <para><a href="https://github.com/coinexcom/coinex_exchange_api/wiki/041stop_pending" /></para>
            </summary>
            <param name="symbol">The symbol to retrieve the open orders for</param>
            <param name="page">The page of the resulting list</param>
            <param name="limit">The number of results per page</param>
            <param name="ct">Cancellation token</param>
            <returns>List of open orders for a symbol</returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.SpotApiV1.ICoinExRestClientSpotApiTrading.GetClosedOrdersAsync(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Retrieves a list of executed orders for a symbol in the last 2 days. Requires API credentials
            <para><a href="https://github.com/coinexcom/coinex_exchange_api/wiki/036finished" /></para>
            </summary>
            <param name="symbol">The symbol to retrieve the open orders for</param>
            <param name="page">The page of the resulting list</param>
            <param name="limit">The number of results per page</param>
            <param name="ct">Cancellation token</param>
            <returns>List of executed orders for a symbol</returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.SpotApiV1.ICoinExRestClientSpotApiTrading.GetOrderAsync(System.String,System.Int64,System.Threading.CancellationToken)">
            <summary>
            Retrieves details of an order. Requires API credentials
            <para><a href="https://github.com/coinexcom/coinex_exchange_api/wiki/037order_status" /></para>
            </summary>
            <param name="orderId">The id of the order to retrieve</param>
            <param name="symbol">The symbol the order is for</param>
            <param name="ct">Cancellation token</param>
            <returns>Details of the order</returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.SpotApiV1.ICoinExRestClientSpotApiTrading.GetOrderTradesAsync(System.Int64,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Retrieves execution details of a specific order. Requires API credentials
            <para><a href="https://github.com/coinexcom/coinex_exchange_api/wiki/0311order_deals" /></para>
            </summary>
            <param name="orderId">The id of the order</param>
            <param name="page">The page of the resulting list</param>
            <param name="limit">The number of results per page</param>
            <param name="ct">Cancellation token</param>
            <returns>Details of an executed order</returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.SpotApiV1.ICoinExRestClientSpotApiTrading.GetUserTradesAsync(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets a list of trades you executed on a specific symbol. Requires API credentials
            <para><a href="https://github.com/coinexcom/coinex_exchange_api/wiki/039user_deals" /></para>
            </summary>
            <param name="symbol">The symbol to retrieve trades for</param>
            <param name="page">The page of the resulting list</param>
            <param name="limit">The number of results per page</param>
            <param name="ct">Cancellation token</param>
            <returns>List of trades for a symbol</returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.SpotApiV1.ICoinExRestClientSpotApiTrading.CancelOrderAsync(System.String,System.Int64,System.Threading.CancellationToken)">
            <summary>
            Cancels an order. Requires API credentials
            <para><a href="https://github.com/coinexcom/coinex_exchange_api/wiki/035cancel" /></para>
            </summary>
            <param name="symbol">The symbol the order is on</param>
            <param name="orderId">The id of the order to cancel</param>
            <param name="ct">Cancellation token</param>
            <returns>Details of the canceled order</returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.SpotApiV1.ICoinExRestClientSpotApiTrading.CancelAllStopOrdersAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Cancels all stop orders. Requires API credentials
            </summary>
            <param name="symbol">The symbol the orders are on</param>
            <param name="ct">Cancellation token</param>
            <returns>Execution statut</returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.SpotApiV1.ICoinExRestClientSpotApiTrading.CancelAllOrdersAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Cancels all orders. Requires API credentials
            <para><a href="https://github.com/coinexcom/coinex_exchange_api/wiki/0315cancel_all" /></para>
            </summary>
            <param name="symbol">The symbol the orders are on</param>
            <param name="ct">Cancellation token</param>
            <returns>Execution statut</returns>
        </member>
        <member name="T:CoinEx.Net.Interfaces.Clients.SpotApiV1.ICoinExSocketClientSpotApi">
            <summary>
            Spot streams
            </summary>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.SpotApiV1.ICoinExSocketClientSpotApi.PingAsync">
            <summary>
            Pings the server
            <para><a href="https://github.com/coinexcom/coinex_exchange_api/wiki/048ping" /></para>
            </summary>
            <returns>Success if server responded, error otherwise</returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.SpotApiV1.ICoinExSocketClientSpotApi.GetServerTimeAsync">
            <summary>
            Gets the server time
            <para><a href="https://github.com/coinexcom/coinex_exchange_api/wiki/049time" /></para>
            </summary>
            <returns>The server time</returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.SpotApiV1.ICoinExSocketClientSpotApi.GetTickerAsync(System.String,System.Int32)">
            <summary>
            Get the symbol ticker
            <para><a href="https://github.com/coinexcom/coinex_exchange_api/wiki/053state" /></para>
            </summary>
            <param name="symbol">The symbol to get the state for</param>
            <param name="cyclePeriod">The period to get data over, specified in seconds. i.e. one minute = 60, one day = 86400</param>
            <returns>Symbol state</returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.SpotApiV1.ICoinExSocketClientSpotApi.SubscribeToTickerUpdatesAsync(System.String,System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{CoinEx.Net.Objects.Models.Socket.CoinExSocketSymbolState}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to symbol ticker updates for a specific symbol
            <para><a href="https://github.com/coinexcom/coinex_exchange_api/wiki/053state" /></para>
            </summary>
            <param name="symbol">Symbol to receive updates for</param>
            <param name="onMessage">Data handler</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.SpotApiV1.ICoinExSocketClientSpotApi.SubscribeToAllTickerUpdatesAsync(System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{System.Collections.Generic.IEnumerable{CoinEx.Net.Objects.Models.Socket.CoinExSocketSymbolState}}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to ticker updates for all symbols
            <para><a href="https://github.com/coinexcom/coinex_exchange_api/wiki/053state" /></para>
            </summary>
            <param name="onMessage">Data handler</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.SpotApiV1.ICoinExSocketClientSpotApi.GetOrderBookAsync(System.String,System.Int32,System.Int32)">
            <summary>
            Get an order book
            <para><a href="https://github.com/coinexcom/coinex_exchange_api/wiki/044depth" /></para>
            </summary>
            <param name="symbol">The symbol to get the order book for</param>
            <param name="limit">The limit of results returned, 5, 10 or 20</param>
            <param name="mergeDepth">The depth of merging, based on 8 decimals. 1 mergeDepth will merge the last decimals of all order in the book, 7 will merge the last 7 decimals of all orders together</param>
            <returns>Order book of a symbol</returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.SpotApiV1.ICoinExSocketClientSpotApi.SubscribeToOrderBookUpdatesAsync(System.String,System.Int32,System.Int32,System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{CoinEx.Net.Objects.Models.Socket.CoinExSocketOrderBook}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to order book updates
            <para><a href="https://github.com/coinexcom/coinex_exchange_api/wiki/044depth" /></para>
            </summary>
            <param name="symbol">The symbol to receive updates for</param>
            <param name="limit">The limit of results to receive in a update</param>
            <param name="mergeDepth">The depth of merging, based on 8 decimals. 1 mergeDepth will merge the last decimals of all order in the book, 7 will merge the last 7 decimals of all orders together</param>
            <param name="onMessage">Data handler</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.SpotApiV1.ICoinExSocketClientSpotApi.GetTradeHistoryAsync(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Gets the latest trades on a symbol
            <para><a href="https://github.com/coinexcom/coinex_exchange_api/wiki/045deals" /></para>
            </summary>
            <param name="symbol">The symbol to get the trades for</param>
            <param name="limit">The limit of trades</param>
            <param name="fromId">Return trades since this id</param>
            <returns>List of trades</returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.SpotApiV1.ICoinExSocketClientSpotApi.SubscribeToTradeUpdatesAsync(System.String,System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{System.Collections.Generic.IEnumerable{CoinEx.Net.Objects.Models.Socket.CoinExSocketSymbolTrade}}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to symbol trade updates for a symbol
            <para><a href="https://github.com/coinexcom/coinex_exchange_api/wiki/045deals" /></para>
            </summary>
            <param name="symbol">The symbol to receive updates from</param>
            <param name="onMessage">Data handler</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.SpotApiV1.ICoinExSocketClientSpotApi.GetKlinesAsync(System.String,CoinEx.Net.Enums.KlineInterval)">
            <summary>
            Gets symbol kline data
            <para><a href="https://github.com/coinexcom/coinex_exchange_api/wiki/046kline" /></para>
            </summary>
            <param name="symbol">The symbol to get the data for</param>
            <param name="interval">The interval of the candles</param>
            <returns></returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.SpotApiV1.ICoinExSocketClientSpotApi.GetBalancesAsync(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Get balances of assets. Requires API credentials
            <para><a href="https://github.com/coinexcom/coinex_exchange_api/wiki/051asset" /></para>
            </summary>
            <param name="assets">The assets to get the balances for, empty for all</param>
            <returns>Dictionary of assets and their balances</returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.SpotApiV1.ICoinExSocketClientSpotApi.SubscribeToBalanceUpdatesAsync(System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{System.Collections.Generic.IEnumerable{CoinEx.Net.Objects.Models.CoinExBalance}}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to updates of your balances, Receives updates whenever the balance for an asset changes
            <para><a href="https://github.com/coinexcom/coinex_exchange_api/wiki/051asset" /></para>
            </summary>
            <param name="onMessage">Data handler</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.SpotApiV1.ICoinExSocketClientSpotApi.GetOpenOrdersAsync(System.String,System.Nullable{CoinEx.Net.Enums.OrderSide},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Gets a list of open orders for a symbol
            <para><a href="https://github.com/coinexcom/coinex_exchange_api/wiki/052order" /></para>
            </summary>
            <param name="symbol">Symbol to get open orders for</param>
            <param name="side">Order side</param>
            <param name="offset">The offset in the list</param>
            <param name="limit">The limit of results</param>
            <returns>List of open orders</returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.SpotApiV1.ICoinExSocketClientSpotApi.SubscribeToOrderUpdatesAsync(System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{CoinEx.Net.Objects.Models.Socket.CoinExSocketOrderUpdate}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to updates of active orders. Receives updates whenever an order is placed, updated or finished
            <para><a href="https://github.com/coinexcom/coinex_exchange_api/wiki/052order" /></para>
            </summary>
            <param name="onMessage">Data handler</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.SpotApiV1.ICoinExSocketClientSpotApi.SubscribeToOrderUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{CoinEx.Net.Objects.Models.Socket.CoinExSocketOrderUpdate}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to updates of active orders. Receives updates whenever an order is placed, updated or finished
            <para><a href="https://github.com/coinexcom/coinex_exchange_api/wiki/052order" /></para>
            </summary>
            <param name="symbols">The symbols to receive order updates from</param>
            <param name="onMessage">Data handler</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="T:CoinEx.Net.Interfaces.Clients.SpotApiV2.ICoinExRestClientSpotApi">
            <summary>
            Spot API
            </summary>
        </member>
        <member name="P:CoinEx.Net.Interfaces.Clients.SpotApiV2.ICoinExRestClientSpotApi.Account">
            <summary>
            Endpoints related to account settings, info or actions
            </summary>
        </member>
        <member name="P:CoinEx.Net.Interfaces.Clients.SpotApiV2.ICoinExRestClientSpotApi.ExchangeData">
            <summary>
            Endpoints related to retrieving market and system data
            </summary>
        </member>
        <member name="P:CoinEx.Net.Interfaces.Clients.SpotApiV2.ICoinExRestClientSpotApi.Trading">
            <summary>
            Endpoints related to orders and trades
            </summary>
        </member>
        <member name="P:CoinEx.Net.Interfaces.Clients.SpotApiV2.ICoinExRestClientSpotApi.CommonSpotClient">
            <summary>
            Get the ISpotClient for this client. This is a common interface which allows for some basic operations without knowing any details of the exchange.
            </summary>
            <returns></returns>
        </member>
        <member name="T:CoinEx.Net.Interfaces.Clients.SpotApiV2.ICoinExRestClientSpotApiAccount">
            <summary>
            CoinEx account endpoints. Account endpoints include balance info, withdraw/deposit info and requesting and account settings
            </summary>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.SpotApiV2.ICoinExRestClientSpotApiAccount.GetTradingFeesAsync(System.String,CoinEx.Net.Enums.AccountType,System.Threading.CancellationToken)">
            <summary>
            Get trading fees
            <para><a href="https://docs.coinex.com/api/v2/account/fees/http/get-account-trade-fees" /></para>
            </summary>
            <param name="symbol">Symbol name</param>
            <param name="accountType">Account type</param>
            <param name="ct">Cancelation token</param>
            <returns></returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.SpotApiV2.ICoinExRestClientSpotApiAccount.SetAccountConfigAsync(System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Update account settings
            <para><a href="https://docs.coinex.com/api/v2/account/settings/http/modify-account-settings" /></para>
            </summary>
            <param name="cetDiscountEnabled">Global switch for CET Deduction</param>
            <param name="ct">Cancelation token</param>
            <returns></returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.SpotApiV2.ICoinExRestClientSpotApiAccount.GetBalancesAsync(System.Threading.CancellationToken)">
            <summary>
            Get balances
            <para><a href="https://docs.coinex.com/api/v2/assets/balance/http/get-spot-balance" /></para>
            </summary>
            <param name="ct">Cancelation token</param>
            <returns></returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.SpotApiV2.ICoinExRestClientSpotApiAccount.GetMarginBalancesAsync(System.Threading.CancellationToken)">
            <summary>
            Get margin balances
            <para><a href="https://docs.coinex.com/api/v2/assets/balance/http/get-marigin-balance" /></para>
            </summary>
            <param name="ct">Cancelation token</param>
            <returns></returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.SpotApiV2.ICoinExRestClientSpotApiAccount.GetFinancialBalancesAsync(System.Threading.CancellationToken)">
            <summary>
            Get balances in the financial account
            <para><a href="https://docs.coinex.com/api/v2/assets/balance/http/get-financial-balance" /></para>
            </summary>
            <param name="ct">Cancelation token</param>
            <returns></returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.SpotApiV2.ICoinExRestClientSpotApiAccount.GetCreditAccountAsync(System.Threading.CancellationToken)">
            <summary>
            Get credit account info
            <para><a href="https://docs.coinex.com/api/v2/assets/balance/http/get-credit-info" /></para>
            </summary>
            <param name="ct">Cancelation token</param>
            <returns></returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.SpotApiV2.ICoinExRestClientSpotApiAccount.GetAutoMarketMakerAccountLiquidityAsync(System.Threading.CancellationToken)">
            <summary>
            Get automated market maker account liquidity
            <para><a href="https://docs.coinex.com/api/v2/assets/balance/http/get-amm-liquidity" /></para>
            </summary>
            <param name="ct">Cancelation token</param>
            <returns></returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.SpotApiV2.ICoinExRestClientSpotApiAccount.MarginBorrowAsync(System.String,System.String,System.Decimal,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Apply for margin borrowing
            <para><a href="https://docs.coinex.com/api/v2/assets/loan-flat/http/margin-borrow" /></para>
            </summary>
            <param name="symbol">Symbol</param>
            <param name="asset">Asset</param>
            <param name="quantity">Quantity to borrow</param>
            <param name="autoRenew">Whether to renew automatically. Automatic renewal means that after the loan expires, the system will renew the loan based on the latest borrowing interest rate and cycle.</param>
            <param name="ct">Cancelation token</param>
            <returns></returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.SpotApiV2.ICoinExRestClientSpotApiAccount.MarginRepayAsync(System.String,System.String,System.Decimal,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Repay a margin loan
            <para><a href="https://docs.coinex.com/api/v2/assets/loan-flat/http/margin-repay" /></para>
            </summary>
            <param name="symbol">Symbol</param>
            <param name="asset">Asset</param>
            <param name="quantity">Quantity to repay</param>
            <param name="borrowId">Loan record ID</param>
            <param name="ct">Cancelation token</param>
            <returns></returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.SpotApiV2.ICoinExRestClientSpotApiAccount.GetBorrowHistoryAsync(System.String,System.Nullable{CoinEx.Net.Enums.BorrowStatus},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get borrow history
            <para><a href="https://docs.coinex.com/api/v2/assets/loan-flat/http/list-margin-borrow-history" /></para>
            </summary>
            <param name="symbol">Filter by symbol</param>
            <param name="status">Filter by status</param>
            <param name="page">Page number</param>
            <param name="pageSize">Page size</param>
            <param name="ct">Cancelation token</param>
            <returns></returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.SpotApiV2.ICoinExRestClientSpotApiAccount.GetBorrowLimitAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Get borrow limits
            <para><a href="https://docs.coinex.com/api/v2/assets/loan-flat/http/list-margin-interest-limit" /></para>
            </summary>
            <param name="symbol">Symbol</param>
            <param name="asset">Asset</param>
            <param name="ct">Cancelation token</param>
            <returns></returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.SpotApiV2.ICoinExRestClientSpotApiAccount.GetDepositAddressAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Get the deposit address for an asset
            <para><a href="https://docs.coinex.com/api/v2/assets/deposit-withdrawal/http/get-deposit-address" /></para>
            </summary>
            <param name="asset">The asset to deposit</param>
            <param name="network">Network</param>
            <param name="ct">Cancelation token</param>
            <returns></returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.SpotApiV2.ICoinExRestClientSpotApiAccount.RenewDepositAddressAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Renew deposit address
            <para><a href="https://docs.coinex.com/api/v2/assets/deposit-withdrawal/http/update-deposit-address" /></para>
            </summary>
            <param name="asset">The asset</param>
            <param name="network">Network</param>
            <param name="ct">Cancelation token</param>
            <returns></returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.SpotApiV2.ICoinExRestClientSpotApiAccount.GetDepositHistoryAsync(System.String,System.String,System.Nullable{CoinEx.Net.Enums.DepositStatus},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get deposit history
            <para><a href="https://docs.coinex.com/api/v2/assets/deposit-withdrawal/http/list-deposit-history" /></para>
            </summary>
            <param name="asset">Asset</param>
            <param name="transactionId">Filter by transaction id</param>
            <param name="status">Filter by status</param>
            <param name="page">Page number</param>
            <param name="pageSize">Page size</param>
            <param name="ct">Cancelation token</param>
            <returns></returns>
        </member>
        <member name="T:CoinEx.Net.Interfaces.Clients.SpotApiV2.ICoinExRestClientSpotApiExchangeData">
            <summary>
            CoinEx exchange data endpoints. Exchange data includes market data (tickers, order books, etc) and system status.
            </summary>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.SpotApiV2.ICoinExRestClientSpotApiExchangeData.GetSymbolsAsync(System.Threading.CancellationToken)">
            <summary>
            Get symbol information
            <para><a href="https://docs.coinex.com/api/v2/spot/market/http/list-market" /></para>
            </summary>
            <param name="ct">Cancelation Token</param>
            <returns></returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.SpotApiV2.ICoinExRestClientSpotApiExchangeData.GetTickersAsync(System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <summary>
            Get symbol tickers
            <para><a href="https://docs.coinex.com/api/v2/spot/market/http/list-market-ticker" /></para>
            </summary>
            <param name="symbols">Fitler by symbol names</param>
            <param name="ct">Cancelation Token</param>
            <returns></returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.SpotApiV2.ICoinExRestClientSpotApiExchangeData.GetOrderBookAsync(System.String,System.Int32,System.String,System.Threading.CancellationToken)">
            <summary>
            Get the orderbook for a symbol
            <para><a href="https://docs.coinex.com/api/v2/spot/market/http/list-market-depth" /></para>
            </summary>
            <param name="symbol">Symbol</param>
            <param name="limit">Amount of rows, 5, 10, 20 or 50</param>
            <param name="mergeLevel">The merge level, 0.00000000001 up to 1000, 0 for no merging</param>
            <param name="ct">Cancelation Token</param>
            <returns></returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.SpotApiV2.ICoinExRestClientSpotApiExchangeData.GetTradeHistoryAsync(System.String,System.Nullable{System.Int32},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Get the trade history for a symbol
            <para><a href="https://docs.coinex.com/api/v2/spot/market/http/list-market-deals" /></para>
            </summary>
            <param name="symbol">Symbol</param>
            <param name="limit">Max amount of results</param>
            <param name="lastId">The starting point of the query, 0 means to acquire from the latest record</param>
            <param name="ct">Cancelation Token</param>
            <returns></returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.SpotApiV2.ICoinExRestClientSpotApiExchangeData.GetKlinesAsync(System.String,CoinEx.Net.Enums.KlineInterval,System.Nullable{System.Int32},System.Nullable{CoinEx.Net.Enums.PriceType},System.Threading.CancellationToken)">
            <summary>
            Get klines/candlesticks
            <para><a href="https://docs.coinex.com/api/v2/spot/market/http/list-market-kline" /></para>
            </summary>
            <param name="symbol">Symbol</param>
            <param name="interval">Kline interval</param>
            <param name="limit">Max amount of results</param>
            <param name="priceType">Price type, either LastPrice(default) or IndexPrice</param>
            <param name="ct">Cancelation Token</param>
            <returns></returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.SpotApiV2.ICoinExRestClientSpotApiExchangeData.GetIndexPricesAsync(System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <summary>
            Get index prices
            <para><a href="https://docs.coinex.com/api/v2/spot/market/http/list-market-index" /></para>
            </summary>
            <param name="symbols">Filter by symbols</param>
            <param name="ct">Cancelation Token</param>
            <returns></returns>
        </member>
        <member name="T:CoinEx.Net.Interfaces.Clients.SpotApiV2.ICoinExRestClientSpotApiTrading">
            <summary>
            CoinEx trading endpoints, placing and mananging orders.
            </summary>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.SpotApiV2.ICoinExRestClientSpotApiTrading.PlaceOrderAsync(System.String,CoinEx.Net.Enums.AccountType,CoinEx.Net.Enums.OrderSide,CoinEx.Net.Enums.OrderTypeV2,System.Decimal,System.Nullable{System.Decimal},System.String,System.String,System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            Place a new order
            <para><a href="https://docs.coinex.com/api/v2/spot/order/http/put-order" /></para>
            </summary>
            <param name="symbol">The symbol</param>
            <param name="accountType">Account type, Spot or Margin</param>
            <param name="side">Order side</param>
            <param name="type">Order type</param>
            <param name="quantity">Quantity</param>
            <param name="price">Price of the order</param>
            <param name="quantityAsset">The asset the quantity is in, for market orders van be the base or quote asset</param>
            <param name="clientOrderId">Client order id</param>
            <param name="hide">Hide the order</param>
            <param name="ct">Cancelation Token</param>
            <returns></returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.SpotApiV2.ICoinExRestClientSpotApiTrading.PlaceStopOrderAsync(System.String,CoinEx.Net.Enums.AccountType,CoinEx.Net.Enums.OrderSide,CoinEx.Net.Enums.OrderTypeV2,System.Decimal,System.Decimal,System.Nullable{System.Decimal},System.String,System.String,System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            Place a new stop order
            <para><a href="https://docs.coinex.com/api/v2/spot/order/http/put-stop-order" /></para>
            </summary>
            <param name="symbol">The symbol</param>
            <param name="accountType">Account type, Spot or Margin</param>
            <param name="side">Order side</param>
            <param name="type">Order type</param>
            <param name="quantity">Quantity</param>
            <param name="price">Price of the order</param>
            <param name="quantityAsset">The asset the quantity is in, for market orders van be the base or quote asset</param>
            <param name="clientOrderId">Client order id</param>
            <param name="triggerPrice">Price to trigger on</param>
            <param name="hide">Hide the order</param>
            <param name="ct">Cancelation Token</param>
            <returns></returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.SpotApiV2.ICoinExRestClientSpotApiTrading.GetOrderAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Get an order by id
            <para><a href="https://docs.coinex.com/api/v2/spot/order/http/get-order-status" /></para>
            </summary>
            <param name="symbol">Symbol</param>
            <param name="orderId">Order id</param>
            <param name="ct">Cancelation Token</param>
            <returns></returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.SpotApiV2.ICoinExRestClientSpotApiTrading.GetOpenOrdersAsync(CoinEx.Net.Enums.AccountType,System.String,System.Nullable{CoinEx.Net.Enums.OrderSide},System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get a list of open orders
            <para><a href="https://docs.coinex.com/api/v2/spot/order/http/list-pending-order" /></para>
            </summary>
            <param name="symbol">Filter by symbol</param>
            <param name="accountType">Account type</param>
            <param name="side">Filter by side</param>
            <param name="clientOrderId">Filter by client order id</param>
            <param name="page">Page number</param>
            <param name="pageSize">Page size</param>
            <param name="ct">Cancelation Token</param>
            <returns></returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.SpotApiV2.ICoinExRestClientSpotApiTrading.GetClosedOrdersAsync(CoinEx.Net.Enums.AccountType,System.String,System.Nullable{CoinEx.Net.Enums.OrderSide},System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get a list of closed orders. Note that orders canceled without having any trades will not be returned
            <para><a href="https://docs.coinex.com/api/v2/spot/order/http/list-finished-order" /></para>
            </summary>
            <param name="symbol">Filter by symbol</param>
            <param name="accountType">Account type</param>
            <param name="side">Filter by side</param>
            <param name="clientOrderId">Filter by client order id</param>
            <param name="page">Page number</param>
            <param name="pageSize">Page size</param>
            <param name="ct">Cancelation Token</param>
            <returns></returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.SpotApiV2.ICoinExRestClientSpotApiTrading.GetOpenStopOrdersAsync(CoinEx.Net.Enums.AccountType,System.String,System.Nullable{CoinEx.Net.Enums.OrderSide},System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get a list of open stop orders
            <para><a href="https://docs.coinex.com/api/v2/spot/order/http/list-pending-stop-order" /></para>
            </summary>
            <param name="symbol">Filter by symbol</param>
            <param name="accountType">Account type</param>
            <param name="side">Filter by side</param>
            <param name="clientOrderId">Filter by client order id</param>
            <param name="page">Page number</param>
            <param name="pageSize">Page size</param>
            <param name="ct">Cancelation Token</param>
            <returns></returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.SpotApiV2.ICoinExRestClientSpotApiTrading.GetClosedStopOrdersAsync(CoinEx.Net.Enums.AccountType,System.String,System.Nullable{CoinEx.Net.Enums.OrderSide},System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get a list of closed stop orders. Note that orders canceled without having any trades will not be returned
            <para><a href="https://docs.coinex.com/api/v2/spot/order/http/list-finished-stop-order" /></para>
            </summary>
            <param name="symbol">Filter by symbol</param>
            <param name="accountType">Account type</param>
            <param name="side">Filter by side</param>
            <param name="clientOrderId">Filter by client order id</param>
            <param name="page">Page number</param>
            <param name="pageSize">Page size</param>
            <param name="ct">Cancelation Token</param>
            <returns></returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.SpotApiV2.ICoinExRestClientSpotApiTrading.EditOrderAsync(System.String,CoinEx.Net.Enums.AccountType,System.String,System.Decimal,System.Nullable{System.Decimal},System.Threading.CancellationToken)">
            <summary>
            Edit an active order
            <para><a href="https://docs.coinex.com/api/v2/spot/order/http/edit-order" /></para>
            </summary>
            <param name="symbol">Symbol</param>
            <param name="accountType">Account type</param>
            <param name="orderId">Order id</param>
            <param name="quantity">New quantity</param>
            <param name="price">New price</param>
            <param name="ct">Cancelation Token</param>
            <returns></returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.SpotApiV2.ICoinExRestClientSpotApiTrading.EditStopOrderAsync(System.String,CoinEx.Net.Enums.AccountType,System.String,System.Decimal,System.Decimal,System.Nullable{System.Decimal},System.Threading.CancellationToken)">
            <summary>
            Edit an active stop order
            <para><a href="https://docs.coinex.com/api/v2/spot/order/http/edit-stop-order" /></para>
            </summary>
            <param name="symbol">Symbol</param>
            <param name="accountType">Account type</param>
            <param name="stopOrderId">Order id</param>
            <param name="quantity">New quantity</param>
            <param name="price">New price</param>
            <param name="triggerPrice">New trigger price</param>
            <param name="ct">Cancelation Token</param>
            <returns></returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.SpotApiV2.ICoinExRestClientSpotApiTrading.CancelAllOrdersAsync(System.String,CoinEx.Net.Enums.AccountType,System.Nullable{CoinEx.Net.Enums.OrderSide},System.Threading.CancellationToken)">
            <summary>
            Cancel all orders for a symbol
            <para><a href="https://docs.coinex.com/api/v2/spot/order/http/cancel-all-order" /></para>
            </summary>
            <param name="symbol">Symbol</param>
            <param name="accountType">Account type</param>
            <param name="side">Only cancel a specific order side</param>
            <param name="ct">Cancelation Token</param>
            <returns></returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.SpotApiV2.ICoinExRestClientSpotApiTrading.CancelOrderAsync(System.String,CoinEx.Net.Enums.AccountType,System.String,System.Threading.CancellationToken)">
            <summary>
            Cancel an active order
            <para><a href="https://docs.coinex.com/api/v2/spot/order/http/cancel-order" /></para>
            </summary>
            <param name="symbol">Symbol</param>
            <param name="accountType">Account type</param>
            <param name="orderId">Id of order to cancel</param>
            <param name="ct">Cancelation Token</param>
            <returns></returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.SpotApiV2.ICoinExRestClientSpotApiTrading.CancelStopOrderAsync(System.String,CoinEx.Net.Enums.AccountType,System.String,System.Threading.CancellationToken)">
            <summary>
            Cancel an active stop order
            <para><a href="https://docs.coinex.com/api/v2/spot/order/http/cancel-stop-order" /></para>
            </summary>
            <param name="symbol">Symbol</param>
            <param name="accountType">Account type</param>
            <param name="stopOrderId">Id of stop order to cancel</param>
            <param name="ct">Cancelation Token</param>
            <returns></returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.SpotApiV2.ICoinExRestClientSpotApiTrading.CancelOrderByClientOrderIdAsync(System.String,CoinEx.Net.Enums.AccountType,System.String,System.Threading.CancellationToken)">
            <summary>
            Cancel an active order by its client order id
            <para><a href="https://docs.coinex.com/api/v2/spot/order/http/cancel-order-by-client-id" /></para>
            </summary>
            <param name="symbol">Symbol</param>
            <param name="accountType">Account type</param>
            <param name="clientOrderId">Client order id of order to cancel</param>
            <param name="ct">Cancelation Token</param>
            <returns></returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.SpotApiV2.ICoinExRestClientSpotApiTrading.CancelStopOrderByClientOrderIdAsync(System.String,CoinEx.Net.Enums.AccountType,System.String,System.Threading.CancellationToken)">
            <summary>
            Cancel an active stop order by its client order id
            <para><a href="https://docs.coinex.com/api/v2/spot/order/http/cancel-stop-order-by-client-id" /></para>
            </summary>
            <param name="symbol">Symbol</param>
            <param name="accountType">Account type</param>
            <param name="clientStopOrderId">Client order id of stop order to cancel</param>
            <param name="ct">Cancelation Token</param>
            <returns></returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.SpotApiV2.ICoinExRestClientSpotApiTrading.GetUserTradesAsync(System.String,CoinEx.Net.Enums.AccountType,System.Nullable{CoinEx.Net.Enums.OrderSide},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get trade list
            <para><a href="https://docs.coinex.com/api/v2/spot/deal/http/list-user-deals" /></para>
            </summary>
            <param name="symbol">Symbol</param>
            <param name="accountType">Account type</param>
            <param name="side">Filter by side</param>
            <param name="startTime">Filter by start time</param>
            <param name="endTime">Filter by end time</param>
            <param name="page">Page number</param>
            <param name="pageSize">Page size</param>
            <param name="ct">Cancelation Token</param>
            <returns></returns>
        </member>
        <member name="T:CoinEx.Net.Interfaces.Clients.SpotApiV2.ICoinExSocketClientSpotApi">
            <summary>
            Spot streams
            </summary>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.SpotApiV2.ICoinExSocketClientSpotApi.SubscribeToTickerUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{System.Collections.Generic.IEnumerable{CoinEx.Net.Objects.Models.V2.CoinExTicker}}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to symbol ticker updates for the specified symbols. Note that only one ticker subscription can be active at the same time; new ticker subscription will override the old subscriptions.
            <para><a href="https://docs.coinex.com/api/v2/spot/market/ws/market" /></para>
            </summary>
            <param name="symbols">The symbols to subscribe</param>
            <param name="onMessage">Data handler</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.SpotApiV2.ICoinExSocketClientSpotApi.SubscribeToTickerUpdatesAsync(System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{System.Collections.Generic.IEnumerable{CoinEx.Net.Objects.Models.V2.CoinExTicker}}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to symbol ticker updates for all symbols. Note that only one ticker subscription can be active at the same time; new ticker subscription will override the old subscriptions.
            <para><a href="https://docs.coinex.com/api/v2/spot/market/ws/market" /></para>
            </summary>
            <param name="onMessage">Data handler</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.SpotApiV2.ICoinExSocketClientSpotApi.SubscribeToOrderBookUpdatesAsync(System.String,System.Int32,System.String,System.Boolean,System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{CoinEx.Net.Objects.Models.V2.CoinExOrderBook}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to order book updates
            <para><a href="https://docs.coinex.com/api/v2/spot/market/ws/market-depth" /></para>
            </summary>
            <param name="symbol">Symbol</param>
            <param name="depth">Order book depth, 5, 10, 20 or 50</param>
            <param name="mergeLevel">The merge level, 0.00000000001 up to 1000, 0 for no merging</param>
            <param name="fullBookUpdates">Whether updates should provide full update or only updates</param>
            <param name="onMessage">Data handler</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.SpotApiV2.ICoinExSocketClientSpotApi.SubscribeToOrderBookUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},System.Int32,System.String,System.Boolean,System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{CoinEx.Net.Objects.Models.V2.CoinExOrderBook}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to order book updates
            <para><a href="https://docs.coinex.com/api/v2/spot/market/ws/market-depth" /></para>
            </summary>
            <param name="symbols">Symbols</param>
            <param name="depth">Order book depth, 5, 10, 20 or 50</param>
            <param name="mergeLevel">The merge level, 0.00000000001 up to 1000, 0 for no merging</param>
            <param name="fullBookUpdates">Whether updates should provide full update or only updates</param>
            <param name="onMessage">Data handler</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.SpotApiV2.ICoinExSocketClientSpotApi.SubscribeToTradeUpdatesAsync(System.String,System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{System.Collections.Generic.IEnumerable{CoinEx.Net.Objects.Models.V2.CoinExTrade}}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to live trade updates
            <para><a href="https://docs.coinex.com/api/v2/spot/market/ws/market-deals" /></para>
            </summary>
            <param name="symbol">Symbol</param>
            <param name="onMessage">Data handler</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.SpotApiV2.ICoinExSocketClientSpotApi.SubscribeToTradeUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{System.Collections.Generic.IEnumerable{CoinEx.Net.Objects.Models.V2.CoinExTrade}}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to live trade updates
            <para><a href="https://docs.coinex.com/api/v2/spot/market/ws/market-deals" /></para>
            </summary>
            <param name="symbols">Symbols</param>
            <param name="onMessage">Data handler</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.SpotApiV2.ICoinExSocketClientSpotApi.SubscribeToTradeUpdatesAsync(System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{System.Collections.Generic.IEnumerable{CoinEx.Net.Objects.Models.V2.CoinExTrade}}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to live trade updates
            <para><a href="https://docs.coinex.com/api/v2/spot/market/ws/market-deals" /></para>
            </summary>
            <param name="onMessage">Data handler</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.SpotApiV2.ICoinExSocketClientSpotApi.SubscribeToIndexPriceUpdatesAsync(System.String,System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{CoinEx.Net.Objects.Models.V2.CoinExIndexPriceUpdate}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to index price updates
            <para><a href="https://docs.coinex.com/api/v2/spot/market/ws/market-index" /></para>
            </summary>
            <param name="symbol">Symbol</param>
            <param name="onMessage">Data handler</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.SpotApiV2.ICoinExSocketClientSpotApi.SubscribeToIndexPriceUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{CoinEx.Net.Objects.Models.V2.CoinExIndexPriceUpdate}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to index price updates
            <para><a href="https://docs.coinex.com/api/v2/spot/market/ws/market-index" /></para>
            </summary>
            <param name="symbols">Symbols</param>
            <param name="onMessage">Data handler</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.SpotApiV2.ICoinExSocketClientSpotApi.SubscribeToBookPriceUpdatesAsync(System.String,System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{CoinEx.Net.Objects.Models.V2.CoinExBookPriceUpdate}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to book price updates
            <para><a href="https://docs.coinex.com/api/v2/spot/market/ws/market-bbo" /></para>
            </summary>
            <param name="symbol">Symbol</param>
            <param name="onMessage">Data handler</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.SpotApiV2.ICoinExSocketClientSpotApi.SubscribeToBookPriceUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{CoinEx.Net.Objects.Models.V2.CoinExBookPriceUpdate}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to book price updates
            <para><a href="https://docs.coinex.com/api/v2/spot/market/ws/market-bbo" /></para>
            </summary>
            <param name="symbols">Symbols</param>
            <param name="onMessage">Data handler</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.SpotApiV2.ICoinExSocketClientSpotApi.SubscribeToOrderUpdatesAsync(System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{CoinEx.Net.Objects.Models.V2.CoinExOrderUpdate}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to user order updates
            <para><a href="https://docs.coinex.com/api/v2/spot/order/ws/user-order" /></para>
            </summary>
            <param name="onMessage">Data handler</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.SpotApiV2.ICoinExSocketClientSpotApi.SubscribeToStopOrderUpdatesAsync(System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{CoinEx.Net.Objects.Models.V2.CoinExStopOrderUpdate}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to user stop order updates
            <para><a href="https://docs.coinex.com/api/v2/spot/order/ws/user-stop-order" /></para>
            </summary>
            <param name="onMessage">Data handler</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.SpotApiV2.ICoinExSocketClientSpotApi.SubscribeToUserTradeUpdatesAsync(System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{CoinEx.Net.Objects.Models.V2.CoinExUserTrade}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to user trade updates
            <para><a href="https://docs.coinex.com/api/v2/spot/deal/ws/user-deals" /></para>
            </summary>
            <param name="onMessage">Data handler</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.SpotApiV2.ICoinExSocketClientSpotApi.SubscribeToBalanceUpdatesAsync(System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{System.Collections.Generic.IEnumerable{CoinEx.Net.Objects.Models.V2.CoinExBalanceUpdate}}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to user balance updates
            <para><a href="https://docs.coinex.com/api/v2/assets/balance/ws/spot_balance" /></para>
            </summary>
            <param name="onMessage">Data handler</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="T:CoinEx.Net.Interfaces.ICoinExOrderBookFactory">
            <summary>
            CoinEx order book factory
            </summary>
        </member>
        <member name="M:CoinEx.Net.Interfaces.ICoinExOrderBookFactory.CreateSpot(System.String,System.Action{CoinEx.Net.Objects.Options.CoinExOrderBookOptions})">
            <summary>
            Create a SymbolOrderBook for the Spot API
            </summary>
            <param name="symbol">The symbol</param>
            <param name="options">Order book options</param>
            <returns></returns>
        </member>
        <member name="T:CoinEx.Net.Objects.CoinExApiAddresses">
            <summary>
            Api addresses usable for the CoinEx clients
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.CoinExApiAddresses.RestClientAddress">
            <summary>
            The address used by the CoinExClient for the rest API
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.CoinExApiAddresses.SocketClientAddress">
            <summary>
            The address used by the CoinExSocketClient for the socket API
            </summary>
        </member>
        <member name="F:CoinEx.Net.Objects.CoinExApiAddresses.Default">
            <summary>
            The default addresses to connect to the CoinEx.com API
            </summary>
        </member>
        <member name="M:CoinEx.Net.Objects.Internal.CoinExNonceProvider.GetNonce">
            <inheritdoc />
        </member>
        <member name="T:CoinEx.Net.Objects.Models.CoinExAssetConfig">
            <summary>
            Asset config
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExAssetConfig.Asset">
            <summary>
            Asset
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExAssetConfig.Network">
            <summary>
            Network
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExAssetConfig.CanDeposit">
            <summary>
            Deposit is enabled
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExAssetConfig.CanWithdraw">
            <summary>
            Withdraw is enabled
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExAssetConfig.MinDeposit">
            <summary>
            Minimal deposit quantity
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExAssetConfig.MinWithdraw">
            <summary>
            Minimal withdrawal quantity
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExAssetConfig.WithdrawFee">
            <summary>
            Withdraw fee
            </summary>
        </member>
        <member name="T:CoinEx.Net.Objects.Models.CoinExBalance">
            <summary>
            Balance info
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExBalance.Asset">
            <summary>
            The asset
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExBalance.Available">
            <summary>
            The quantity of the asset that is available
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExBalance.Frozen">
            <summary>
            The quantity of the asset not currently available
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExBalance.Timestamp">
            <summary>
            Data timestamp
            </summary>
        </member>
        <member name="T:CoinEx.Net.Objects.Models.CoinExDeposit">
            <summary>
            Deposit info
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExDeposit.ActualQuantity">
            <summary>
            The actual quantity of the deposit
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExDeposit.ActualQuantityDisplay">
            <summary>
            The display for the deposit
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExDeposit.AddExplorer">
            <summary>
            Depositor
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExDeposit.Quantity">
            <summary>
            The total quantity of the deposit
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExDeposit.QuantityDisplay">
            <summary>
            The display for the quantity
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExDeposit.Address">
            <summary>
            Deposit add displayed
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExDeposit.AddressDisplay">
            <summary>
            Deposit add displayed
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExDeposit.Id">
            <summary>
            Deposit ID
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExDeposit.CoinType">
            <summary>
            Deposit ID
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExDeposit.Confirmations">
            <summary>
            Deposit ID
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExDeposit.CreateTime">
            <summary>
            Deposit ID
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExDeposit.Explorer">
            <summary>
            Explorer
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExDeposit.Remark">
            <summary>
            Remarks
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExDeposit.Status">
            <summary>
            Status
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExDeposit.StatusDisplay">
            <summary>
            Status Displayed
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExDeposit.TransferMethod">
            <summary>
            transfer method
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExDeposit.TransactionId">
            <summary>
            The transaction id of the withdrawal
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExDeposit.TransactionIdDisplay">
            <summary>
            The transaction id of the withdrawal
            </summary>
        </member>
        <member name="T:CoinEx.Net.Objects.Models.CoinExDepositAddress">
            <summary>
            Deposit address
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExDepositAddress.Address">
            <summary>
            The address
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExDepositAddress.CreateTime">
            <summary>
            Time the address was created
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExDepositAddress.Id">
            <summary>
            Deposit address id
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExDepositAddress.IsBitcoinCash">
            <summary>
            Is bitcoin cash
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExDepositAddress.Status">
            <summary>
            Status
            </summary>
        </member>
        <member name="T:CoinEx.Net.Objects.Models.CoinExKline">
            <summary>
            Kline data
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExKline.OpenTime">
            <summary>
            The open time of this kline
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExKline.OpenPrice">
            <summary>
            The price of the symbol when this kline started
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExKline.ClosePrice">
            <summary>
            The price of the symbol when this kline ended
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExKline.HighPrice">
            <summary>
            The highest price of the symbol during this kline
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExKline.LowPrice">
            <summary>
            The lowest price of the symbol during this kline
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExKline.Volume">
            <summary>
            The volume of the quote asset. i.e. for symbol ETHBTC this is the volume in ETH
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExKline.QuoteVolume">
            <summary>
            The volume of the base asset. i.e. for symbol ETHBTC this is the volume in BTC
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExKline.Symbol">
            <summary>
            The symbol for this kline
            </summary>
        </member>
        <member name="T:CoinEx.Net.Objects.Models.CoinExMiningDifficulty">
            <summary>
            Mining difficulty info
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExMiningDifficulty.Difficulty">
            <summary>
            The difficulty in CET/Hour
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExMiningDifficulty.Prediction">
            <summary>
            Estimated hourly mining yield to distribute
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExMiningDifficulty.UpdateTime">
            <summary>
            The update time of the Prediction field
            </summary>
        </member>
        <member name="T:CoinEx.Net.Objects.Models.CoinExOrder">
            <summary>
            Order info
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExOrder.Quantity">
            <summary>
            The quantity of the order
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExOrder.Fee">
            <summary>
            The fee of the order
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExOrder.QuoteFee">
            <summary>
            The fee of the order in quote
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExOrder.FeeAsset">
            <summary>
            The asset of the fee
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExOrder.FeeDiscount">
            <summary>
            The fee discount
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExOrder.AveragePrice">
            <summary>
            Average price of the executed order for market orders
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExOrder.CreateTime">
            <summary>
            The time the order was created
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExOrder.CloseTime">
            <summary>
            The time the order was finished
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExOrder.QuantityFilled">
            <summary>
            The executed quantity
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExOrder.OrderFee">
            <summary>
            The fee of the executed quantity
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExOrder.QuoteQuantityFilled">
            <summary>
            The value of the executed quantity
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExOrder.Id">
            <summary>
            The id of the order
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExOrder.QuantityRemaining">
            <summary>
            The quantity still left to execute
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExOrder.MakerFeeRate">
            <summary>
            The maker fee rate
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExOrder.Symbol">
            <summary>
            The symbol of the order
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExOrder.OrderType">
            <summary>
            The type of the order
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExOrder.Price">
            <summary>
            The price per unit of the order
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExOrder.SourceId">
            <summary>
            The source id optionally specified by the client
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExOrder.ClientOrderId">
            <summary>
            The client id optionally specified by the client
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExOrder.Status">
            <summary>
            The status of the order
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExOrder.TakerFeeRate">
            <summary>
            The taker fee rate
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExOrder.StopPrice">
            <summary>
            The stop price
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExOrder.Side">
            <summary>
            The transaction type of the order
            </summary>
        </member>
        <member name="T:CoinEx.Net.Objects.Models.CoinExOrderBook">
            <summary>
            Order book
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExOrderBook.LastPrice">
            <summary>
            The price of the last transaction
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExOrderBook.Timestamp">
            <summary>
            Timestamp
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExOrderBook.Asks">
            <summary>
            The asks on this symbol
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExOrderBook.Bids">
            <summary>
            The bids on this symbol
            </summary>
        </member>
        <member name="T:CoinEx.Net.Objects.Models.CoinExDepthEntry">
            <summary>
            Depth info
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExDepthEntry.Price">
            <summary>
            The price per unit of the entry
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExDepthEntry.Quantity">
            <summary>
            The quantity of the entry
            </summary>
        </member>
        <member name="T:CoinEx.Net.Objects.Models.CoinExOrderTrade">
            <summary>
            Order transaction info
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExOrderTrade.Quantity">
            <summary>
            The quantity of the transaction
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExOrderTrade.Timestamp">
            <summary>
            The time the transaction was created
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExOrderTrade.QuoteQuantity">
            <summary>
            The value of the transaction
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExOrderTrade.Fee">
            <summary>
            The fee of the transactions
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExOrderTrade.FeeAsset">
            <summary>
            The asset of the fee
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExOrderTrade.Id">
            <summary>
            The id of the transaction
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExOrderTrade.OrderId">
            <summary>
            The id of the order
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExOrderTrade.Price">
            <summary>
            The price per unit of the transaction
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExOrderTrade.Role">
            <summary>
            The role of the transaction, maker or taker
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExOrderTrade.Side">
            <summary>
            Order side
            </summary>
        </member>
        <member name="T:CoinEx.Net.Objects.Models.CoinExOrderTradeExtended">
            <summary>
            Order transaction info
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExOrderTradeExtended.Symbol">
            <summary>
            The symbol of the transaction
            </summary>
        </member>
        <member name="T:CoinEx.Net.Objects.Models.CoinExPagedResult`1">
            <summary>
            Paged result
            </summary>
            <typeparam name="T">Type of data</typeparam>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExPagedResult`1.Count">
            <summary>
            The total number of results
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExPagedResult`1.CurrentPage">
            <summary>
            The page currently returned
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExPagedResult`1.Data">
            <summary>
            The results
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExPagedResult`1.HasNext">
            <summary>
            Whether there is a next page
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExPagedResult`1.TotalItems">
            <summary>
            Total items
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExPagedResult`1.TotalPages">
            <summary>
            Total pages
            </summary>
        </member>
        <member name="T:CoinEx.Net.Objects.Models.CoinExSymbol">
            <summary>
            Symbol Info
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExSymbol.Name">
            <summary>
            The name of the symbol
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExSymbol.MinQuantity">
            <summary>
            The minimum quantity that can be traded
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExSymbol.MakerFeeRate">
            <summary>
            The fee for the maker
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExSymbol.TakerFeeRate">
            <summary>
            The fee for the taker
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExSymbol.PricingName">
            <summary>
            The asset being that is being traded against
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExSymbol.PricingDecimal">
            <summary>
            The number of decimals for the price
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExSymbol.TradingName">
            <summary>
            The asset being traded
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExSymbol.TradingDecimal">
            <summary>
            The number of decimals for the price
            </summary>
        </member>
        <member name="T:CoinEx.Net.Objects.Models.CoinExSymbolState">
            <summary>
            Symbol state info
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExSymbolState.Timestamp">
            <summary>
            The timestamp of the data
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExSymbolState.Ticker">
            <summary>
            The symbol state data
            </summary>
        </member>
        <member name="T:CoinEx.Net.Objects.Models.CoinExSymbolStatesList">
            <summary>
            Symbol state list
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExSymbolStatesList.Timestamp">
            <summary>
            The timestamp of the data
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExSymbolStatesList.Tickers">
            <summary>
            The data specified as symbol -> symbol state data
            </summary>
        </member>
        <member name="T:CoinEx.Net.Objects.Models.CoinExSymbolStateData">
            <summary>
            Symbol state data
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExSymbolStateData.Symbol">
            <summary>
            Symbol
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExSymbolStateData.BestAskPrice">
            <summary>
            The best buy price available on the symbol
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExSymbolStateData.BestAskQuantity">
            <summary>
            The quantity of the best buy price
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExSymbolStateData.BestBidPrice">
            <summary>
            The best sell price available on the symbol
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExSymbolStateData.BestBidQuantity">
            <summary>
            The quantity of the best sell price
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExSymbolStateData.OpenPrice">
            <summary>
            The open price based on a 24H ticker
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExSymbolStateData.HighPrice">
            <summary>
            The high price based on a 24H ticker
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExSymbolStateData.LowPrice">
            <summary>
            The low price based on a 24H ticker
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExSymbolStateData.LastPrice">
            <summary>
            The price of the last trade
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExSymbolStateData.Volume">
            <summary>
            The volume of the quote asset. i.e. for symbol ETHBTC this is the volume in ETH
            </summary>
        </member>
        <member name="T:CoinEx.Net.Objects.Models.CoinExSymbolTrade">
            <summary>
            Symbol trade info
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExSymbolTrade.Quantity">
            <summary>
            The quantity of the transaction
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExSymbolTrade.Timestamp">
            <summary>
            The timestamp of the transaction
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExSymbolTrade.Id">
            <summary>
            The id of the transaction
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExSymbolTrade.Price">
            <summary>
            The price per unit of the transaction
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExSymbolTrade.Side">
            <summary>
            Order side
            </summary>
        </member>
        <member name="T:CoinEx.Net.Objects.Models.CoinExWithdrawal">
            <summary>
            Withdrawal info
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExWithdrawal.ActualQuantity">
            <summary>
            The actual quantity of the withdrawal, i.e. the quantity which will be transferred to the destination address
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExWithdrawal.Quantity">
            <summary>
            The total quantity of the withdrawal
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExWithdrawal.Address">
            <summary>
            The destination address of the withdrawal
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExWithdrawal.CoinType">
            <summary>
            The name of the asset of the withdrawal
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExWithdrawal.Id">
            <summary>
            The id of this withdrawal
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExWithdrawal.Confirmations">
            <summary>
            The current number of confirmations
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExWithdrawal.CreateTime">
            <summary>
            The time the withdrawal was created
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExWithdrawal.Status">
            <summary>
            The status of the withdrawal
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExWithdrawal.TransactionFee">
            <summary>
            The fee for the withdrawal
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExWithdrawal.TransactionId">
            <summary>
            The transaction id of the withdrawal
            </summary>
        </member>
        <member name="T:CoinEx.Net.Objects.Models.Socket.CoinExSocketOrder">
            <summary>
            Order info
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.Socket.CoinExSocketOrder.Quantity">
            <summary>
            The total quantity of the oder
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.Socket.CoinExSocketOrder.CreateTime">
            <summary>
            The time the order was created
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.Socket.CoinExSocketOrder.Fee">
            <summary>
            The fee of the order
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.Socket.CoinExSocketOrder.FeeDiscount">
            <summary>
            The fee discount
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.Socket.CoinExSocketOrder.FeeAsset">
            <summary>
            The asset the fee is on
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.Socket.CoinExSocketOrder.TransactionFee">
            <summary>
            The executed quantity transaction fee
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.Socket.CoinExSocketOrder.QuoteQuantityFilled">
            <summary>
            The executed value in this update
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.Socket.CoinExSocketOrder.QuantityFilled">
            <summary>
            The executed quantity in this update
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.Socket.CoinExSocketOrder.Id">
            <summary>
            The order id
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.Socket.CoinExSocketOrder.QuantityRemaining">
            <summary>
            Quantity of order left to execute
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.Socket.CoinExSocketOrder.MakerFee">
            <summary>
            Maker fee
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.Socket.CoinExSocketOrder.UpdateTime">
            <summary>
            The last update time
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.Socket.CoinExSocketOrder.Price">
            <summary>
            The price per unit of the order
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.Socket.CoinExSocketOrder.Side">
            <summary>
            The order side
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.Socket.CoinExSocketOrder.Source">
            <summary>
            The source of the order
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.Socket.CoinExSocketOrder.TakerFee">
            <summary>
            Taker fee
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.Socket.CoinExSocketOrder.Type">
            <summary>
            The type of the order
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.Socket.CoinExSocketOrder.UserId">
            <summary>
            The id of the user that placed the order
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.Socket.CoinExSocketOrder.Symbol">
            <summary>
            The symbol of the order
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.Socket.CoinExSocketOrder.ClientOrderId">
            <summary>
            The client id
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.Socket.CoinExSocketOrder.LastTradeQuantity">
            <summary>
            Quantity of the last trade filled for this order
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.Socket.CoinExSocketOrder.LastTradePrice">
            <summary>
            Price of the last trade filled for this order
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.Socket.CoinExSocketOrder.LastTradeTime">
            <summary>
            Timestamp of the last trade filled for this order
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.Socket.CoinExSocketOrder.LastTradeId">
            <summary>
            Id of the last trade filled for this order
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.Socket.CoinExSocketOrder.LastTradeRole">
            <summary>
            Role of the last trade filled for this order
            </summary>
        </member>
        <member name="T:CoinEx.Net.Objects.Models.Socket.CoinExSocketOrderBook">
            <summary>
            Order book
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.Socket.CoinExSocketOrderBook.LastPrice">
            <summary>
            The price of the last trade. Only filled on a full update.
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.Socket.CoinExSocketOrderBook.Timestamp">
            <summary>
            The timestamp of the data. Only filled on a full update.
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.Socket.CoinExSocketOrderBook.Asks">
            <summary>
            The asks on the symbol
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.Socket.CoinExSocketOrderBook.Bids">
            <summary>
            The bids on the symbol
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.Socket.CoinExSocketOrderBook.Checksum">
            <summary>
            Signed integer (32 bit) of full depth data checksum
            </summary>
        </member>
        <member name="T:CoinEx.Net.Objects.Models.Socket.CoinExSocketOrderUpdate">
            <summary>
            Order update
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.Socket.CoinExSocketOrderUpdate.UpdateType">
            <summary>
            The type of update
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.Socket.CoinExSocketOrderUpdate.Order">
            <summary>
            The order info
            </summary>
        </member>
        <member name="T:CoinEx.Net.Objects.Models.Socket.CoinExSocketPagedResult`1">
            <summary>
            Paged result
            </summary>
            <typeparam name="T">Type of data</typeparam>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.Socket.CoinExSocketPagedResult`1.Limit">
            <summary>
            The number of results
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.Socket.CoinExSocketPagedResult`1.Offset">
            <summary>
            The offset in the list
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.Socket.CoinExSocketPagedResult`1.Total">
            <summary>
            The total number of results
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.Socket.CoinExSocketPagedResult`1.Data">
            <summary>
            The data
            </summary>
        </member>
        <member name="T:CoinEx.Net.Objects.Models.Socket.CoinExSocketSymbolState">
            <summary>
            Symbol state info
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.Socket.CoinExSocketSymbolState.Close">
            <summary>
            The close price of the period
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.Socket.CoinExSocketSymbolState.QuoteVolume">
            <summary>
            The volume of the quote asset. i.e. for symbol ETHBTC this is the volume in BTC
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.Socket.CoinExSocketSymbolState.HighPrice">
            <summary>
            The highest symbol price in the period
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.Socket.CoinExSocketSymbolState.LastPrice">
            <summary>
            The last symbol trade in the period
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.Socket.CoinExSocketSymbolState.LowPrice">
            <summary>
            The lowest symbol price in the period
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.Socket.CoinExSocketSymbolState.OpenPrice">
            <summary>
            The open price of the period
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.Socket.CoinExSocketSymbolState.Period">
            <summary>
            The period the data is over in seconds
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.Socket.CoinExSocketSymbolState.Volume">
            <summary>
            The volume of the base asset. i.e. for symbol ETHBTC this is the volume in ETH
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.Socket.CoinExSocketSymbolState.Symbol">
            <summary>
            Symbol
            </summary>
        </member>
        <member name="T:CoinEx.Net.Objects.Models.Socket.CoinExSocketSymbolTrade">
            <summary>
            Transaction data
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.Socket.CoinExSocketSymbolTrade.Side">
            <summary>
            The orde side
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.Socket.CoinExSocketSymbolTrade.Timestamp">
            <summary>
            The timestamp of the transaction
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.Socket.CoinExSocketSymbolTrade.Price">
            <summary>
            The price per unit of the transaction
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.Socket.CoinExSocketSymbolTrade.OrderId">
            <summary>
            The order id of the transaction
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.Socket.CoinExSocketSymbolTrade.Quantity">
            <summary>
            The quantity of the transaction
            </summary>
        </member>
        <member name="T:CoinEx.Net.Objects.Models.V2.CoinExAmmBalance">
            <summary>
            Automated Market Maker liquidity info
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExAmmBalance.Symbol">
            <summary>
            Symbol
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExAmmBalance.BaseAsset">
            <summary>
            Base asset
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExAmmBalance.QuoteAsset">
            <summary>
            Quote asset
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExAmmBalance.BaseAssetQuantity">
            <summary>
            Base asset amount
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExAmmBalance.QuoteAssetQuantity">
            <summary>
            Quote asset amount
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExAmmBalance.LiquidityProportion">
            <summary>
            Liquidity percentage in AMM account
            </summary>
        </member>
        <member name="T:CoinEx.Net.Objects.Models.V2.CoinExBalance">
            <summary>
            Balance info
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExBalance.Asset">
            <summary>
            Asset name
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExBalance.Available">
            <summary>
            Available amount
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExBalance.Frozen">
            <summary>
            Frozen amount
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExBalance.Total">
            <summary>
            Total amount
            </summary>
        </member>
        <member name="T:CoinEx.Net.Objects.Models.V2.CoinExBalanceUpdate">
            <summary>
            Balance update
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExBalanceUpdate.MarginSymbol">
            <summary>
            Margin symbol
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExBalanceUpdate.Asset">
            <summary>
            Asset name
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExBalanceUpdate.Available">
            <summary>
            Available amount
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExBalanceUpdate.Frozen">
            <summary>
            Frozen amount
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExBalanceUpdate.UpdateTime">
            <summary>
            Update time
            </summary>
        </member>
        <member name="T:CoinEx.Net.Objects.Models.V2.CoinExBookPriceUpdate">
            <summary>
            Best book prices update
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExBookPriceUpdate.Symbol">
            <summary>
            Symbol
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExBookPriceUpdate.UpdateTime">
            <summary>
            Update time
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExBookPriceUpdate.BestBidPrice">
            <summary>
            Current best bid price
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExBookPriceUpdate.BestBidQuantity">
            <summary>
            Current best bid quantity
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExBookPriceUpdate.BestAskPrice">
            <summary>
            Current best ask price
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExBookPriceUpdate.BestAskQuantity">
            <summary>
            Current best ask quantity
            </summary>
        </member>
        <member name="T:CoinEx.Net.Objects.Models.V2.CoinExBorrow">
            <summary>
            Borrow record
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExBorrow.BorrowId">
            <summary>
            Id
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExBorrow.Symbol">
            <summary>
            Symbol
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExBorrow.Asset">
            <summary>
            Asset
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExBorrow.DailyInterestRate">
            <summary>
            Daily interest rate
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExBorrow.ExireTime">
            <summary>
            Expire time
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExBorrow.BorrowQuantity">
            <summary>
            Borrow amount
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExBorrow.ToRepayQuantity">
            <summary>
            Amount to repay
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExBorrow.Status">
            <summary>
            Borrow status
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExBorrow.IsAutoRenew">
            <summary>
            Is auto renewing
            </summary>
        </member>
        <member name="T:CoinEx.Net.Objects.Models.V2.CoinExBorrowLimit">
            <summary>
            Borrow limit info
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExBorrowLimit.Symbol">
            <summary>
            Symbol
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExBorrowLimit.Asset">
            <summary>
            Asset
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExBorrowLimit.DailyInterestRate">
            <summary>
            Daily interest rate
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExBorrowLimit.Leverage">
            <summary>
            Max leverage
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExBorrowLimit.MinBorrowable">
            <summary>
            Min amount borrowable
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExBorrowLimit.MaxBorrowable">
            <summary>
            Max amount borrowable
            </summary>
        </member>
        <member name="T:CoinEx.Net.Objects.Models.V2.CoinExCreditBalance">
            <summary>
            Credit account balance
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExCreditBalance.Equity">
            <summary>
            Account assets
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExCreditBalance.ToBeRepaid">
            <summary>
            To be repaid
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExCreditBalance.RiskRate">
            <summary>
            Current risk rate
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExCreditBalance.WithdrawalRiskRate">
            <summary>
            Withdrawal risk rate
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExCreditBalance.WithdrawalValueAvailable">
            <summary>
            Market value of available withdrawal
            </summary>
        </member>
        <member name="T:CoinEx.Net.Objects.Models.V2.CoinExDeposit">
            <summary>
            Deposit info
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExDeposit.Id">
            <summary>
            Deposit id
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExDeposit.CreateTime">
            <summary>
            Creation time
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExDeposit.TransactionId">
            <summary>
            Transaction id
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExDeposit.Asset">
            <summary>
            Asset
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExDeposit.Network">
            <summary>
            Network
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExDeposit.Quantity">
            <summary>
            Quantity deposited
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExDeposit.QuantityCredited">
            <summary>
            Actual amount received
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExDeposit.DepositAddress">
            <summary>
            Deposit address
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExDeposit.Confirmations">
            <summary>
            Amount of confirmations
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExDeposit.Status">
            <summary>
            Status of the deposit
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExDeposit.TransactionExplorerUrl">
            <summary>
            Blockchain explorer url for the transaction
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExDeposit.DepositAddressExplorerUrl">
            <summary>
            Blockchain explorer url for the deposit address
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExDeposit.Remark">
            <summary>
            Remark
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExDeposit.DepositMethod">
            <summary>
            Deposit method
            </summary>
        </member>
        <member name="T:CoinEx.Net.Objects.Models.V2.CoinExDepositAddress">
            <summary>
            Deposit addres
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExDepositAddress.Memo">
            <summary>
            Memo
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExDepositAddress.Address">
            <summary>
            Deposit address
            </summary>
        </member>
        <member name="T:CoinEx.Net.Objects.Models.V2.CoinExIndexPrice">
            <summary>
            Index price
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExIndexPrice.Symbol">
            <summary>
            Symbol
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExIndexPrice.Timestamp">
            <summary>
            Timestamp
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExIndexPrice.Price">
            <summary>
            Price
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExIndexPrice.Sources">
            <summary>
            Index sources
            </summary>
        </member>
        <member name="T:CoinEx.Net.Objects.Models.V2.CoinExIndexPriceSource">
            <summary>
            Index price source
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExIndexPriceSource.Exchange">
            <summary>
            Exchange
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExIndexPriceSource.Timestamp">
            <summary>
            Timestamp
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExIndexPriceSource.Weight">
            <summary>
            Weight of the source
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExIndexPriceSource.Price">
            <summary>
            Price
            </summary>
        </member>
        <member name="T:CoinEx.Net.Objects.Models.V2.CoinExIndexPriceUpdate">
            <summary>
            Index price update
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExIndexPriceUpdate.Symbol">
            <summary>
            Symbol
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExIndexPriceUpdate.Price">
            <summary>
            Index price
            </summary>
        </member>
        <member name="T:CoinEx.Net.Objects.Models.V2.CoinExKline">
            <summary>
            Kline/candlestick info
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExKline.Symbol">
            <summary>
            Symbol
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExKline.OpenTime">
            <summary>
            Open time
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExKline.OpenPrice">
            <summary>
            Open price
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExKline.ClosePrice">
            <summary>
            Close price
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExKline.HighPrice">
            <summary>
            High price
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExKline.LowPrice">
            <summary>
            Low price
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExKline.Volume">
            <summary>
            Volume
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExKline.Value">
            <summary>
            Value (Quote asset volume)
            </summary>
        </member>
        <member name="T:CoinEx.Net.Objects.Models.V2.CoinExMarginBalance">
            <summary>
            Margin balance info
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExMarginBalance.MarginAccount">
            <summary>
            Margin account
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExMarginBalance.BaseAsset">
            <summary>
            Base asset
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExMarginBalance.QuoteAsset">
            <summary>
            Quote asset
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExMarginBalance.RiskRate">
            <summary>
            Current risk rate
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExMarginBalance.LiquidationPrice">
            <summary>
            Current liquidation price
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExMarginBalance.Available">
            <summary>
            Available
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExMarginBalance.Frozen">
            <summary>
            Frozen
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExMarginBalance.Repaid">
            <summary>
            Repaid
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExMarginBalance.Interest">
            <summary>
            Interest
            </summary>
        </member>
        <member name="T:CoinEx.Net.Objects.Models.V2.CoinExMarginAssetsBalance">
            <summary>
            Assets balance info
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExMarginAssetsBalance.BaseAsset">
            <summary>
            Base asset amount
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExMarginAssetsBalance.QuoteAsset">
            <summary>
            Quote asset amount
            </summary>
        </member>
        <member name="T:CoinEx.Net.Objects.Models.V2.CoinExOrder">
            <summary>
            Order info
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExOrder.OrderId">
            <summary>
            Order id
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExOrder.Symbol">
            <summary>
            Symbol
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExOrder.AccountType">
            <summary>
            Account type
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExOrder.QuantityAsset">
            <summary>
            Asset the quantity is in
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExOrder.Side">
            <summary>
            Order side
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExOrder.Type">
            <summary>
            Order type
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExOrder.Quantity">
            <summary>
            Order quantity
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExOrder.Price">
            <summary>
            Order price
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExOrder.QuantityRemaining">
            <summary>
            Quantity remaining
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExOrder.QuantityFilled">
            <summary>
            Quantity filled
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExOrder.ValueFilled">
            <summary>
            Value of the filled part
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExOrder.ClientOrderId">
            <summary>
            Client order id
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExOrder.FeeBaseAsset">
            <summary>
            Fee in base asset
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExOrder.FeeQuoteAsset">
            <summary>
            Fee in quote asset
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExOrder.FeeDiscount">
            <summary>
            Fee discount
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExOrder.MakerFeeRate">
            <summary>
            Maker fee rate
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExOrder.TakerFeeRate">
            <summary>
            Taker fee rate
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExOrder.LastFilledQuantity">
            <summary>
            Filled amount of the last trade
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExOrder.LastFilledPrice">
            <summary>
            Price of the last trade
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExOrder.CreateTime">
            <summary>
            Timestamp order was created
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExOrder.UpdateTime">
            <summary>
            Timestamp order was last updated
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExOrder.Status">
            <summary>
            Status of the order
            </summary>
        </member>
        <member name="T:CoinEx.Net.Objects.Models.V2.CoinExOrderBook">
            <summary>
            Order book info
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExOrderBook.Symbol">
            <summary>
            Symbol
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExOrderBook.IsFull">
            <summary>
            Is full order book
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExOrderBook.Data">
            <summary>
            The book data
            </summary>
        </member>
        <member name="T:CoinEx.Net.Objects.Models.V2.CoinExOrderBookData">
            <summary>
            Order book data
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExOrderBookData.Asks">
            <summary>
            Asks list
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExOrderBookData.Bids">
            <summary>
            Bids list
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExOrderBookData.LastPrice">
            <summary>
            Last price
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExOrderBookData.UpdateTime">
            <summary>
            Update time
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExOrderBookData.Checksum">
            <summary>
            Checksum for validating the order book is correct
            </summary>
        </member>
        <member name="T:CoinEx.Net.Objects.Models.V2.CoinExOrderBookEntry">
            <summary>
            Order book entry
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExOrderBookEntry.Price">
            <summary>
            Price
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExOrderBookEntry.Quantity">
            <summary>
            Quantity
            </summary>
        </member>
        <member name="T:CoinEx.Net.Objects.Models.V2.CoinExOrderUpdate">
            <summary>
            Order update
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExOrderUpdate.Event">
            <summary>
            Event that triggered the update
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExOrderUpdate.Order">
            <summary>
            Order data
            </summary>
        </member>
        <member name="T:CoinEx.Net.Objects.Models.V2.CoinExPaginated`1">
            <summary>
            Paginated result
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExPaginated`1.Total">
            <summary>
            Total results
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExPaginated`1.HasNext">
            <summary>
            Has next page
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExPaginated`1.Items">
            <summary>
            Page items
            </summary>
        </member>
        <member name="T:CoinEx.Net.Objects.Models.V2.CoinExStopId">
            <summary>
            Stop order id
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExStopId.StopId">
            <summary>
            Stop order id
            </summary>
        </member>
        <member name="T:CoinEx.Net.Objects.Models.V2.CoinExStopOrder">
            <summary>
            Stop order info
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExStopOrder.StopOrderId">
            <summary>
            Order id
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExStopOrder.Symbol">
            <summary>
            Symbol
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExStopOrder.AccountType">
            <summary>
            Account type
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExStopOrder.QuantityAsset">
            <summary>
            Asset the quantity is in
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExStopOrder.Side">
            <summary>
            Order side
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExStopOrder.Type">
            <summary>
            Order type
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExStopOrder.Quantity">
            <summary>
            Order quantity
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExStopOrder.Price">
            <summary>
            Order price
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExStopOrder.ClientOrderId">
            <summary>
            Client order id
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExStopOrder.CreateTime">
            <summary>
            Timestamp order was created
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExStopOrder.UpdateTime">
            <summary>
            Timestamp order was last updated
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExStopOrder.TriggerPrice">
            <summary>
            Trigger price
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExStopOrder.TriggerDirection">
            <summary>
            Trigger direction
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExStopOrder.TriggerPriceType">
            <summary>
            Trigger price type
            </summary>
        </member>
        <member name="T:CoinEx.Net.Objects.Models.V2.CoinExStopOrderUpdate">
            <summary>
            Stop order update
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExStopOrderUpdate.Event">
            <summary>
            Event that triggered the update
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExStopOrderUpdate.Order">
            <summary>
            Order data
            </summary>
        </member>
        <member name="T:CoinEx.Net.Objects.Models.V2.CoinExSymbol">
            <summary>
            Symbol info
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExSymbol.Name">
            <summary>
            Symbol name
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExSymbol.MakerFeeRate">
            <summary>
            Maker fee rate
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExSymbol.TakerFeeRate">
            <summary>
            Taker fee rate
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExSymbol.MinOrderQuantity">
            <summary>
            Minimal order quantiy
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExSymbol.BaseAsset">
            <summary>
            Base asset
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExSymbol.QuoteAsset">
            <summary>
            Quote asset
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExSymbol.QuantityPrecision">
            <summary>
            Quantity precision
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExSymbol.PricePrecision">
            <summary>
            Price precision
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExSymbol.AutoMarketMakerAvailable">
            <summary>
            Is Automated Market Maker available
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExSymbol.MarginTradingAvailable">
            <summary>
            Is Margin Trading available
            </summary>
        </member>
        <member name="T:CoinEx.Net.Objects.Models.V2.CoinExTicker">
            <summary>
            Ticker (24h price stats) info
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExTicker.Symbol">
            <summary>
            Symbol name
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExTicker.LastPrice">
            <summary>
            Last price
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExTicker.OpenPrice">
            <summary>
            Open price
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExTicker.ClosePrice">
            <summary>
            Close price
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExTicker.HighPrice">
            <summary>
            High price
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExTicker.LowPrice">
            <summary>
            Low price
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExTicker.Volume">
            <summary>
            Volume in base asset
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExTicker.Value">
            <summary>
            Volume in quote asset
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExTicker.SellVolume">
            <summary>
            Sell volume
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExTicker.BuyVolume">
            <summary>
            Buy volume
            </summary>
        </member>
        <member name="T:CoinEx.Net.Objects.Models.V2.CoinExTrade">
            <summary>
            Trade info
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExTrade.Id">
            <summary>
            Trade id
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExTrade.Timestamp">
            <summary>
            Timestamp
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExTrade.Side">
            <summary>
            Trade side
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExTrade.Price">
            <summary>
            Price traded at
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExTrade.Quantity">
            <summary>
            Quantity traded
            </summary>
        </member>
        <member name="T:CoinEx.Net.Objects.Models.V2.CoinExTradeFee">
            <summary>
            Trading fee info
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExTradeFee.Symbol">
            <summary>
            Symbol
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExTradeFee.MakerFeeRate">
            <summary>
            Fee for maker trades
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExTradeFee.TakerFeeRate">
            <summary>
            Fee for taker trades
            </summary>
        </member>
        <member name="T:CoinEx.Net.Objects.Models.V2.CoinExUserTrade">
            <summary>
            User trade info
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExUserTrade.Id">
            <summary>
            Trade id
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExUserTrade.CreateTime">
            <summary>
            Trade time
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExUserTrade.Symbol">
            <summary>
            Symbol
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExUserTrade.Side">
            <summary>
            Trade side
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExUserTrade.OrderId">
            <summary>
            Order id
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExUserTrade.MarginSymbol">
            <summary>
            Margin symbol
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExUserTrade.Price">
            <summary>
            Trade price
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExUserTrade.Quantity">
            <summary>
            Quantity traded
            </summary>
        </member>
        <member name="T:CoinEx.Net.Objects.Options.CoinExOrderBookOptions">
            <summary>
            Options for CoinEx SymbolOrderBook
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Options.CoinExOrderBookOptions.Default">
            <summary>
            Default options for the CoinEx SymbolOrderBook
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Options.CoinExOrderBookOptions.InitialDataTimeout">
            <summary>
            After how much time we should consider the connection dropped if no data is received for this time after the initial subscriptions
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Options.CoinExOrderBookOptions.Limit">
            <summary>
            The amount of rows. Should be one of: 5/10/20/50
            </summary>
        </member>
        <member name="T:CoinEx.Net.Objects.Options.CoinExRestOptions">
            <summary>
            Options for the CoinExRestClient
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Options.CoinExRestOptions.Default">
            <summary>
            Default options for the CoinExRestClient
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Options.CoinExRestOptions.NonceProvider">
            <summary>
            Optional nonce provider for signing requests. Careful providing a custom provider; once a nonce is sent to the server, every request after that needs a higher nonce than that
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Options.CoinExRestOptions.SpotOptions">
            <summary>
            Options for the Spot API
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Options.CoinExRestOptions.BrokerId">
            <summary>
            The broker reference id to use
            </summary>
        </member>
        <member name="T:CoinEx.Net.Objects.Options.CoinExSocketOptions">
            <summary>
            Options for the CoinExSocketClient
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Options.CoinExSocketOptions.Default">
            <summary>
            Default options for the CoinExRestClient
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Options.CoinExSocketOptions.NonceProvider">
            <summary>
            Optional nonce provider for signing requests. Careful providing a custom provider; once a nonce is sent to the server, every request after that needs a higher nonce than that
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Options.CoinExSocketOptions.SpotOptions">
            <summary>
            Options for the Spot API
            </summary>
        </member>
        <member name="T:CoinEx.Net.SymbolOrderBooks.CoinExOrderBookFactory">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.SymbolOrderBooks.CoinExOrderBookFactory.#ctor(System.IServiceProvider)">
            <summary>
            ctor
            </summary>
            <param name="serviceProvider">Service provider for resolving logging and clients</param>
        </member>
        <member name="M:CoinEx.Net.SymbolOrderBooks.CoinExOrderBookFactory.CreateSpot(System.String,System.Action{CoinEx.Net.Objects.Options.CoinExOrderBookOptions})">
            <inheritdoc />
        </member>
        <member name="T:CoinEx.Net.SymbolOrderBooks.CoinExSpotSymbolOrderBook">
            <summary>
            Symbol order book implementation
            </summary>
        </member>
        <member name="M:CoinEx.Net.SymbolOrderBooks.CoinExSpotSymbolOrderBook.#ctor(System.String,System.Action{CoinEx.Net.Objects.Options.CoinExOrderBookOptions})">
            <summary>
            Create a new order book instance
            </summary>
            <param name="symbol">The symbol the order book is for</param>
            <param name="optionsDelegate">Option configuration delegate</param>
        </member>
        <member name="M:CoinEx.Net.SymbolOrderBooks.CoinExSpotSymbolOrderBook.#ctor(System.String,System.Action{CoinEx.Net.Objects.Options.CoinExOrderBookOptions},Microsoft.Extensions.Logging.ILoggerFactory,CoinEx.Net.Interfaces.Clients.ICoinExSocketClient)">
            <summary>
            Create a new order book instance
            </summary>
            <param name="symbol">The symbol the order book is for</param>
            <param name="optionsDelegate">Option configuration delegate</param>
            <param name="logger">Logger</param>
            <param name="socketClient">Socket client instance</param>
        </member>
        <member name="M:CoinEx.Net.SymbolOrderBooks.CoinExSpotSymbolOrderBook.DoStartAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.SymbolOrderBooks.CoinExSpotSymbolOrderBook.DoResyncAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.SymbolOrderBooks.CoinExSpotSymbolOrderBook.DoReset">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.SymbolOrderBooks.CoinExSpotSymbolOrderBook.DoChecksum(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.SymbolOrderBooks.CoinExSpotSymbolOrderBook.Dispose(System.Boolean)">
            <inheritdoc />
            <summary>
            Dispose
            </summary>
        </member>
        <member name="T:CryptoExchange.Net.Interfaces.CryptoClientExtensions">
            <summary>
            Extensions for the ICryptoRestClient and ICryptoSocketClient interfaces
            </summary>
        </member>
        <member name="M:CryptoExchange.Net.Interfaces.CryptoClientExtensions.CoinEx(CryptoExchange.Net.Interfaces.ICryptoRestClient)">
            <summary>
            Get the CoinEx REST Api client
            </summary>
            <param name="baseClient"></param>
            <returns></returns>
        </member>
        <member name="M:CryptoExchange.Net.Interfaces.CryptoClientExtensions.CoinEx(CryptoExchange.Net.Interfaces.ICryptoSocketClient)">
            <summary>
            Get the CoinEx Websocket Api client
            </summary>
            <param name="baseClient"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Extensions.DependencyInjection.ServiceCollectionExtensions">
            <summary>
            Extensions for DI
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.ServiceCollectionExtensions.AddCoinEx(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{CoinEx.Net.Objects.Options.CoinExRestOptions},System.Action{CoinEx.Net.Objects.Options.CoinExSocketOptions},System.Nullable{Microsoft.Extensions.DependencyInjection.ServiceLifetime})">
            <summary>
            Add the ICoinExClient and ICoinExSocketClient to the sevice collection so they can be injected
            </summary>
            <param name="services">The service collection</param>
            <param name="defaultRestOptionsDelegate">Set default options for the rest client</param>
            <param name="defaultSocketOptionsDelegate">Set default options for the socket client</param>
            <param name="socketClientLifeTime">The lifetime of the ICoinExSocketClient for the service collection. Defaults to Singleton.</param>
            <returns></returns>
        </member>
    </members>
</doc>
