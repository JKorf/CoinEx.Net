<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CoinEx.Net</name>
    </assembly>
    <members>
        <member name="T:CoinEx.Net.Clients.CoinExRestClient">
            <inheritdoc cref="T:CoinEx.Net.Interfaces.Clients.ICoinExRestClient" />
        </member>
        <member name="P:CoinEx.Net.Clients.CoinExRestClient.FuturesApi">
            <inheritdoc />
        </member>
        <member name="P:CoinEx.Net.Clients.CoinExRestClient.SpotApi">
            <inheritdoc />
        </member>
        <member name="P:CoinEx.Net.Clients.CoinExRestClient.SpotApiV2">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.CoinExRestClient.#ctor(System.Action{CoinEx.Net.Objects.Options.CoinExRestOptions})">
            <summary>
            Create a new instance of the CoinExRestClient using provided options
            </summary>
            <param name="optionsDelegate">Option configuration delegate</param>
        </member>
        <member name="M:CoinEx.Net.Clients.CoinExRestClient.#ctor(System.Net.Http.HttpClient,Microsoft.Extensions.Logging.ILoggerFactory,System.Action{CoinEx.Net.Objects.Options.CoinExRestOptions})">
            <summary>
            Create a new instance of the CoinExRestClient
            </summary>
            <param name="optionsDelegate">Option configuration delegate</param>
            <param name="loggerFactory">The logger factory</param>
            <param name="httpClient">Http client for this client</param>
        </member>
        <member name="M:CoinEx.Net.Clients.CoinExRestClient.SetDefaultOptions(System.Action{CoinEx.Net.Objects.Options.CoinExRestOptions})">
            <summary>
            Set the default options to be used when creating new clients
            </summary>
            <param name="optionsDelegate">Option configuration delegate</param>
        </member>
        <member name="M:CoinEx.Net.Clients.CoinExRestClient.SetApiCredentials(CryptoExchange.Net.Authentication.ApiCredentials)">
            <inheritdoc />
        </member>
        <member name="T:CoinEx.Net.Clients.CoinExSocketClient">
            <inheritdoc cref="T:CoinEx.Net.Interfaces.Clients.ICoinExSocketClient" />
        </member>
        <member name="P:CoinEx.Net.Clients.CoinExSocketClient.FuturesApi">
            <inheritdoc />
        </member>
        <member name="P:CoinEx.Net.Clients.CoinExSocketClient.SpotApiV2">
            <inheritdoc />
        </member>
        <member name="P:CoinEx.Net.Clients.CoinExSocketClient.SpotApi">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.CoinExSocketClient.#ctor(Microsoft.Extensions.Logging.ILoggerFactory)">
            <summary>
            Create a new instance of the CoinExSocketClient
            </summary>
            <param name="loggerFactory">The logger factory</param>
        </member>
        <member name="M:CoinEx.Net.Clients.CoinExSocketClient.#ctor(System.Action{CoinEx.Net.Objects.Options.CoinExSocketOptions})">
            <summary>
            Create a new instance of the CoinExSocketClient
            </summary>
            <param name="optionsDelegate">Option configuration delegate</param>
        </member>
        <member name="M:CoinEx.Net.Clients.CoinExSocketClient.#ctor(System.Action{CoinEx.Net.Objects.Options.CoinExSocketOptions},Microsoft.Extensions.Logging.ILoggerFactory)">
            <summary>
            Create a new instance of the CoinExSocketClient
            </summary>
            <param name="loggerFactory">The logger factory</param>
            <param name="optionsDelegate">Option configuration delegate</param>
        </member>
        <member name="M:CoinEx.Net.Clients.CoinExSocketClient.SetDefaultOptions(System.Action{CoinEx.Net.Objects.Options.CoinExSocketOptions})">
            <summary>
            Set the default options to be used when creating new clients
            </summary>
            <param name="optionsDelegate">Option configuration delegate</param>
        </member>
        <member name="M:CoinEx.Net.Clients.CoinExSocketClient.SetApiCredentials(CryptoExchange.Net.Authentication.ApiCredentials)">
            <inheritdoc />
        </member>
        <member name="T:CoinEx.Net.Clients.FuturesApi.CoinExRestClientFuturesApi">
            <inheritdoc cref="T:CoinEx.Net.Interfaces.Clients.FuturesApi.ICoinExRestClientFuturesApi" />
        </member>
        <member name="P:CoinEx.Net.Clients.FuturesApi.CoinExRestClientFuturesApi.ClientOptions">
            <inheritdoc />
        </member>
        <member name="P:CoinEx.Net.Clients.FuturesApi.CoinExRestClientFuturesApi.ExchangeName">
            <inheritdoc />
        </member>
        <member name="P:CoinEx.Net.Clients.FuturesApi.CoinExRestClientFuturesApi.Account">
            <inheritdoc />
        </member>
        <member name="P:CoinEx.Net.Clients.FuturesApi.CoinExRestClientFuturesApi.ExchangeData">
            <inheritdoc />
        </member>
        <member name="P:CoinEx.Net.Clients.FuturesApi.CoinExRestClientFuturesApi.Trading">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.FuturesApi.CoinExRestClientFuturesApi.FormatSymbol(System.String,System.String,CryptoExchange.Net.SharedApis.TradingMode,System.Nullable{System.DateTime})">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.FuturesApi.CoinExRestClientFuturesApi.CreateAccessor">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.FuturesApi.CoinExRestClientFuturesApi.CreateSerializer">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.FuturesApi.CoinExRestClientFuturesApi.CreateAuthenticationProvider(CryptoExchange.Net.Authentication.ApiCredentials)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.FuturesApi.CoinExRestClientFuturesApi.TryParseError(CryptoExchange.Net.Interfaces.IMessageAccessor)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.FuturesApi.CoinExRestClientFuturesApi.GetServerTimestampAsync">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.FuturesApi.CoinExRestClientFuturesApi.GetTimeSyncInfo">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.FuturesApi.CoinExRestClientFuturesApi.GetTimeOffset">
            <inheritdoc />
        </member>
        <member name="T:CoinEx.Net.Clients.FuturesApi.CoinExRestClientFuturesApiAccount">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.FuturesApi.CoinExRestClientFuturesApiAccount.GetTradingFeesAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.FuturesApi.CoinExRestClientFuturesApiAccount.GetBalancesAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.FuturesApi.CoinExRestClientFuturesApiAccount.SetLeverageAsync(System.String,CoinEx.Net.Enums.MarginMode,System.Int32,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:CoinEx.Net.Clients.FuturesApi.CoinExRestClientFuturesApiExchangeData">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.FuturesApi.CoinExRestClientFuturesApiExchangeData.GetServerTimeAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.FuturesApi.CoinExRestClientFuturesApiExchangeData.GetSymbolsAsync(System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.FuturesApi.CoinExRestClientFuturesApiExchangeData.GetTickersAsync(System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.FuturesApi.CoinExRestClientFuturesApiExchangeData.GetOrderBookAsync(System.String,System.Int32,System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.FuturesApi.CoinExRestClientFuturesApiExchangeData.GetTradeHistoryAsync(System.String,System.Nullable{System.Int32},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.FuturesApi.CoinExRestClientFuturesApiExchangeData.GetKlinesAsync(System.String,CoinEx.Net.Enums.KlineInterval,System.Nullable{System.Int32},System.Nullable{CoinEx.Net.Enums.PriceType},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.FuturesApi.CoinExRestClientFuturesApiExchangeData.GetIndexPricesAsync(System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.FuturesApi.CoinExRestClientFuturesApiExchangeData.GetFundingRatesAsync(System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.FuturesApi.CoinExRestClientFuturesApiExchangeData.GetFundingRateHistoryAsync(System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.FuturesApi.CoinExRestClientFuturesApiExchangeData.GetPremiumIndexPriceHistoryAsync(System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.FuturesApi.CoinExRestClientFuturesApiExchangeData.GetPositionLevelsAsync(System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.FuturesApi.CoinExRestClientFuturesApiExchangeData.GetLiquidationHistoryAsync(System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.FuturesApi.CoinExRestClientFuturesApiExchangeData.GetBasisHistoryAsync(System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:CoinEx.Net.Clients.FuturesApi.CoinExRestClientFuturesApiTrading">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.FuturesApi.CoinExRestClientFuturesApiTrading.PlaceOrderAsync(System.String,CoinEx.Net.Enums.OrderSide,CoinEx.Net.Enums.OrderTypeV2,System.Decimal,System.Nullable{System.Decimal},System.String,System.Nullable{System.Boolean},System.Nullable{CoinEx.Net.Enums.SelfTradePreventionMode},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.FuturesApi.CoinExRestClientFuturesApiTrading.PlaceStopOrderAsync(System.String,CoinEx.Net.Enums.OrderSide,CoinEx.Net.Enums.OrderTypeV2,System.Decimal,System.Decimal,CoinEx.Net.Enums.TriggerPriceType,System.Nullable{System.Decimal},System.String,System.Nullable{System.Boolean},System.Nullable{CoinEx.Net.Enums.SelfTradePreventionMode},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.FuturesApi.CoinExRestClientFuturesApiTrading.PlaceMultipleOrdersAsync(System.Collections.Generic.IEnumerable{CoinEx.Net.Objects.Models.V2.CoinExFuturesPlaceOrderRequest},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.FuturesApi.CoinExRestClientFuturesApiTrading.PlaceMultipleStopOrdersAsync(System.Collections.Generic.IEnumerable{CoinEx.Net.Objects.Models.V2.CoinExFuturesPlaceStopOrderRequest},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.FuturesApi.CoinExRestClientFuturesApiTrading.GetOrderAsync(System.String,System.Int64,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.FuturesApi.CoinExRestClientFuturesApiTrading.GetOpenOrdersAsync(System.String,System.Nullable{CoinEx.Net.Enums.OrderSide},System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.FuturesApi.CoinExRestClientFuturesApiTrading.GetClosedOrdersAsync(System.String,System.Nullable{CoinEx.Net.Enums.OrderSide},System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.FuturesApi.CoinExRestClientFuturesApiTrading.GetOpenStopOrdersAsync(System.String,System.Nullable{CoinEx.Net.Enums.OrderSide},System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.FuturesApi.CoinExRestClientFuturesApiTrading.GetClosedStopOrdersAsync(System.String,System.Nullable{CoinEx.Net.Enums.OrderSide},System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.FuturesApi.CoinExRestClientFuturesApiTrading.EditOrderAsync(System.String,System.Int64,System.Decimal,System.Nullable{System.Decimal},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.FuturesApi.CoinExRestClientFuturesApiTrading.EditStopOrderAsync(System.String,System.Int64,System.Decimal,System.Decimal,System.Nullable{System.Decimal},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.FuturesApi.CoinExRestClientFuturesApiTrading.CancelAllOrdersAsync(System.String,System.Nullable{CoinEx.Net.Enums.OrderSide},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.FuturesApi.CoinExRestClientFuturesApiTrading.CancelOrderAsync(System.String,System.Int64,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.FuturesApi.CoinExRestClientFuturesApiTrading.CancelStopOrderAsync(System.String,System.Int64,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.FuturesApi.CoinExRestClientFuturesApiTrading.CancelOrderByClientOrderIdAsync(System.String,System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.FuturesApi.CoinExRestClientFuturesApiTrading.CancelStopOrderByClientOrderIdAsync(System.String,System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.FuturesApi.CoinExRestClientFuturesApiTrading.CancelOrdersAsync(System.String,System.Collections.Generic.IEnumerable{System.Int64},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.FuturesApi.CoinExRestClientFuturesApiTrading.CancelStopOrdersAsync(System.String,System.Collections.Generic.IEnumerable{System.Int64},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.FuturesApi.CoinExRestClientFuturesApiTrading.GetUserTradesAsync(System.String,System.Nullable{CoinEx.Net.Enums.OrderSide},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.FuturesApi.CoinExRestClientFuturesApiTrading.GetOrderTradesAsync(System.String,System.Int64,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.FuturesApi.CoinExRestClientFuturesApiTrading.GetPositionsAsync(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.FuturesApi.CoinExRestClientFuturesApiTrading.GetPositionHistoryAsync(System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.FuturesApi.CoinExRestClientFuturesApiTrading.ClosePositionAsync(System.String,CoinEx.Net.Enums.OrderTypeV2,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.String,System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.FuturesApi.CoinExRestClientFuturesApiTrading.AdjustPositionMarginAsync(System.String,System.Decimal,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.FuturesApi.CoinExRestClientFuturesApiTrading.SetStopLossAsync(System.String,CoinEx.Net.Enums.PriceType,System.Decimal,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.FuturesApi.CoinExRestClientFuturesApiTrading.SetTakeProfitAsync(System.String,CoinEx.Net.Enums.PriceType,System.Decimal,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.FuturesApi.CoinExRestClientFuturesApiTrading.GetMarginHistoryAsync(System.String,System.Int64,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.FuturesApi.CoinExRestClientFuturesApiTrading.GetFundingRateHistoryAsync(System.String,System.Int64,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.FuturesApi.CoinExRestClientFuturesApiTrading.GetAutoDeleverageHistoryAsync(System.String,System.Int64,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.FuturesApi.CoinExRestClientFuturesApiTrading.GetAutoSettlementHistoryAsync(System.String,System.Int64,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:CoinEx.Net.Clients.FuturesApi.CoinExSocketClientFuturesApi">
            <inheritdoc cref="T:CoinEx.Net.Interfaces.Clients.FuturesApi.ICoinExSocketClientFuturesApi" />
        </member>
        <member name="P:CoinEx.Net.Clients.FuturesApi.CoinExSocketClientFuturesApi.ClientOptions">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.FuturesApi.CoinExSocketClientFuturesApi.#ctor(Microsoft.Extensions.Logging.ILogger,CoinEx.Net.Objects.Options.CoinExSocketOptions)">
            <summary>
            Create a new instance of CoinExSocketClient with default options
            </summary>
        </member>
        <member name="M:CoinEx.Net.Clients.FuturesApi.CoinExSocketClientFuturesApi.CreateAuthenticationProvider(CryptoExchange.Net.Authentication.ApiCredentials)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.FuturesApi.CoinExSocketClientFuturesApi.FormatSymbol(System.String,System.String,CryptoExchange.Net.SharedApis.TradingMode,System.Nullable{System.DateTime})">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.FuturesApi.CoinExSocketClientFuturesApi.CreateAccessor">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.FuturesApi.CoinExSocketClientFuturesApi.CreateSerializer">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.FuturesApi.CoinExSocketClientFuturesApi.GetListenerIdentifier(CryptoExchange.Net.Interfaces.IMessageAccessor)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.FuturesApi.CoinExSocketClientFuturesApi.GetAuthenticationRequestAsync(CryptoExchange.Net.Sockets.SocketConnection)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.FuturesApi.CoinExSocketClientFuturesApi.PreprocessStreamMessage(CryptoExchange.Net.Sockets.SocketConnection,System.Net.WebSockets.WebSocketMessageType,System.ReadOnlyMemory{System.Byte})">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.FuturesApi.CoinExSocketClientFuturesApi.SubscribeToTickerUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{System.Collections.Generic.IEnumerable{CoinEx.Net.Objects.Models.V2.CoinExFuturesTickerUpdate}}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.FuturesApi.CoinExSocketClientFuturesApi.SubscribeToTickerUpdatesAsync(System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{System.Collections.Generic.IEnumerable{CoinEx.Net.Objects.Models.V2.CoinExFuturesTickerUpdate}}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.FuturesApi.CoinExSocketClientFuturesApi.SubscribeToOrderBookUpdatesAsync(System.String,System.Int32,System.String,System.Boolean,System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{CoinEx.Net.Objects.Models.V2.CoinExOrderBook}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.FuturesApi.CoinExSocketClientFuturesApi.SubscribeToOrderBookUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},System.Int32,System.String,System.Boolean,System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{CoinEx.Net.Objects.Models.V2.CoinExOrderBook}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.FuturesApi.CoinExSocketClientFuturesApi.SubscribeToTradeUpdatesAsync(System.String,System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{System.Collections.Generic.IEnumerable{CoinEx.Net.Objects.Models.V2.CoinExTrade}}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.FuturesApi.CoinExSocketClientFuturesApi.SubscribeToTradeUpdatesAsync(System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{System.Collections.Generic.IEnumerable{CoinEx.Net.Objects.Models.V2.CoinExTrade}}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.FuturesApi.CoinExSocketClientFuturesApi.SubscribeToTradeUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{System.Collections.Generic.IEnumerable{CoinEx.Net.Objects.Models.V2.CoinExTrade}}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.FuturesApi.CoinExSocketClientFuturesApi.SubscribeToIndexPriceUpdatesAsync(System.String,System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{CoinEx.Net.Objects.Models.V2.CoinExIndexPriceUpdate}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.FuturesApi.CoinExSocketClientFuturesApi.SubscribeToIndexPriceUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{CoinEx.Net.Objects.Models.V2.CoinExIndexPriceUpdate}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.FuturesApi.CoinExSocketClientFuturesApi.SubscribeToBookPriceUpdatesAsync(System.String,System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{CoinEx.Net.Objects.Models.V2.CoinExBookPriceUpdate}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.FuturesApi.CoinExSocketClientFuturesApi.SubscribeToBookPriceUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{CoinEx.Net.Objects.Models.V2.CoinExBookPriceUpdate}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.FuturesApi.CoinExSocketClientFuturesApi.SubscribeToOrderUpdatesAsync(System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{CoinEx.Net.Objects.Models.V2.CoinExFuturesOrderUpdate}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.FuturesApi.CoinExSocketClientFuturesApi.SubscribeToStopOrderUpdatesAsync(System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{CoinEx.Net.Objects.Models.V2.CoinExStopOrderUpdate}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.FuturesApi.CoinExSocketClientFuturesApi.SubscribeToUserTradeUpdatesAsync(System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{CoinEx.Net.Objects.Models.V2.CoinExUserTrade}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.FuturesApi.CoinExSocketClientFuturesApi.SubscribeToBalanceUpdatesAsync(System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{System.Collections.Generic.IEnumerable{CoinEx.Net.Objects.Models.V2.CoinExFuturesBalance}}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.FuturesApi.CoinExSocketClientFuturesApi.SubscribeToPositionUpdatesAsync(System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{CoinEx.Net.Objects.Models.V2.CoinExPositionUpdate}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:CoinEx.Net.Clients.SpotApiV1.CoinExRestClientSpotApi">
            <inheritdoc cref="T:CoinEx.Net.Interfaces.Clients.SpotApiV1.ICoinExRestClientSpotApi" />
        </member>
        <member name="P:CoinEx.Net.Clients.SpotApiV1.CoinExRestClientSpotApi.ClientOptions">
            <inheritdoc />
        </member>
        <member name="E:CoinEx.Net.Clients.SpotApiV1.CoinExRestClientSpotApi.OnOrderPlaced">
            <summary>
            Event triggered when an order is placed via this client
            </summary>
        </member>
        <member name="E:CoinEx.Net.Clients.SpotApiV1.CoinExRestClientSpotApi.OnOrderCanceled">
            <summary>
            Event triggered when an order is canceled via this client. Note that this does not trigger when using CancelAllOrdersAsync
            </summary>
        </member>
        <member name="P:CoinEx.Net.Clients.SpotApiV1.CoinExRestClientSpotApi.ExchangeName">
            <inheritdoc />
        </member>
        <member name="P:CoinEx.Net.Clients.SpotApiV1.CoinExRestClientSpotApi.Account">
            <inheritdoc />
        </member>
        <member name="P:CoinEx.Net.Clients.SpotApiV1.CoinExRestClientSpotApi.ExchangeData">
            <inheritdoc />
        </member>
        <member name="P:CoinEx.Net.Clients.SpotApiV1.CoinExRestClientSpotApi.Trading">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV1.CoinExRestClientSpotApi.CreateAuthenticationProvider(CryptoExchange.Net.Authentication.ApiCredentials)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV1.CoinExRestClientSpotApi.FormatSymbol(System.String,System.String,CryptoExchange.Net.SharedApis.TradingMode,System.Nullable{System.DateTime})">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV1.CoinExRestClientSpotApi.GetSymbolName(System.String,System.String)">
            <summary>
            Get the name of a symbol for CoinEx based on the base and quote asset
            </summary>
            <param name="baseAsset"></param>
            <param name="quoteAsset"></param>
            <returns></returns>
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV1.CoinExRestClientSpotApi.ParseErrorResponse(System.Int32,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Collections.Generic.IEnumerable{System.String}}},CryptoExchange.Net.Interfaces.IMessageAccessor)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV1.CoinExRestClientSpotApi.GetTimeSyncInfo">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV1.CoinExRestClientSpotApi.GetTimeOffset">
            <inheritdoc />
        </member>
        <member name="P:CoinEx.Net.Clients.SpotApiV1.CoinExRestClientSpotApi.CommonSpotClient">
            <inheritdoc />
        </member>
        <member name="T:CoinEx.Net.Clients.SpotApiV1.CoinExRestClientSpotApiAccount">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV1.CoinExRestClientSpotApiAccount.GetBalancesAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV1.CoinExRestClientSpotApiAccount.GetDepositHistoryAsync(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV1.CoinExRestClientSpotApiAccount.GetWithdrawalHistoryAsync(System.String,System.Nullable{System.Int64},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV1.CoinExRestClientSpotApiAccount.WithdrawAsync(System.String,System.String,System.Boolean,System.Decimal,System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV1.CoinExRestClientSpotApiAccount.CancelWithdrawalAsync(System.Int64,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV1.CoinExRestClientSpotApiAccount.GetDepositAddressAsync(System.String,System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:CoinEx.Net.Clients.SpotApiV1.CoinExRestClientSpotApiExchangeData">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV1.CoinExRestClientSpotApiExchangeData.GetSymbolsAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV1.CoinExRestClientSpotApiExchangeData.GetCurrencyRateAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV1.CoinExRestClientSpotApiExchangeData.GetAssetsAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV1.CoinExRestClientSpotApiExchangeData.GetTickerAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV1.CoinExRestClientSpotApiExchangeData.GetTickersAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV1.CoinExRestClientSpotApiExchangeData.GetOrderBookAsync(System.String,System.Int32,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV1.CoinExRestClientSpotApiExchangeData.GetTradeHistoryAsync(System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV1.CoinExRestClientSpotApiExchangeData.GetSymbolInfoAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV1.CoinExRestClientSpotApiExchangeData.GetSymbolInfoAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV1.CoinExRestClientSpotApiExchangeData.GetKlinesAsync(System.String,CoinEx.Net.Enums.KlineInterval,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV1.CoinExRestClientSpotApiExchangeData.GetMiningDifficultyAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:CoinEx.Net.Clients.SpotApiV1.CoinExRestClientSpotApiTrading">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV1.CoinExRestClientSpotApiTrading.PlaceOrderAsync(System.String,CoinEx.Net.Enums.OrderSide,CoinEx.Net.Enums.OrderType,System.Decimal,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Boolean},System.Nullable{CoinEx.Net.Enums.OrderOption},System.String,System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV1.CoinExRestClientSpotApiTrading.GetOpenOrdersAsync(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV1.CoinExRestClientSpotApiTrading.GetOpenStopOrdersAsync(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV1.CoinExRestClientSpotApiTrading.GetClosedOrdersAsync(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV1.CoinExRestClientSpotApiTrading.GetOrderAsync(System.String,System.Int64,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV1.CoinExRestClientSpotApiTrading.GetOrderTradesAsync(System.Int64,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV1.CoinExRestClientSpotApiTrading.GetUserTradesAsync(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV1.CoinExRestClientSpotApiTrading.CancelOrderAsync(System.String,System.Int64,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV1.CoinExRestClientSpotApiTrading.CancelAllOrdersAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV1.CoinExRestClientSpotApiTrading.CancelAllStopOrdersAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:CoinEx.Net.Clients.SpotApiV1.CoinExSocketClientSpotApi">
            <inheritdoc cref="T:CoinEx.Net.Interfaces.Clients.SpotApiV1.ICoinExSocketClientSpotApi" />
        </member>
        <member name="P:CoinEx.Net.Clients.SpotApiV1.CoinExSocketClientSpotApi.ClientOptions">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV1.CoinExSocketClientSpotApi.#ctor(Microsoft.Extensions.Logging.ILogger,CoinEx.Net.Objects.Options.CoinExSocketOptions)">
            <summary>
            Create a new instance of CoinExSocketClient with default options
            </summary>
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV1.CoinExSocketClientSpotApi.CreateAuthenticationProvider(CryptoExchange.Net.Authentication.ApiCredentials)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV1.CoinExSocketClientSpotApi.FormatSymbol(System.String,System.String,CryptoExchange.Net.SharedApis.TradingMode,System.Nullable{System.DateTime})">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV1.CoinExSocketClientSpotApi.GetListenerIdentifier(CryptoExchange.Net.Interfaces.IMessageAccessor)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV1.CoinExSocketClientSpotApi.GetAuthenticationRequestAsync(CryptoExchange.Net.Sockets.SocketConnection)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV1.CoinExSocketClientSpotApi.PingAsync">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV1.CoinExSocketClientSpotApi.GetServerTimeAsync">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV1.CoinExSocketClientSpotApi.GetTickerAsync(System.String,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV1.CoinExSocketClientSpotApi.GetOrderBookAsync(System.String,System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV1.CoinExSocketClientSpotApi.GetTradeHistoryAsync(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV1.CoinExSocketClientSpotApi.GetKlinesAsync(System.String,CoinEx.Net.Enums.KlineInterval)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV1.CoinExSocketClientSpotApi.GetBalancesAsync(System.Collections.Generic.IEnumerable{System.String})">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV1.CoinExSocketClientSpotApi.GetOpenOrdersAsync(System.String,System.Nullable{CoinEx.Net.Enums.OrderSide},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV1.CoinExSocketClientSpotApi.SubscribeToTickerUpdatesAsync(System.String,System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{CoinEx.Net.Objects.Models.Socket.CoinExSocketSymbolState}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV1.CoinExSocketClientSpotApi.SubscribeToAllTickerUpdatesAsync(System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{System.Collections.Generic.IEnumerable{CoinEx.Net.Objects.Models.Socket.CoinExSocketSymbolState}}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV1.CoinExSocketClientSpotApi.SubscribeToOrderBookUpdatesAsync(System.String,System.Int32,System.Int32,System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{CoinEx.Net.Objects.Models.Socket.CoinExSocketOrderBook}},System.Boolean,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV1.CoinExSocketClientSpotApi.SubscribeToTradeUpdatesAsync(System.String,System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{System.Collections.Generic.IEnumerable{CoinEx.Net.Objects.Models.Socket.CoinExSocketSymbolTrade}}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV1.CoinExSocketClientSpotApi.SubscribeToBalanceUpdatesAsync(System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{System.Collections.Generic.IEnumerable{CoinEx.Net.Objects.Models.CoinExBalance}}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV1.CoinExSocketClientSpotApi.SubscribeToOrderUpdatesAsync(System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{CoinEx.Net.Objects.Models.Socket.CoinExSocketOrderUpdate}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV1.CoinExSocketClientSpotApi.SubscribeToOrderUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{CoinEx.Net.Objects.Models.Socket.CoinExSocketOrderUpdate}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:CoinEx.Net.Clients.SpotApiV2.CoinExRestClientSpotApi">
            <inheritdoc cref="T:CoinEx.Net.Interfaces.Clients.SpotApiV2.ICoinExRestClientSpotApi" />
        </member>
        <member name="P:CoinEx.Net.Clients.SpotApiV2.CoinExRestClientSpotApi.ClientOptions">
            <inheritdoc />
        </member>
        <member name="E:CoinEx.Net.Clients.SpotApiV2.CoinExRestClientSpotApi.OnOrderPlaced">
            <summary>
            Event triggered when an order is placed via this client
            </summary>
        </member>
        <member name="E:CoinEx.Net.Clients.SpotApiV2.CoinExRestClientSpotApi.OnOrderCanceled">
            <summary>
            Event triggered when an order is canceled via this client. Note that this does not trigger when using CancelAllOrdersAsync
            </summary>
        </member>
        <member name="P:CoinEx.Net.Clients.SpotApiV2.CoinExRestClientSpotApi.ExchangeName">
            <inheritdoc />
        </member>
        <member name="P:CoinEx.Net.Clients.SpotApiV2.CoinExRestClientSpotApi.Account">
            <inheritdoc />
        </member>
        <member name="P:CoinEx.Net.Clients.SpotApiV2.CoinExRestClientSpotApi.ExchangeData">
            <inheritdoc />
        </member>
        <member name="P:CoinEx.Net.Clients.SpotApiV2.CoinExRestClientSpotApi.Trading">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV2.CoinExRestClientSpotApi.CreateAccessor">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV2.CoinExRestClientSpotApi.CreateSerializer">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV2.CoinExRestClientSpotApi.CreateAuthenticationProvider(CryptoExchange.Net.Authentication.ApiCredentials)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV2.CoinExRestClientSpotApi.FormatSymbol(System.String,System.String,CryptoExchange.Net.SharedApis.TradingMode,System.Nullable{System.DateTime})">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV2.CoinExRestClientSpotApi.GetSymbolName(System.String,System.String)">
            <summary>
            Get the name of a symbol for CoinEx based on the base and quote asset
            </summary>
            <param name="baseAsset"></param>
            <param name="quoteAsset"></param>
            <returns></returns>
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV2.CoinExRestClientSpotApi.TryParseError(CryptoExchange.Net.Interfaces.IMessageAccessor)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV2.CoinExRestClientSpotApi.GetServerTimestampAsync">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV2.CoinExRestClientSpotApi.GetTimeSyncInfo">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV2.CoinExRestClientSpotApi.GetTimeOffset">
            <inheritdoc />
        </member>
        <member name="P:CoinEx.Net.Clients.SpotApiV2.CoinExRestClientSpotApi.CommonSpotClient">
            <inheritdoc />
        </member>
        <member name="T:CoinEx.Net.Clients.SpotApiV2.CoinExRestClientSpotApiAccount">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV2.CoinExRestClientSpotApiAccount.GetTradingFeesAsync(System.String,CoinEx.Net.Enums.AccountType,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV2.CoinExRestClientSpotApiAccount.SetAccountConfigAsync(System.Boolean,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV2.CoinExRestClientSpotApiAccount.GetBalancesAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV2.CoinExRestClientSpotApiAccount.GetMarginBalancesAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV2.CoinExRestClientSpotApiAccount.GetFinancialBalancesAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV2.CoinExRestClientSpotApiAccount.GetCreditAccountAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV2.CoinExRestClientSpotApiAccount.GetAutoMarketMakerAccountLiquidityAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV2.CoinExRestClientSpotApiAccount.MarginBorrowAsync(System.String,System.String,System.Decimal,System.Boolean,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV2.CoinExRestClientSpotApiAccount.MarginRepayAsync(System.String,System.String,System.Decimal,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV2.CoinExRestClientSpotApiAccount.GetBorrowHistoryAsync(System.String,System.Nullable{CoinEx.Net.Enums.BorrowStatus},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV2.CoinExRestClientSpotApiAccount.GetBorrowLimitAsync(System.String,System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV2.CoinExRestClientSpotApiAccount.GetDepositAddressAsync(System.String,System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV2.CoinExRestClientSpotApiAccount.RenewDepositAddressAsync(System.String,System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV2.CoinExRestClientSpotApiAccount.GetDepositHistoryAsync(System.String,System.String,System.Nullable{CoinEx.Net.Enums.DepositStatus},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV2.CoinExRestClientSpotApiAccount.WithdrawAsync(System.String,System.Decimal,System.String,System.Nullable{CoinEx.Net.Enums.MovementMethod},System.String,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV2.CoinExRestClientSpotApiAccount.CancelWithdrawalAsync(System.Int64,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV2.CoinExRestClientSpotApiAccount.GetWithdrawalHistoryAsync(System.String,System.Nullable{System.Int64},System.Nullable{CoinEx.Net.Enums.WithdrawStatus},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV2.CoinExRestClientSpotApiAccount.GetDepositWithdrawalConfigAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV2.CoinExRestClientSpotApiAccount.TransferAsync(System.String,CoinEx.Net.Enums.AccountType,CoinEx.Net.Enums.AccountType,System.Decimal,System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV2.CoinExRestClientSpotApiAccount.GetTransfersAsync(System.String,CoinEx.Net.Enums.AccountType,System.String,System.Nullable{CoinEx.Net.Enums.TransferStatus},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV2.CoinExRestClientSpotApiAccount.AddAutoMarketMakerLiquidityAsync(System.String,System.Decimal,System.Decimal,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV2.CoinExRestClientSpotApiAccount.RemoveAutoMarketMakerLiquidityAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV2.CoinExRestClientSpotApiAccount.GetTransactionHistoryAsync(CoinEx.Net.Enums.TransactionType,System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:CoinEx.Net.Clients.SpotApiV2.CoinExRestClientSpotApiExchangeData">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV2.CoinExRestClientSpotApiExchangeData.GetServerTimeAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV2.CoinExRestClientSpotApiExchangeData.GetSymbolsAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV2.CoinExRestClientSpotApiExchangeData.GetAssetsAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV2.CoinExRestClientSpotApiExchangeData.GetTickersAsync(System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV2.CoinExRestClientSpotApiExchangeData.GetOrderBookAsync(System.String,System.Int32,System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV2.CoinExRestClientSpotApiExchangeData.GetTradeHistoryAsync(System.String,System.Nullable{System.Int32},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV2.CoinExRestClientSpotApiExchangeData.GetKlinesAsync(System.String,CoinEx.Net.Enums.KlineInterval,System.Nullable{System.Int32},System.Nullable{CoinEx.Net.Enums.PriceType},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV2.CoinExRestClientSpotApiExchangeData.GetIndexPricesAsync(System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:CoinEx.Net.Clients.SpotApiV2.CoinExRestClientSpotApiTrading">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV2.CoinExRestClientSpotApiTrading.PlaceOrderAsync(System.String,CoinEx.Net.Enums.AccountType,CoinEx.Net.Enums.OrderSide,CoinEx.Net.Enums.OrderTypeV2,System.Decimal,System.Nullable{System.Decimal},System.String,System.String,System.Nullable{System.Boolean},System.Nullable{CoinEx.Net.Enums.SelfTradePreventionMode},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV2.CoinExRestClientSpotApiTrading.PlaceStopOrderAsync(System.String,CoinEx.Net.Enums.AccountType,CoinEx.Net.Enums.OrderSide,CoinEx.Net.Enums.OrderTypeV2,System.Decimal,System.Decimal,System.Nullable{System.Decimal},System.String,System.String,System.Nullable{System.Boolean},System.Nullable{CoinEx.Net.Enums.SelfTradePreventionMode},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV2.CoinExRestClientSpotApiTrading.PlaceMultipleOrdersAsync(System.Collections.Generic.IEnumerable{CoinEx.Net.Objects.Models.V2.CoinExPlaceOrderRequest},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV2.CoinExRestClientSpotApiTrading.PlaceMultipleStopOrdersAsync(System.Collections.Generic.IEnumerable{CoinEx.Net.Objects.Models.V2.CoinExPlaceStopOrderRequest},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV2.CoinExRestClientSpotApiTrading.GetOrderAsync(System.String,System.Int64,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV2.CoinExRestClientSpotApiTrading.GetOpenOrdersAsync(CoinEx.Net.Enums.AccountType,System.String,System.Nullable{CoinEx.Net.Enums.OrderSide},System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV2.CoinExRestClientSpotApiTrading.GetClosedOrdersAsync(CoinEx.Net.Enums.AccountType,System.String,System.Nullable{CoinEx.Net.Enums.OrderSide},System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV2.CoinExRestClientSpotApiTrading.GetOpenStopOrdersAsync(CoinEx.Net.Enums.AccountType,System.String,System.Nullable{CoinEx.Net.Enums.OrderSide},System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV2.CoinExRestClientSpotApiTrading.GetClosedStopOrdersAsync(CoinEx.Net.Enums.AccountType,System.String,System.Nullable{CoinEx.Net.Enums.OrderSide},System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV2.CoinExRestClientSpotApiTrading.EditOrderAsync(System.String,CoinEx.Net.Enums.AccountType,System.Int64,System.Decimal,System.Nullable{System.Decimal},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV2.CoinExRestClientSpotApiTrading.EditStopOrderAsync(System.String,CoinEx.Net.Enums.AccountType,System.Int64,System.Decimal,System.Decimal,System.Nullable{System.Decimal},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV2.CoinExRestClientSpotApiTrading.CancelAllOrdersAsync(System.String,CoinEx.Net.Enums.AccountType,System.Nullable{CoinEx.Net.Enums.OrderSide},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV2.CoinExRestClientSpotApiTrading.CancelOrderAsync(System.String,CoinEx.Net.Enums.AccountType,System.Int64,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV2.CoinExRestClientSpotApiTrading.CancelOrdersAsync(System.String,System.Collections.Generic.IEnumerable{System.Int64},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV2.CoinExRestClientSpotApiTrading.CancelStopOrderAsync(System.String,CoinEx.Net.Enums.AccountType,System.Int64,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV2.CoinExRestClientSpotApiTrading.CancelOrderByClientOrderIdAsync(System.String,CoinEx.Net.Enums.AccountType,System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV2.CoinExRestClientSpotApiTrading.CancelStopOrderByClientOrderIdAsync(System.String,CoinEx.Net.Enums.AccountType,System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV2.CoinExRestClientSpotApiTrading.CancelStopOrdersAsync(System.String,System.Collections.Generic.IEnumerable{System.Int64},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV2.CoinExRestClientSpotApiTrading.GetUserTradesAsync(System.String,CoinEx.Net.Enums.AccountType,System.Nullable{CoinEx.Net.Enums.OrderSide},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV2.CoinExRestClientSpotApiTrading.GetOrderTradesAsync(System.String,CoinEx.Net.Enums.AccountType,System.Int64,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:CoinEx.Net.Clients.SpotApiV2.CoinExSocketClientSpotApi">
            <inheritdoc cref="T:CoinEx.Net.Interfaces.Clients.SpotApiV2.ICoinExSocketClientSpotApi" />
        </member>
        <member name="P:CoinEx.Net.Clients.SpotApiV2.CoinExSocketClientSpotApi.ClientOptions">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV2.CoinExSocketClientSpotApi.#ctor(Microsoft.Extensions.Logging.ILogger,CoinEx.Net.Objects.Options.CoinExSocketOptions)">
            <summary>
            Create a new instance of CoinExSocketClient with default options
            </summary>
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV2.CoinExSocketClientSpotApi.CreateAuthenticationProvider(CryptoExchange.Net.Authentication.ApiCredentials)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV2.CoinExSocketClientSpotApi.FormatSymbol(System.String,System.String,CryptoExchange.Net.SharedApis.TradingMode,System.Nullable{System.DateTime})">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV2.CoinExSocketClientSpotApi.CreateAccessor">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV2.CoinExSocketClientSpotApi.CreateSerializer">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV2.CoinExSocketClientSpotApi.GetListenerIdentifier(CryptoExchange.Net.Interfaces.IMessageAccessor)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV2.CoinExSocketClientSpotApi.GetAuthenticationRequestAsync(CryptoExchange.Net.Sockets.SocketConnection)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV2.CoinExSocketClientSpotApi.PreprocessStreamMessage(CryptoExchange.Net.Sockets.SocketConnection,System.Net.WebSockets.WebSocketMessageType,System.ReadOnlyMemory{System.Byte})">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV2.CoinExSocketClientSpotApi.SubscribeToSystemNoticeUpdatesAsync(System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{System.Collections.Generic.IEnumerable{CoinEx.Net.Objects.Models.V2.CoinExMaintenance}}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV2.CoinExSocketClientSpotApi.SubscribeToTickerUpdatesAsync(System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{System.Collections.Generic.IEnumerable{CoinEx.Net.Objects.Models.V2.CoinExTicker}}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV2.CoinExSocketClientSpotApi.SubscribeToTickerUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{System.Collections.Generic.IEnumerable{CoinEx.Net.Objects.Models.V2.CoinExTicker}}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV2.CoinExSocketClientSpotApi.SubscribeToOrderBookUpdatesAsync(System.String,System.Int32,System.String,System.Boolean,System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{CoinEx.Net.Objects.Models.V2.CoinExOrderBook}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV2.CoinExSocketClientSpotApi.SubscribeToOrderBookUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},System.Int32,System.String,System.Boolean,System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{CoinEx.Net.Objects.Models.V2.CoinExOrderBook}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV2.CoinExSocketClientSpotApi.SubscribeToTradeUpdatesAsync(System.String,System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{System.Collections.Generic.IEnumerable{CoinEx.Net.Objects.Models.V2.CoinExTrade}}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV2.CoinExSocketClientSpotApi.SubscribeToTradeUpdatesAsync(System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{System.Collections.Generic.IEnumerable{CoinEx.Net.Objects.Models.V2.CoinExTrade}}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV2.CoinExSocketClientSpotApi.SubscribeToTradeUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{System.Collections.Generic.IEnumerable{CoinEx.Net.Objects.Models.V2.CoinExTrade}}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV2.CoinExSocketClientSpotApi.SubscribeToIndexPriceUpdatesAsync(System.String,System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{CoinEx.Net.Objects.Models.V2.CoinExIndexPriceUpdate}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV2.CoinExSocketClientSpotApi.SubscribeToIndexPriceUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{CoinEx.Net.Objects.Models.V2.CoinExIndexPriceUpdate}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV2.CoinExSocketClientSpotApi.SubscribeToBookPriceUpdatesAsync(System.String,System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{CoinEx.Net.Objects.Models.V2.CoinExBookPriceUpdate}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV2.CoinExSocketClientSpotApi.SubscribeToBookPriceUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{CoinEx.Net.Objects.Models.V2.CoinExBookPriceUpdate}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV2.CoinExSocketClientSpotApi.SubscribeToOrderUpdatesAsync(System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{CoinEx.Net.Objects.Models.V2.CoinExOrderUpdate}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV2.CoinExSocketClientSpotApi.SubscribeToStopOrderUpdatesAsync(System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{CoinEx.Net.Objects.Models.V2.CoinExStopOrderUpdate}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV2.CoinExSocketClientSpotApi.SubscribeToUserTradeUpdatesAsync(System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{CoinEx.Net.Objects.Models.V2.CoinExUserTrade}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApiV2.CoinExSocketClientSpotApi.SubscribeToBalanceUpdatesAsync(System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{System.Collections.Generic.IEnumerable{CoinEx.Net.Objects.Models.V2.CoinExBalanceUpdate}}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:CoinEx.Net.CoinExEnvironment">
            <summary>
            CoinEx environments
            </summary>
        </member>
        <member name="P:CoinEx.Net.CoinExEnvironment.RestBaseAddress">
            <summary>
            Spot Rest client address
            </summary>
        </member>
        <member name="P:CoinEx.Net.CoinExEnvironment.SocketBaseAddress">
            <summary>
            Spot Socket client address
            </summary>
        </member>
        <member name="P:CoinEx.Net.CoinExEnvironment.Live">
            <summary>
            Live environment
            </summary>
        </member>
        <member name="M:CoinEx.Net.CoinExEnvironment.CreateCustom(System.String,System.String,System.String)">
            <summary>
            Create a custom environment
            </summary>
            <param name="name"></param>
            <param name="restAddress"></param>
            <param name="socketAddress"></param>
            <returns></returns>
        </member>
        <member name="T:CoinEx.Net.CoinExExchange">
            <summary>
            CoinEx exchange information and configuration
            </summary>
        </member>
        <member name="P:CoinEx.Net.CoinExExchange.ExchangeName">
            <summary>
            Exchange name
            </summary>
        </member>
        <member name="P:CoinEx.Net.CoinExExchange.Url">
            <summary>
            Url to the main website
            </summary>
        </member>
        <member name="P:CoinEx.Net.CoinExExchange.ApiDocsUrl">
            <summary>
            Urls to the API documentation
            </summary>
        </member>
        <member name="M:CoinEx.Net.CoinExExchange.FormatSymbol(System.String,System.String,CryptoExchange.Net.SharedApis.TradingMode,System.Nullable{System.DateTime})">
            <summary>
            Format a base and quote asset to a CoinEx recognized symbol 
            </summary>
            <param name="baseAsset">Base asset</param>
            <param name="quoteAsset">Quote asset</param>
            <param name="tradingMode">Trading mode</param>
            <param name="deliverTime">Delivery time for delivery futures</param>
            <returns></returns>
        </member>
        <member name="T:CoinEx.Net.CoinExHelpers">
            <summary>
            CoinEx helpers
            </summary>
        </member>
        <member name="M:CoinEx.Net.CoinExHelpers.ToSeconds(CoinEx.Net.Enums.KlineInterval)">
            <summary>
            Kline interval to seconds
            </summary>
            <param name="interval"></param>
            <returns></returns>
        </member>
        <member name="M:CoinEx.Net.CoinExHelpers.MergeDepthIntToString(System.Int32)">
            <summary>
            Merge depth to string parameter
            </summary>
            <param name="depth"></param>
            <returns></returns>
        </member>
        <member name="T:CoinEx.Net.CoinExTrackerFactory">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.CoinExTrackerFactory.#ctor">
            <summary>
            ctor
            </summary>
        </member>
        <member name="M:CoinEx.Net.CoinExTrackerFactory.#ctor(System.IServiceProvider)">
            <summary>
            ctor
            </summary>
            <param name="serviceProvider">Service provider for resolving logging and clients</param>
        </member>
        <member name="M:CoinEx.Net.CoinExTrackerFactory.CreateTradeTracker(CryptoExchange.Net.SharedApis.SharedSymbol,System.Nullable{System.Int32},System.Nullable{System.TimeSpan})">
            <inheritdoc />
        </member>
        <member name="T:CoinEx.Net.Enums.AccountType">
            <summary>
            Account type
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.AccountType.Spot">
            <summary>
            Spot account
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.AccountType.Margin">
            <summary>
            Margin account
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.AccountType.Futures">
            <summary>
            Futures account
            </summary>
        </member>
        <member name="T:CoinEx.Net.Enums.BorrowStatus">
            <summary>
            Borrow status
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.BorrowStatus.Loan">
            <summary>
            Borrowing
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.BorrowStatus.Debt">
            <summary>
            In debt
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.BorrowStatus.Liquidated">
            <summary>
            Forcefully liquidated
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.BorrowStatus.Finish">
            <summary>
            Has been repaid
            </summary>
        </member>
        <member name="T:CoinEx.Net.Enums.ContractType">
            <summary>
            Type of contract
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.ContractType.Linear">
            <summary>
            Linear contract
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.ContractType.Inverse">
            <summary>
            Inverse contract
            </summary>
        </member>
        <member name="T:CoinEx.Net.Enums.DepositStatus">
            <summary>
            Deposit status
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.DepositStatus.Processing">
            <summary>
            Currently processing
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.DepositStatus.Confirming">
            <summary>
            Awaiting blockchain confirmation
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.DepositStatus.Canceled">
            <summary>
            Canceled
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.DepositStatus.Finished">
            <summary>
            Finished
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.DepositStatus.TooSmall">
            <summary>
            Deposit amount was too small
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.DepositStatus.Exception">
            <summary>
            Exception
            </summary>
        </member>
        <member name="T:CoinEx.Net.Enums.KlineInterval">
            <summary>
            Interval for klines, int value represent the time in seconds
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.KlineInterval.OneMinute">
            <summary>
            1m
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.KlineInterval.ThreeMinutes">
            <summary>
            3m
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.KlineInterval.FiveMinutes">
            <summary>
            5m
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.KlineInterval.FifteenMinutes">
            <summary>
            15m
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.KlineInterval.ThirtyMinutes">
            <summary>
            30m
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.KlineInterval.OneHour">
            <summary>
            1h
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.KlineInterval.TwoHours">
            <summary>
            2h
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.KlineInterval.FourHours">
            <summary>
            4h
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.KlineInterval.SixHours">
            <summary>
            6h
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.KlineInterval.TwelveHours">
            <summary>
            12h
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.KlineInterval.OneDay">
            <summary>
            1d
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.KlineInterval.ThreeDays">
            <summary>
            3d
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.KlineInterval.OneWeek">
            <summary>
            1w
            </summary>
        </member>
        <member name="T:CoinEx.Net.Enums.MarginMode">
            <summary>
            Margin mode
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.MarginMode.Isolated">
            <summary>
            Isolated margin mode
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.MarginMode.Cross">
            <summary>
            Cross margin mode
            </summary>
        </member>
        <member name="T:CoinEx.Net.Enums.MovementMethod">
            <summary>
            Deposit/Withdrawal method
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.MovementMethod.OnChain">
            <summary>
            On chain
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.MovementMethod.InterUser">
            <summary>
            Between users
            </summary>
        </member>
        <member name="T:CoinEx.Net.Enums.OrderOption">
            <summary>
            Options when placing an order
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.OrderOption.Normal">
            <summary>
            Normal order
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.OrderOption.ImmediateOrCancel">
            <summary>
            Immediate or cancel order
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.OrderOption.FillOrKill">
            <summary>
            Fill or kill order
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.OrderOption.MakerOnly">
            <summary>
            Maker only order
            </summary>
        </member>
        <member name="T:CoinEx.Net.Enums.OrderSide">
            <summary>
            Order side
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.OrderSide.Either">
            <summary>
            Either (only usable for filtering)
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.OrderSide.Buy">
            <summary>
            Buy
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.OrderSide.Sell">
            <summary>
            Sell
            </summary>
        </member>
        <member name="T:CoinEx.Net.Enums.OrderStatus">
            <summary>
            Status of an order
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.OrderStatus.Executed">
            <summary>
            Executed
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.OrderStatus.PartiallyExecuted">
            <summary>
            Partially executed
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.OrderStatus.UnExecuted">
            <summary>
            New
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.OrderStatus.Canceled">
            <summary>
            Canceled
            </summary>
        </member>
        <member name="T:CoinEx.Net.Enums.OrderStatusV2">
            <summary>
            Order status
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.OrderStatusV2.Open">
            <summary>
            Open
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.OrderStatusV2.PartiallyFilled">
            <summary>
            Partially filled
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.OrderStatusV2.Filled">
            <summary>
            Fully filled
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.OrderStatusV2.PartiallyCanceled">
            <summary>
            Partially filled, partially canceled
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.OrderStatusV2.Canceled">
            <summary>
            Fully canceled
            </summary>
        </member>
        <member name="T:CoinEx.Net.Enums.OrderType">
            <summary>
            Type of order
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.OrderType.Limit">
            <summary>
            Limit order
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.OrderType.Market">
            <summary>
            Market order
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.OrderType.StopLimit">
            <summary>
            Stop limit order
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.OrderType.StopMarket">
            <summary>
            Stop market order
            </summary>
        </member>
        <member name="T:CoinEx.Net.Enums.OrderTypeV2">
            <summary>
            Order type
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.OrderTypeV2.Limit">
            <summary>
            Limit order
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.OrderTypeV2.Market">
            <summary>
            Market order
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.OrderTypeV2.PostOnly">
            <summary>
            Post only
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.OrderTypeV2.ImmediateOrCancel">
            <summary>
            Immediate or cancel
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.OrderTypeV2.FillOrKill">
            <summary>
            Fill or kill
            </summary>
        </member>
        <member name="T:CoinEx.Net.Enums.OrderUpdateType">
            <summary>
            Order update type
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.OrderUpdateType.Put">
            <summary>
            Order created
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.OrderUpdateType.Update">
            <summary>
            Order updated
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.OrderUpdateType.Edit">
            <summary>
            Order was edited
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.OrderUpdateType.Finish">
            <summary>
            Order finished
            </summary>
        </member>
        <member name="T:CoinEx.Net.Enums.PositionSide">
            <summary>
            Position side
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.PositionSide.Long">
            <summary>
            Long position
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.PositionSide.Short">
            <summary>
            Short position
            </summary>
        </member>
        <member name="T:CoinEx.Net.Enums.PositionUpdateType">
            <summary>
            Position update type
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.PositionUpdateType.Update">
            <summary>
            Update
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.PositionUpdateType.Close">
            <summary>
            Close
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.PositionUpdateType.SystemClose">
            <summary>
            System closing
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.PositionUpdateType.AutoDeleverage">
            <summary>
            Auto delveraging
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.PositionUpdateType.Liquidation">
            <summary>
            Liquidation
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.PositionUpdateType.Alert">
            <summary>
            Alert
            </summary>
        </member>
        <member name="T:CoinEx.Net.Enums.PriceType">
            <summary>
            Price type
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.PriceType.LastPrice">
            <summary>
            Last price
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.PriceType.MarkPrice">
            <summary>
            Mark price
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.PriceType.IndexPrice">
            <summary>
            Index price
            </summary>
        </member>
        <member name="T:CoinEx.Net.Enums.SelfTradePreventionMode">
            <summary>
            Self trade prevention mode
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.SelfTradePreventionMode.CancelMaker">
            <summary>
            Cancel the maker order
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.SelfTradePreventionMode.CancelTaker">
            <summary>
            Cancel the taker order
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.SelfTradePreventionMode.CancelBoth">
            <summary>
            Cancel both orders
            </summary>
        </member>
        <member name="T:CoinEx.Net.Enums.StopOrderUpdateType">
            <summary>
            Stop order update type
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.StopOrderUpdateType.Put">
            <summary>
            Order created
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.StopOrderUpdateType.Active">
            <summary>
            Order active
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.StopOrderUpdateType.Cancel">
            <summary>
            Order canceled
            </summary>
        </member>
        <member name="T:CoinEx.Net.Enums.TransactionRole">
            <summary>
            Role of a transaction
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.TransactionRole.Maker">
            <summary>
            Maker of a new order book entry
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.TransactionRole.Taker">
            <summary>
            Taker of an existing order book entry
            </summary>
        </member>
        <member name="T:CoinEx.Net.Enums.TransactionType">
            <summary>
            Transaction type
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.TransactionType.Deposit">
            <summary>
            Deposit
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.TransactionType.Withdrawal">
            <summary>
            Withdrawal
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.TransactionType.Trade">
            <summary>
            Trade
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.TransactionType.MakerCashback">
            <summary>
            Maker cashback
            </summary>
        </member>
        <member name="T:CoinEx.Net.Enums.TransferStatus">
            <summary>
            Transfer status
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.TransferStatus.Created">
            <summary>
            Created
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.TransferStatus.Deducted">
            <summary>
            Asset deducted
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.TransferStatus.Failed">
            <summary>
            Failed to transfer
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.TransferStatus.Finished">
            <summary>
            Transfer completed
            </summary>
        </member>
        <member name="T:CoinEx.Net.Enums.TriggerDirection">
            <summary>
            Trigger direction
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.TriggerDirection.Higher">
            <summary>
            Should trigger when the price is higher than the trigger price
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.TriggerDirection.Lower">
            <summary>
            Should trigger when the price is lower than the trigger price
            </summary>
        </member>
        <member name="T:CoinEx.Net.Enums.TriggerPriceType">
            <summary>
            Trigger price type
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.TriggerPriceType.LastPrice">
            <summary>
            Last price
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.TriggerPriceType.MarkPrice">
            <summary>
            Mark price
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.TriggerPriceType.IndexPrice">
            <summary>
            Index price
            </summary>
        </member>
        <member name="T:CoinEx.Net.Enums.UpdateType">
            <summary>
            Type of update
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.UpdateType.New">
            <summary>
            New
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.UpdateType.Update">
            <summary>
            Update
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.UpdateType.Done">
            <summary>
            Done
            </summary>
        </member>
        <member name="T:CoinEx.Net.Enums.WithdrawStatus">
            <summary>
            Status of a withdrawal
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.WithdrawStatus.Audit">
            <summary>
            Under audit
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.WithdrawStatus.Pass">
            <summary>
            Passed audit
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.WithdrawStatus.Processing">
            <summary>
            Processing
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.WithdrawStatus.Confirming">
            <summary>
            Confirming
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.WithdrawStatus.NotPass">
            <summary>
            Not passed audit
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.WithdrawStatus.Cancel">
            <summary>
            Canceled
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.WithdrawStatus.Finish">
            <summary>
            Finished
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.WithdrawStatus.Fail">
            <summary>
            Failed
            </summary>
        </member>
        <member name="T:CoinEx.Net.Enums.WithdrawStatusV2">
            <summary>
            Withdrawal status
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.WithdrawStatusV2.Created">
            <summary>
            Created
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.WithdrawStatusV2.AuditRequired">
            <summary>
            To be audited
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.WithdrawStatusV2.Audited">
            <summary>
            Approved
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.WithdrawStatusV2.Processing">
            <summary>
            Procesing
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.WithdrawStatusV2.Confirming">
            <summary>
            Waiting for blockchain confirmation
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.WithdrawStatusV2.Finished">
            <summary>
            Finished
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.WithdrawStatusV2.Canceled">
            <summary>
            Withdrawal canceld
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.WithdrawStatusV2.CancelationFailed">
            <summary>
            Cancelation failed
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.WithdrawStatusV2.Failed">
            <summary>
            Withdrawal failed
            </summary>
        </member>
        <member name="T:CoinEx.Net.ExtensionMethods.CoinExExtensionMethods">
            <summary>
            Extension methods specific to using the CoinEx API
            </summary>
        </member>
        <member name="T:CoinEx.Net.Interfaces.Clients.FuturesApi.ICoinExRestClientFuturesApi">
            <summary>
            Futures API
            </summary>
        </member>
        <member name="P:CoinEx.Net.Interfaces.Clients.FuturesApi.ICoinExRestClientFuturesApi.Account">
            <summary>
            Endpoints related to account settings, info or actions
            </summary>
        </member>
        <member name="P:CoinEx.Net.Interfaces.Clients.FuturesApi.ICoinExRestClientFuturesApi.ExchangeData">
            <summary>
            Endpoints related to retrieving market and system data
            </summary>
        </member>
        <member name="P:CoinEx.Net.Interfaces.Clients.FuturesApi.ICoinExRestClientFuturesApi.Trading">
            <summary>
            Endpoints related to orders, trades and managing positions
            </summary>
        </member>
        <member name="P:CoinEx.Net.Interfaces.Clients.FuturesApi.ICoinExRestClientFuturesApi.SharedClient">
            <summary>
            Get the shared rest requests client. This interface is shared with other exhanges to allow for a common implementation for different exchanges.
            </summary>
        </member>
        <member name="T:CoinEx.Net.Interfaces.Clients.FuturesApi.ICoinExRestClientFuturesApiAccount">
            <summary>
            CoinEx account endpoints. Account endpoints include balance info, withdraw/deposit info and requesting and account settings
            </summary>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.FuturesApi.ICoinExRestClientFuturesApiAccount.GetTradingFeesAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Get trading fees for a symbol
            <para><a href="https://docs.coinex.com/api/v2/account/fees/http/get-account-trade-fees" /></para>
            </summary>
            <param name="symbol">Symbol, for example `ETHUSDT`</param>
            <param name="ct">Cancelation token</param>
            <returns></returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.FuturesApi.ICoinExRestClientFuturesApiAccount.GetBalancesAsync(System.Threading.CancellationToken)">
            <summary>
            Get balances
            <para><a href="https://docs.coinex.com/api/v2/assets/balance/http/get-futures-balance" /></para>
            </summary>
            <param name="ct">Cancelation token</param>
            <returns></returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.FuturesApi.ICoinExRestClientFuturesApiAccount.SetLeverageAsync(System.String,CoinEx.Net.Enums.MarginMode,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Set leverage for a symbol
            <para><a href="https://docs.coinex.com/api/v2/futures/position/http/adjust-position-leverage" /></para>
            </summary>
            <param name="symbol">Symbol, for example `ETHUSDT`</param>
            <param name="mode">Margin mode</param>
            <param name="leverage">Leverage</param>
            <param name="ct">Cancelation token</param>
            <returns></returns>
        </member>
        <member name="T:CoinEx.Net.Interfaces.Clients.FuturesApi.ICoinExRestClientFuturesApiExchangeData">
            <summary>
            CoinEx exchange data endpoints. Exchange data includes market data (tickers, order books, etc) and system status.
            </summary>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.FuturesApi.ICoinExRestClientFuturesApiExchangeData.GetServerTimeAsync(System.Threading.CancellationToken)">
            <summary>
            Get server time
            <para><a href="https://docs.coinex.com/api/v2/common/http/time" /></para>
            </summary>
            <param name="ct">Cancelation token</param>
            <returns></returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.FuturesApi.ICoinExRestClientFuturesApiExchangeData.GetSymbolsAsync(System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <summary>
            Get list of support symbols
            <para><a href="https://docs.coinex.com/api/v2/futures/market/http/list-market" /></para>
            </summary>
            <param name="symbols">Filter by symbol name; max 10, for example `ETHUSDT`</param>
            <param name="ct">Cancelation token</param>
            <returns></returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.FuturesApi.ICoinExRestClientFuturesApiExchangeData.GetTickersAsync(System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <summary>
            Get symbol tickers
            <para><a href="https://docs.coinex.com/api/v2/futures/market/http/list-market-ticker" /></para>
            </summary>
            <param name="symbols">Fitler by symbol names; max 10, for example `ETHUSDT`</param>
            <param name="ct">Cancelation Token</param>
            <returns></returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.FuturesApi.ICoinExRestClientFuturesApiExchangeData.GetOrderBookAsync(System.String,System.Int32,System.String,System.Threading.CancellationToken)">
            <summary>
            Get the orderbook for a symbol
            <para><a href="https://docs.coinex.com/api/v2/futures/market/http/list-market-depth" /></para>
            </summary>
            <param name="symbol">Symbol, for example `ETHUSDT`</param>
            <param name="limit">Amount of rows, 5, 10, 20 or 50</param>
            <param name="mergeLevel">The merge level, 0.00000000001 up to 1000, 0 for no merging</param>
            <param name="ct">Cancelation Token</param>
            <returns></returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.FuturesApi.ICoinExRestClientFuturesApiExchangeData.GetTradeHistoryAsync(System.String,System.Nullable{System.Int32},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Get the trade history for a symbol
            <para><a href="https://docs.coinex.com/api/v2/futures/market/http/list-market-deals" /></para>
            </summary>
            <param name="symbol">Symbol, for example `ETHUSDT`</param>
            <param name="limit">Max amount of results</param>
            <param name="lastId">The starting point of the query, 0 means to acquire from the latest record</param>
            <param name="ct">Cancelation Token</param>
            <returns></returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.FuturesApi.ICoinExRestClientFuturesApiExchangeData.GetKlinesAsync(System.String,CoinEx.Net.Enums.KlineInterval,System.Nullable{System.Int32},System.Nullable{CoinEx.Net.Enums.PriceType},System.Threading.CancellationToken)">
            <summary>
            Get klines/candlesticks
            <para><a href="https://docs.coinex.com/api/v2/futures/market/http/list-market-kline" /></para>
            </summary>
            <param name="symbol">Symbol, for example `ETHUSDT`</param>
            <param name="interval">Kline interval</param>
            <param name="limit">Max amount of results</param>
            <param name="priceType">Price type, either LastPrice(default) or IndexPrice</param>
            <param name="ct">Cancelation Token</param>
            <returns></returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.FuturesApi.ICoinExRestClientFuturesApiExchangeData.GetIndexPricesAsync(System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <summary>
            Get index prices
            <para><a href="https://docs.coinex.com/api/v2/futures/market/http/list-market-index" /></para>
            </summary>
            <param name="symbols">Filter by symbols, for example `ETHUSDT`</param>
            <param name="ct">Cancelation Token</param>
            <returns></returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.FuturesApi.ICoinExRestClientFuturesApiExchangeData.GetFundingRatesAsync(System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <summary>
            Get funding rates
            <para><a href="https://docs.coinex.com/api/v2/futures/market/http/list-market-funding-rate" /></para>
            </summary>
            <param name="symbols">Filter by symbols, for example `ETHUSDT`</param>
            <param name="ct">Cancelation Token</param>
            <returns></returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.FuturesApi.ICoinExRestClientFuturesApiExchangeData.GetFundingRateHistoryAsync(System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get historical funding rates
            <para><a href="https://docs.coinex.com/api/v2/futures/market/http/list-market-funding-rate-history" /></para>
            </summary>
            <param name="symbol">Symbol, for example `ETHUSDT`</param>
            <param name="startTime">Filter by start time</param>
            <param name="endTime">Filter by end time</param>
            <param name="page">Page number</param>
            <param name="pageSize">Page size</param>
            <param name="ct">Cancelation Token</param>
            <returns></returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.FuturesApi.ICoinExRestClientFuturesApiExchangeData.GetPremiumIndexPriceHistoryAsync(System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get historical premium index prices
            <para><a href="https://docs.coinex.com/api/v2/futures/market/http/list-market-premium-history" /></para>
            </summary>
            <param name="symbol">Symbol, for example `ETHUSDT`</param>
            <param name="startTime">Filter by start time</param>
            <param name="endTime">Filter by end time</param>
            <param name="page">Page number</param>
            <param name="pageSize">Page size</param>
            <param name="ct">Cancelation Token</param>
            <returns></returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.FuturesApi.ICoinExRestClientFuturesApiExchangeData.GetPositionLevelsAsync(System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <summary>
            Get position levels
            <para><a href="https://docs.coinex.com/api/v2/futures/market/http/list-market-position-level" /></para>
            </summary>
            <param name="symbols">Filter by symbols; max 10, for example `ETHUSDT`</param>
            <param name="ct">Cancelation Token</param>
            <returns></returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.FuturesApi.ICoinExRestClientFuturesApiExchangeData.GetLiquidationHistoryAsync(System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get liquidation history
            <para><a href="https://docs.coinex.com/api/v2/futures/market/http/list-market-liquidation-history" /></para>
            </summary>
            <param name="symbol">Symbol, for example `ETHUSDT`</param>
            <param name="startTime">Filter by start time</param>
            <param name="endTime">Filter by end time</param>
            <param name="page">Page number</param>
            <param name="pageSize">Page size</param>
            <param name="ct">Cancelation Token</param>
            <returns></returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.FuturesApi.ICoinExRestClientFuturesApiExchangeData.GetBasisHistoryAsync(System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            Get basis rate history
            <para><a href="https://docs.coinex.com/api/v2/futures/market/http/list-market-basis-history" /></para>
            </summary>
            <param name="symbol">Symbol, for example `ETHUSDT`</param>
            <param name="startTime">Filter by start time</param>
            <param name="endTime">Filter by end time</param>
            <param name="ct">Cancelation Token</param>
            <returns></returns>
        </member>
        <member name="T:CoinEx.Net.Interfaces.Clients.FuturesApi.ICoinExRestClientFuturesApiShared">
            <summary>
            Shared interface for Futures rest API usage
            </summary>
        </member>
        <member name="T:CoinEx.Net.Interfaces.Clients.FuturesApi.ICoinExRestClientFuturesApiTrading">
            <summary>
            CoinEx trading endpoints, placing and mananging orders.
            </summary>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.FuturesApi.ICoinExRestClientFuturesApiTrading.PlaceOrderAsync(System.String,CoinEx.Net.Enums.OrderSide,CoinEx.Net.Enums.OrderTypeV2,System.Decimal,System.Nullable{System.Decimal},System.String,System.Nullable{System.Boolean},System.Nullable{CoinEx.Net.Enums.SelfTradePreventionMode},System.Threading.CancellationToken)">
            <summary>
            Place a new order
            <para><a href="https://docs.coinex.com/api/v2/futures/order/http/put-order" /></para>
            </summary>
            <param name="symbol">The symbol, for example `ETHUSDT`</param>
            <param name="side">Order side</param>
            <param name="type">Order type</param>
            <param name="quantity">Quantity</param>
            <param name="price">Price of the order</param>
            <param name="clientOrderId">Client order id</param>
            <param name="hide">Hide the order</param>
            <param name="stpMode">Self trade prevention mode</param>
            <param name="ct">Cancelation Token</param>
            <returns></returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.FuturesApi.ICoinExRestClientFuturesApiTrading.PlaceStopOrderAsync(System.String,CoinEx.Net.Enums.OrderSide,CoinEx.Net.Enums.OrderTypeV2,System.Decimal,System.Decimal,CoinEx.Net.Enums.TriggerPriceType,System.Nullable{System.Decimal},System.String,System.Nullable{System.Boolean},System.Nullable{CoinEx.Net.Enums.SelfTradePreventionMode},System.Threading.CancellationToken)">
            <summary>
            Place a new stop order
            <para><a href="https://docs.coinex.com/api/v2/futures/order/http/put-stop-order" /></para>
            </summary>
            <param name="symbol">The symbol, for example `ETHUSDT`</param>
            <param name="side">Order side</param>
            <param name="type">Order type</param>
            <param name="quantity">Quantity</param>
            <param name="price">Price of the order</param>
            <param name="triggerPriceType">Price type for the trigger</param>
            <param name="clientOrderId">Client order id</param>
            <param name="triggerPrice">Price to trigger on</param>
            <param name="hide">Hide the order</param>
            <param name="stpMode">Self trade prevention mode</param>
            <param name="ct">Cancelation Token</param>
            <returns></returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.FuturesApi.ICoinExRestClientFuturesApiTrading.PlaceMultipleOrdersAsync(System.Collections.Generic.IEnumerable{CoinEx.Net.Objects.Models.V2.CoinExFuturesPlaceOrderRequest},System.Threading.CancellationToken)">
            <summary>
            Place multiple orders in a single call
            <para><a href="https://docs.coinex.com/api/v2/futures/order/http/put-multi-order" /></para>
            </summary>
            <param name="requests">Orders to place</param>
            <param name="ct">Cancelation Token</param>
            <returns></returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.FuturesApi.ICoinExRestClientFuturesApiTrading.PlaceMultipleStopOrdersAsync(System.Collections.Generic.IEnumerable{CoinEx.Net.Objects.Models.V2.CoinExFuturesPlaceStopOrderRequest},System.Threading.CancellationToken)">
            <summary>
            Place multiple stop orders in a single call
            <para><a href="https://docs.coinex.com/api/v2/futures/order/http/put-multi-stop-order" /></para>
            </summary>
            <param name="requests">Stop orders to place</param>
            <param name="ct">Cancelation Token</param>
            <returns></returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.FuturesApi.ICoinExRestClientFuturesApiTrading.GetOrderAsync(System.String,System.Int64,System.Threading.CancellationToken)">
            <summary>
            Get an order by id
            <para><a href="https://docs.coinex.com/api/v2/futures/order/http/get-order-status" /></para>
            </summary>
            <param name="symbol">Symbol, for example `ETHUSDT`</param>
            <param name="orderId">Order id</param>
            <param name="ct">Cancelation Token</param>
            <returns></returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.FuturesApi.ICoinExRestClientFuturesApiTrading.GetOpenOrdersAsync(System.String,System.Nullable{CoinEx.Net.Enums.OrderSide},System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get a list of open orders
            <para><a href="https://docs.coinex.com/api/v2/futures/order/http/list-pending-order" /></para>
            </summary>
            <param name="symbol">Filter by symbol, for example `ETHUSDT`</param>
            <param name="side">Filter by side</param>
            <param name="clientOrderId">Filter by client order id</param>
            <param name="page">Page number</param>
            <param name="pageSize">Page size</param>
            <param name="ct">Cancelation Token</param>
            <returns></returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.FuturesApi.ICoinExRestClientFuturesApiTrading.GetClosedOrdersAsync(System.String,System.Nullable{CoinEx.Net.Enums.OrderSide},System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get a list of closed orders. Note that orders canceled without having any trades will not be returned
            <para><a href="https://docs.coinex.com/api/v2/futures/order/http/list-finished-order" /></para>
            </summary>
            <param name="symbol">Filter by symbol, for example `ETHUSDT`</param>
            <param name="side">Filter by side</param>
            <param name="clientOrderId">Filter by client order id</param>
            <param name="page">Page number</param>
            <param name="pageSize">Page size</param>
            <param name="ct">Cancelation Token</param>
            <returns></returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.FuturesApi.ICoinExRestClientFuturesApiTrading.GetOpenStopOrdersAsync(System.String,System.Nullable{CoinEx.Net.Enums.OrderSide},System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get a list of open stop orders
            <para><a href="https://docs.coinex.com/api/v2/futures/order/http/list-pending-stop-order" /></para>
            </summary>
            <param name="symbol">Filter by symbol, for example `ETHUSDT`</param>
            <param name="side">Filter by side</param>
            <param name="clientOrderId">Filter by client order id</param>
            <param name="page">Page number</param>
            <param name="pageSize">Page size</param>
            <param name="ct">Cancelation Token</param>
            <returns></returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.FuturesApi.ICoinExRestClientFuturesApiTrading.GetClosedStopOrdersAsync(System.String,System.Nullable{CoinEx.Net.Enums.OrderSide},System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get a list of closed stop orders. Note that orders canceled without having any trades will not be returned
            <para><a href="https://docs.coinex.com/api/v2/futures/order/http/list-finished-stop-order" /></para>
            </summary>
            <param name="symbol">Filter by symbol, for example `ETHUSDT`</param>
            <param name="side">Filter by side</param>
            <param name="clientOrderId">Filter by client order id</param>
            <param name="page">Page number</param>
            <param name="pageSize">Page size</param>
            <param name="ct">Cancelation Token</param>
            <returns></returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.FuturesApi.ICoinExRestClientFuturesApiTrading.EditOrderAsync(System.String,System.Int64,System.Decimal,System.Nullable{System.Decimal},System.Threading.CancellationToken)">
            <summary>
            Edit an active order
            <para><a href="https://docs.coinex.com/api/v2/futures/order/http/edit-order" /></para>
            </summary>
            <param name="symbol">Symbol, for example `ETHUSDT`</param>
            <param name="orderId">Order id</param>
            <param name="quantity">New quantity</param>
            <param name="price">New price</param>
            <param name="ct">Cancelation Token</param>
            <returns></returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.FuturesApi.ICoinExRestClientFuturesApiTrading.EditStopOrderAsync(System.String,System.Int64,System.Decimal,System.Decimal,System.Nullable{System.Decimal},System.Threading.CancellationToken)">
            <summary>
            Edit an active stop order
            <para><a href="https://docs.coinex.com/api/v2/futures/order/http/edit-stop-order" /></para>
            </summary>
            <param name="symbol">Symbol, for example `ETHUSDT`</param>
            <param name="stopOrderId">Order id</param>
            <param name="quantity">New quantity</param>
            <param name="price">New price</param>
            <param name="triggerPrice">New trigger price</param>
            <param name="ct">Cancelation Token</param>
            <returns></returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.FuturesApi.ICoinExRestClientFuturesApiTrading.CancelAllOrdersAsync(System.String,System.Nullable{CoinEx.Net.Enums.OrderSide},System.Threading.CancellationToken)">
            <summary>
            Cancel all orders for a symbol
            <para><a href="https://docs.coinex.com/api/v2/futures/order/http/cancel-all-order" /></para>
            </summary>
            <param name="symbol">Symbol, for example `ETHUSDT`</param>
            <param name="side">Only cancel a specific order side</param>
            <param name="ct">Cancelation Token</param>
            <returns></returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.FuturesApi.ICoinExRestClientFuturesApiTrading.CancelOrderAsync(System.String,System.Int64,System.Threading.CancellationToken)">
            <summary>
            Cancel an active order
            <para><a href="https://docs.coinex.com/api/v2/futures/order/http/cancel-order" /></para>
            </summary>
            <param name="symbol">Symbol, for example `ETHUSDT`</param>
            <param name="orderId">Id of order to cancel</param>
            <param name="ct">Cancelation Token</param>
            <returns></returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.FuturesApi.ICoinExRestClientFuturesApiTrading.CancelStopOrderAsync(System.String,System.Int64,System.Threading.CancellationToken)">
            <summary>
            Cancel an active stop order
            <para><a href="https://docs.coinex.com/api/v2/futures/order/http/cancel-stop-order" /></para>
            </summary>
            <param name="symbol">Symbol, for example `ETHUSDT`</param>
            <param name="stopOrderId">Id of stop order to cancel</param>
            <param name="ct">Cancelation Token</param>
            <returns></returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.FuturesApi.ICoinExRestClientFuturesApiTrading.CancelOrderByClientOrderIdAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Cancel an active order by its client order id
            <para><a href="https://docs.coinex.com/api/v2/futures/order/http/cancel-order-by-client-id" /></para>
            </summary>
            <param name="symbol">Symbol, for example `ETHUSDT`</param>
            <param name="clientOrderId">Client order id of order to cancel</param>
            <param name="ct">Cancelation Token</param>
            <returns></returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.FuturesApi.ICoinExRestClientFuturesApiTrading.CancelStopOrderByClientOrderIdAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Cancel an active stop order by its client order id
            <para><a href="https://docs.coinex.com/api/v2/futures/order/http/cancel-stop-order-by-client-id" /></para>
            </summary>
            <param name="symbol">Symbol, for example `ETHUSDT`</param>
            <param name="clientStopOrderId">Client order id of stop order to cancel</param>
            <param name="ct">Cancelation Token</param>
            <returns></returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.FuturesApi.ICoinExRestClientFuturesApiTrading.CancelOrdersAsync(System.String,System.Collections.Generic.IEnumerable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Cancel multiple orders
            <para><a href="https://docs.coinex.com/api/v2/futures/order/http/cancel-batch-order" /></para>
            </summary>
            <param name="symbol">Symbol, for example `ETHUSDT`</param>
            <param name="orderIds">Ids of orders to cancel</param>
            <param name="ct">Cancelation Token</param>
            <returns></returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.FuturesApi.ICoinExRestClientFuturesApiTrading.CancelStopOrdersAsync(System.String,System.Collections.Generic.IEnumerable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Cancel multiple stop orders
            <para><a href="https://docs.coinex.com/api/v2/futures/order/http/cancel-batch-stop-order" /></para>
            </summary>
            <param name="symbol">Symbol, for example `ETHUSDT`</param>
            <param name="orderIds">Ids of stop orders to cancel</param>
            <param name="ct">Cancelation Token</param>
            <returns></returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.FuturesApi.ICoinExRestClientFuturesApiTrading.GetUserTradesAsync(System.String,System.Nullable{CoinEx.Net.Enums.OrderSide},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get trade list
            <para><a href="https://docs.coinex.com/api/v2/futures/deal/http/list-user-deals" /></para>
            </summary>
            <param name="symbol">Symbol, for example `ETHUSDT`</param>
            <param name="side">Filter by side</param>
            <param name="startTime">Filter by start time</param>
            <param name="endTime">Filter by end time</param>
            <param name="page">Page number</param>
            <param name="pageSize">Page size</param>
            <param name="ct">Cancelation Token</param>
            <returns></returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.FuturesApi.ICoinExRestClientFuturesApiTrading.GetOrderTradesAsync(System.String,System.Int64,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get trades for a specific order
            <para><a href="https://docs.coinex.com/api/v2/futures/deal/http/list-user-order-deals" /></para>
            </summary>
            <param name="symbol">Symbol, for example `ETHUSDT`</param>
            <param name="orderId">The order id</param>
            <param name="page">Page number</param>
            <param name="pageSize">Page size</param>
            <param name="ct">Cancelation Token</param>
            <returns></returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.FuturesApi.ICoinExRestClientFuturesApiTrading.GetPositionsAsync(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get user positions
            <para><a href="https://docs.coinex.com/api/v2/futures/position/http/list-pending-position" /></para>
            </summary>
            <param name="symbol">Symbol, for example `ETHUSDT`</param>
            <param name="page">Page number</param>
            <param name="pageSize">Page size</param>
            <param name="ct">Cancelation Token</param>
            <returns></returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.FuturesApi.ICoinExRestClientFuturesApiTrading.GetPositionHistoryAsync(System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get position history
            <para><a href="https://docs.coinex.com/api/v2/futures/position/http/list-finished-position" /></para>
            </summary>
            <param name="symbol">Symbol, for example `ETHUSDT`</param>
            <param name="startTime">Filter by start time</param>
            <param name="endTime">Filter by end time</param>
            <param name="page">Page number</param>
            <param name="pageSize">Page size</param>
            <param name="ct">Cancelation Token</param>
            <returns></returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.FuturesApi.ICoinExRestClientFuturesApiTrading.ClosePositionAsync(System.String,CoinEx.Net.Enums.OrderTypeV2,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.String,System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            (partially) Close an open position
            <para><a href="https://docs.coinex.com/api/v2/futures/position/http/close-position" /></para>
            </summary>
            <param name="symbol">Symbol, for example `ETHUSDT`</param>
            <param name="orderType">Order type to use</param>
            <param name="price">Price of the order</param>
            <param name="quantity">Quantity to close</param>
            <param name="clientOrderId">Client order id</param>
            <param name="hidden">Is hidden</param>
            <param name="ct">Cancelation Token</param>
            <returns></returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.FuturesApi.ICoinExRestClientFuturesApiTrading.AdjustPositionMarginAsync(System.String,System.Decimal,System.Threading.CancellationToken)">
            <summary>
            Adjust the margin for a position. Positive quantity for increasing, negative quantity for decreasing
            <para><a href="https://docs.coinex.com/api/v2/futures/position/http/close-position" /></para>
            </summary>
            <param name="symbol">Symbol, for example `ETHUSDT`</param>
            <param name="quantity">Quantity to increase (positive number) or decrease (negative number)</param>
            <param name="ct">Cancelation Token</param>
            <returns></returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.FuturesApi.ICoinExRestClientFuturesApiTrading.SetStopLossAsync(System.String,CoinEx.Net.Enums.PriceType,System.Decimal,System.Threading.CancellationToken)">
            <summary>
            Set stop loss for a position
            <para><a href="https://docs.coinex.com/api/v2/futures/position/http/set-position-stop-loss" /></para>
            </summary>
            <param name="symbol">Symbol, for example `ETHUSDT`</param>
            <param name="stopLossType">Stop loss price type</param>
            <param name="stopLossPrice">Stop loss price</param>
            <param name="ct">Cancelation Token</param>
            <returns></returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.FuturesApi.ICoinExRestClientFuturesApiTrading.SetTakeProfitAsync(System.String,CoinEx.Net.Enums.PriceType,System.Decimal,System.Threading.CancellationToken)">
            <summary>
            Set take profit for a position
            <para><a href="https://docs.coinex.com/api/v2/futures/position/http/set-position-take-profit" /></para>
            </summary>
            <param name="symbol">Symbol, for example `ETHUSDT`</param>
            <param name="takeProfitType">Take profit price type</param>
            <param name="takeProfitPrice">Take profit price</param>
            <param name="ct">Cancelation Token</param>
            <returns></returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.FuturesApi.ICoinExRestClientFuturesApiTrading.GetMarginHistoryAsync(System.String,System.Int64,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get margin adjustment history
            <para><a href="https://docs.coinex.com/api/v2/futures/position/http/set-position-take-profit" /></para>
            </summary>
            <param name="symbol">Symbol, for example `ETHUSDT`</param>
            <param name="positionId">Position id</param>
            <param name="startTime">Filter by start time</param>
            <param name="endTime">Filter by end time</param>
            <param name="page">Page number</param>
            <param name="pageSize">Page size</param>
            <param name="ct">Cancelation Token</param>
            <returns></returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.FuturesApi.ICoinExRestClientFuturesApiTrading.GetFundingRateHistoryAsync(System.String,System.Int64,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get funding rate history
            <para><a href="https://docs.coinex.com/api/v2/futures/position/http/list-position-funding-history" /></para>
            </summary>
            <param name="symbol">Symbol, for example `ETHUSDT`</param>
            <param name="positionId">Position id</param>
            <param name="startTime">Filter by start time</param>
            <param name="endTime">Filter by end time</param>
            <param name="page">Page number</param>
            <param name="pageSize">Page size</param>
            <param name="ct">Cancelation Token</param>
            <returns></returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.FuturesApi.ICoinExRestClientFuturesApiTrading.GetAutoDeleverageHistoryAsync(System.String,System.Int64,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get auto deleveraging history
            <para><a href="https://docs.coinex.com/api/v2/futures/position/http/list-positiing-adl-history" /></para>
            </summary>
            <param name="symbol">Symbol, for example `ETHUSDT`</param>
            <param name="positionId">Position id</param>
            <param name="startTime">Filter by start time</param>
            <param name="endTime">Filter by end time</param>
            <param name="page">Page number</param>
            <param name="pageSize">Page size</param>
            <param name="ct">Cancelation Token</param>
            <returns></returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.FuturesApi.ICoinExRestClientFuturesApiTrading.GetAutoSettlementHistoryAsync(System.String,System.Int64,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get position settlement history
            <para><a href="https://docs.coinex.com/api/v2/futures/position/http/list-position-settle-history" /></para>
            </summary>
            <param name="symbol">Symbol, for example `ETHUSDT`</param>
            <param name="positionId">Position id</param>
            <param name="startTime">Filter by start time</param>
            <param name="endTime">Filter by end time</param>
            <param name="page">Page number</param>
            <param name="pageSize">Page size</param>
            <param name="ct">Cancelation Token</param>
            <returns></returns>
        </member>
        <member name="T:CoinEx.Net.Interfaces.Clients.FuturesApi.ICoinExSocketClientFuturesApi">
            <summary>
            Futures streams
            </summary>
        </member>
        <member name="P:CoinEx.Net.Interfaces.Clients.FuturesApi.ICoinExSocketClientFuturesApi.SharedClient">
            <summary>
            Get the shared socket subscription client. This interface is shared with other exhanges to allow for a common implementation for different exchanges.
            </summary>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.FuturesApi.ICoinExSocketClientFuturesApi.SubscribeToTickerUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{System.Collections.Generic.IEnumerable{CoinEx.Net.Objects.Models.V2.CoinExFuturesTickerUpdate}}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to symbol ticker updates for all symbols. Note that only one ticker subscription can be active at the same time; new ticker subscription will override the old subscriptions.
            <para><a href="https://docs.coinex.com/api/v2/futures/market/ws/market-state" /></para>
            </summary>
            <param name="symbols">The symbols to subscribe, for example `ETHUSDT`</param>
            <param name="onMessage">Data handler</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.FuturesApi.ICoinExSocketClientFuturesApi.SubscribeToTickerUpdatesAsync(System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{System.Collections.Generic.IEnumerable{CoinEx.Net.Objects.Models.V2.CoinExFuturesTickerUpdate}}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to symbol ticker updates for all symbols. Note that only one ticker subscription can be active at the same time; new ticker subscription will override the old subscriptions.
            <para><a href="https://docs.coinex.com/api/v2/futures/market/ws/market-state" /></para>
            </summary>
            <param name="onMessage">Data handler</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.FuturesApi.ICoinExSocketClientFuturesApi.SubscribeToOrderBookUpdatesAsync(System.String,System.Int32,System.String,System.Boolean,System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{CoinEx.Net.Objects.Models.V2.CoinExOrderBook}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to order book updates
            <para><a href="https://docs.coinex.com/api/v2/futures/market/ws/market-depth" /></para>
            </summary>
            <param name="symbol">Symbol, for example `ETHUSDT`</param>
            <param name="depth">Order book depth, 5, 10, 20 or 50</param>
            <param name="mergeLevel">The merge level, 0.00000000001 up to 1000, 0 for no merging</param>
            <param name="fullBookUpdates">Whether updates should provide full update or only updates</param>
            <param name="onMessage">Data handler</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.FuturesApi.ICoinExSocketClientFuturesApi.SubscribeToOrderBookUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},System.Int32,System.String,System.Boolean,System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{CoinEx.Net.Objects.Models.V2.CoinExOrderBook}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to order book updates
            <para><a href="https://docs.coinex.com/api/v2/futures/market/ws/market-depth" /></para>
            </summary>
            <param name="symbols">Symbols, for example `ETHUSDT`</param>
            <param name="depth">Order book depth, 5, 10, 20 or 50</param>
            <param name="mergeLevel">The merge level, 0.00000000001 up to 1000, 0 for no merging</param>
            <param name="fullBookUpdates">Whether updates should provide full update or only updates</param>
            <param name="onMessage">Data handler</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.FuturesApi.ICoinExSocketClientFuturesApi.SubscribeToTradeUpdatesAsync(System.String,System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{System.Collections.Generic.IEnumerable{CoinEx.Net.Objects.Models.V2.CoinExTrade}}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to live trade updates
            <para><a href="https://docs.coinex.com/api/v2/futures/market/ws/market-deals" /></para>
            </summary>
            <param name="symbol">Symbol, for example `ETHUSDT`</param>
            <param name="onMessage">Data handler</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.FuturesApi.ICoinExSocketClientFuturesApi.SubscribeToTradeUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{System.Collections.Generic.IEnumerable{CoinEx.Net.Objects.Models.V2.CoinExTrade}}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to live trade updates
            <para><a href="https://docs.coinex.com/api/v2/futures/market/ws/market-deals" /></para>
            </summary>
            <param name="symbols">Symbols, for example `ETHUSDT`</param>
            <param name="onMessage">Data handler</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.FuturesApi.ICoinExSocketClientFuturesApi.SubscribeToTradeUpdatesAsync(System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{System.Collections.Generic.IEnumerable{CoinEx.Net.Objects.Models.V2.CoinExTrade}}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to live trade updates
            <para><a href="https://docs.coinex.com/api/v2/futures/market/ws/market-deals" /></para>
            </summary>
            <param name="onMessage">Data handler</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.FuturesApi.ICoinExSocketClientFuturesApi.SubscribeToIndexPriceUpdatesAsync(System.String,System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{CoinEx.Net.Objects.Models.V2.CoinExIndexPriceUpdate}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to index price updates
            <para><a href="https://docs.coinex.com/api/v2/futures/market/ws/market-index" /></para>
            </summary>
            <param name="symbol">Symbol, for example `ETHUSDT`</param>
            <param name="onMessage">Data handler</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.FuturesApi.ICoinExSocketClientFuturesApi.SubscribeToIndexPriceUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{CoinEx.Net.Objects.Models.V2.CoinExIndexPriceUpdate}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to index price updates
            <para><a href="https://docs.coinex.com/api/v2/futures/market/ws/market-index" /></para>
            </summary>
            <param name="symbols">Symbols, for example `ETHUSDT`</param>
            <param name="onMessage">Data handler</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.FuturesApi.ICoinExSocketClientFuturesApi.SubscribeToBookPriceUpdatesAsync(System.String,System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{CoinEx.Net.Objects.Models.V2.CoinExBookPriceUpdate}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to book price updates
            <para><a href="https://docs.coinex.com/api/v2/futures/market/ws/market-bbo" /></para>
            </summary>
            <param name="symbol">Symbol, for example `ETHUSDT`</param>
            <param name="onMessage">Data handler</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.FuturesApi.ICoinExSocketClientFuturesApi.SubscribeToBookPriceUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{CoinEx.Net.Objects.Models.V2.CoinExBookPriceUpdate}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to book price updates
            <para><a href="https://docs.coinex.com/api/v2/futures/market/ws/market-bbo" /></para>
            </summary>
            <param name="symbols">Symbols, for example `ETHUSDT`</param>
            <param name="onMessage">Data handler</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.FuturesApi.ICoinExSocketClientFuturesApi.SubscribeToOrderUpdatesAsync(System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{CoinEx.Net.Objects.Models.V2.CoinExFuturesOrderUpdate}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to user order updates
            <para><a href="https://docs.coinex.com/api/v2/futures/order/ws/user-order" /></para>
            </summary>
            <param name="onMessage">Data handler</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.FuturesApi.ICoinExSocketClientFuturesApi.SubscribeToStopOrderUpdatesAsync(System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{CoinEx.Net.Objects.Models.V2.CoinExStopOrderUpdate}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to user stop order updates
            <para><a href="https://docs.coinex.com/api/v2/futures/order/ws/user-stop-order" /></para>
            </summary>
            <param name="onMessage">Data handler</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.FuturesApi.ICoinExSocketClientFuturesApi.SubscribeToUserTradeUpdatesAsync(System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{CoinEx.Net.Objects.Models.V2.CoinExUserTrade}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to user trade updates
            <para><a href="https://docs.coinex.com/api/v2/futures/deal/ws/user-deals" /></para>
            </summary>
            <param name="onMessage">Data handler</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.FuturesApi.ICoinExSocketClientFuturesApi.SubscribeToBalanceUpdatesAsync(System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{System.Collections.Generic.IEnumerable{CoinEx.Net.Objects.Models.V2.CoinExFuturesBalance}}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to user balance updates
            <para><a href="https://docs.coinex.com/api/v2/assets/balance/ws/futures_balance" /></para>
            </summary>
            <param name="onMessage">Data handler</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.FuturesApi.ICoinExSocketClientFuturesApi.SubscribeToPositionUpdatesAsync(System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{CoinEx.Net.Objects.Models.V2.CoinExPositionUpdate}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to user position updates
            <para><a href="https://docs.coinex.com/api/v2/futures/position/ws/user-position" /></para>
            </summary>
            <param name="onMessage">Data handler</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="T:CoinEx.Net.Interfaces.Clients.FuturesApi.ICoinExSocketClientFuturesApiShared">
            <summary>
            Get the shared socket subscription client. This interface is shared with other exhanges to allow for a common implementation for different exchanges.
            </summary>
        </member>
        <member name="T:CoinEx.Net.Interfaces.Clients.ICoinExRestClient">
            <summary>
            Client for accessing the CoinEx API. 
            </summary>
        </member>
        <member name="P:CoinEx.Net.Interfaces.Clients.ICoinExRestClient.SpotApi">
            <summary>
            DEPRECATED FROM 2024/09/25, USE SpotApiV2 INSTEAD
            </summary>
        </member>
        <member name="P:CoinEx.Net.Interfaces.Clients.ICoinExRestClient.SpotApiV2">
            <summary>
            Spot V2 API endpoints
            </summary>
        </member>
        <member name="P:CoinEx.Net.Interfaces.Clients.ICoinExRestClient.FuturesApi">
            <summary>
            Futures V2 API endpoints
            </summary>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.ICoinExRestClient.SetApiCredentials(CryptoExchange.Net.Authentication.ApiCredentials)">
            <summary>
            Set the API credentials for this client. All Api clients in this client will use the new credentials, regardless of earlier set options.
            </summary>
            <param name="credentials">The credentials to set</param>
        </member>
        <member name="T:CoinEx.Net.Interfaces.Clients.ICoinExSocketClient">
            <summary>
            Client for accessing the CoinEx websocket API
            </summary>
        </member>
        <member name="P:CoinEx.Net.Interfaces.Clients.ICoinExSocketClient.FuturesApi">
            <summary>
            V2 API Futures streams
            </summary>
        </member>
        <member name="P:CoinEx.Net.Interfaces.Clients.ICoinExSocketClient.SpotApiV2">
            <summary>
            V2 API Spot streams
            </summary>
        </member>
        <member name="P:CoinEx.Net.Interfaces.Clients.ICoinExSocketClient.SpotApi">
            <summary>
            DEPRECATED FROM 2024/09/25, USE SpotApiV2 INSTEAD
            </summary>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.ICoinExSocketClient.SetApiCredentials(CryptoExchange.Net.Authentication.ApiCredentials)">
            <summary>
            Set the API credentials for this client. All Api clients in this client will use the new credentials, regardless of earlier set options.
            </summary>
            <param name="credentials">The credentials to set</param>
        </member>
        <member name="T:CoinEx.Net.Interfaces.Clients.SpotApiV1.ICoinExRestClientSpotApi">
            <summary>
            Spot API
            </summary>
        </member>
        <member name="P:CoinEx.Net.Interfaces.Clients.SpotApiV1.ICoinExRestClientSpotApi.Account">
            <summary>
            DEPRECATED FROM 2024/09/25, USE SpotApiV2 INSTEAD
            </summary>
        </member>
        <member name="P:CoinEx.Net.Interfaces.Clients.SpotApiV1.ICoinExRestClientSpotApi.ExchangeData">
            <summary>
            DEPRECATED FROM 2024/09/25, USE SpotApiV2 INSTEAD
            </summary>
        </member>
        <member name="P:CoinEx.Net.Interfaces.Clients.SpotApiV1.ICoinExRestClientSpotApi.Trading">
            <summary>
            DEPRECATED FROM 2024/09/25, USE SpotApiV2 INSTEAD
            </summary>
        </member>
        <member name="P:CoinEx.Net.Interfaces.Clients.SpotApiV1.ICoinExRestClientSpotApi.CommonSpotClient">
            <summary>
            Get the ISpotClient for this client. This is a common interface which allows for some basic operations without knowing any details of the exchange.
            </summary>
            <returns></returns>
        </member>
        <member name="T:CoinEx.Net.Interfaces.Clients.SpotApiV1.ICoinExRestClientSpotApiAccount">
            <summary>
            CoinEx account endpoints. Account endpoints include balance info, withdraw/deposit info and requesting and account settings
            </summary>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.SpotApiV1.ICoinExRestClientSpotApiAccount.GetBalancesAsync(System.Threading.CancellationToken)">
            <summary>
            Retrieves a list of balances. Requires API credentials
            <para><a href="https://github.com/coinexcom/coinex_exchange_api/wiki/060balance" /></para>
            </summary>
            <param name="ct">Cancellation token</param>
            <returns>List of balances</returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.SpotApiV1.ICoinExRestClientSpotApiAccount.GetDepositHistoryAsync(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Retrieves a list of deposits. Requires API credentials and withdrawal permission on the API key
            <para><a href="https://github.com/coinexcom/coinex_exchange_api/wiki/065get_deposit_list" /></para>
            </summary>
            <param name="asset">The asset to get history for</param>
            <param name="page">The page in the results to retrieve</param>
            <param name="limit">The number of results to return per page</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.SpotApiV1.ICoinExRestClientSpotApiAccount.GetDepositAddressAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Get the deposit address of an asset
            <para><a href="https://github.com/coinexcom/coinex_exchange_api/wiki/072get_deposit_address" /></para>
            </summary>
            <param name="asset">The asset to deposit</param>
            <param name="smartContractName">Name of the network to use</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.SpotApiV1.ICoinExRestClientSpotApiAccount.GetWithdrawalHistoryAsync(System.String,System.Nullable{System.Int64},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Retrieves a list of withdrawals. Requires API credentials and withdrawal permission on the API key
            <para><a href="https://github.com/coinexcom/coinex_exchange_api/wiki/061get_withdraw_list" /></para>
            </summary>
            <param name="asset">The asset to get history for</param>
            <param name="withdrawId">Retrieve a withdrawal with a specific id</param>
            <param name="page">The page in the results to retrieve</param>
            <param name="limit">The number of results to return per page</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.SpotApiV1.ICoinExRestClientSpotApiAccount.WithdrawAsync(System.String,System.String,System.Boolean,System.Decimal,System.String,System.Threading.CancellationToken)">
            <summary>
            Withdraw assets from CoinEx to a specific address. Requires API credentials and withdrawal permission on the API key
            <para><a href="https://github.com/coinexcom/coinex_exchange_api/wiki/062submit_withdraw" /></para>
            </summary>
            <param name="asset">The asset to withdraw</param>
            <param name="localTransfer">Is it a local transfer between users or onchain</param>
            <param name="address">The address to withdraw to</param>
            <param name="quantity">The quantity to withdraw. This is the quantity AFTER fees have been deducted. For fee rates see https://www.coinex.com/fees </param>
            <param name="network">The network to use for the withdrawal</param>
            <param name="ct">Cancellation token</param>
            <returns>The withdrawal object</returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.SpotApiV1.ICoinExRestClientSpotApiAccount.CancelWithdrawalAsync(System.Int64,System.Threading.CancellationToken)">
            <summary>
            Cancel a specific withdrawal. Requires API credentials and withdrawal permission on the API key
            <para><a href="https://github.com/coinexcom/coinex_exchange_api/wiki/064cancel_withdraw" /></para>
            </summary>
            <param name="withdrawId">The id of the withdrawal to cancel</param>
            <param name="ct">Cancellation token</param>
            <returns>True if successful, false otherwise</returns>
        </member>
        <member name="T:CoinEx.Net.Interfaces.Clients.SpotApiV1.ICoinExRestClientSpotApiExchangeData">
            <summary>
            CoinEx exchange data endpoints. Exchange data includes market data (tickers, order books, etc) and system status.
            </summary>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.SpotApiV1.ICoinExRestClientSpotApiExchangeData.GetCurrencyRateAsync(System.Threading.CancellationToken)">
            <summary>
            Gets the exchange rates of currencies
            <para><a href="https://github.com/coinexcom/coinex_exchange_api/wiki/070currency_rate" /></para>
            </summary>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.SpotApiV1.ICoinExRestClientSpotApiExchangeData.GetAssetsAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the asset configs
            <para><a href="https://github.com/coinexcom/coinex_exchange_api/wiki/071asset_config" /></para>
            </summary>
            <param name="assetType">Optionally only return a certain type of asset, for example BCH</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.SpotApiV1.ICoinExRestClientSpotApiExchangeData.GetSymbolsAsync(System.Threading.CancellationToken)">
            <summary>
            Gets a list of symbols active on CoinEx
            <para><a href="https://github.com/coinexcom/coinex_exchange_api/wiki/020market" /></para>
            </summary>
            <param name="ct">Cancellation token</param>
            <returns>List of symbol names</returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.SpotApiV1.ICoinExRestClientSpotApiExchangeData.GetTickerAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the state of a specific symbol
            <para><a href="https://github.com/coinexcom/coinex_exchange_api/wiki/021ticker" /></para>
            </summary>
            <param name="symbol">The symbol to retrieve state for</param>
            <param name="ct">Cancellation token</param>
            <returns>The state of the symbol</returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.SpotApiV1.ICoinExRestClientSpotApiExchangeData.GetTickersAsync(System.Threading.CancellationToken)">
            <summary>
            Gets the states of all symbols
            <para><a href="https://github.com/coinexcom/coinex_exchange_api/wiki/021ticker" /></para>
            </summary>
            <param name="ct">Cancellation token</param>
            <returns>List of states for all symbols</returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.SpotApiV1.ICoinExRestClientSpotApiExchangeData.GetOrderBookAsync(System.String,System.Int32,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets the order book for a symbol
            <para><a href="https://github.com/coinexcom/coinex_exchange_api/wiki/022depth" /></para>
            </summary>
            <param name="symbol">The symbol to retrieve depth data for</param>
            <param name="mergeDepth">The depth of merging, based on 8 decimals. 1 mergeDepth will merge the last decimals of all order in the book, 7 will merge the last 7 decimals of all orders together</param>
            <param name="limit">The limit of results returned</param>
            <param name="ct">Cancellation token</param>
            <returns>Order book for a symbol</returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.SpotApiV1.ICoinExRestClientSpotApiExchangeData.GetTradeHistoryAsync(System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Gets the latest trades for a symbol
            <para><a href="https://github.com/coinexcom/coinex_exchange_api/wiki/023deals" /></para>
            </summary>
            <param name="symbol">The symbol to retrieve data for</param>
            <param name="fromId">The id from which on to return trades</param>
            <param name="ct">Cancellation token</param>
            <returns>List of trades for a symbol</returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.SpotApiV1.ICoinExRestClientSpotApiExchangeData.GetKlinesAsync(System.String,CoinEx.Net.Enums.KlineInterval,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Retrieves kline data for a specific symbol
            <para><a href="https://github.com/coinexcom/coinex_exchange_api/wiki/024kline" /></para>
            </summary>
            <param name="symbol">The symbol to retrieve klines for</param>
            <param name="interval">The interval of the candles</param>
            <param name="limit">Limit of the number of results</param>
            <param name="ct">Cancellation token</param>
            <returns>List of klines for a symbol</returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.SpotApiV1.ICoinExRestClientSpotApiExchangeData.GetSymbolInfoAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Retrieves market data for the exchange
            <para><a href="https://github.com/coinexcom/coinex_exchange_api/wiki/026market_single_info" /></para>
            </summary>
            <param name="symbol">The symbol to retrieve data for</param>
            <param name="ct">Cancellation token</param>
            <returns>List of market data for the exchange</returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.SpotApiV1.ICoinExRestClientSpotApiExchangeData.GetSymbolInfoAsync(System.Threading.CancellationToken)">
            <summary>
            Retrieves market data for the exchange
            <para><a href="https://github.com/coinexcom/coinex_exchange_api/wiki/025marketinfo" /></para>
            </summary>
            <param name="ct">Cancellation token</param>
            <returns>List of market data for the exchange</returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.SpotApiV1.ICoinExRestClientSpotApiExchangeData.GetMiningDifficultyAsync(System.Threading.CancellationToken)">
            <summary>
            Retrieve the mining difficulty. Requires API credentials
            <para><a href="https://github.com/coinexcom/coinex_exchange_api/wiki/0310mining_difficulty" /></para>
            </summary>
            <param name="ct">Cancellation token</param>
            <returns>Mining difficulty</returns>
        </member>
        <member name="T:CoinEx.Net.Interfaces.Clients.SpotApiV1.ICoinExRestClientSpotApiTrading">
            <summary>
            CoinEx trading endpoints, placing and mananging orders.
            </summary>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.SpotApiV1.ICoinExRestClientSpotApiTrading.PlaceOrderAsync(System.String,CoinEx.Net.Enums.OrderSide,CoinEx.Net.Enums.OrderType,System.Decimal,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Boolean},System.Nullable{CoinEx.Net.Enums.OrderOption},System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Places an order. This is a single method for multiple place order endpoints. The called endpoint depends on the provided order type.
            <para><a href="https://github.com/coinexcom/coinex_exchange_api/wiki/031limit_order" /></para>
            <para><a href="https://github.com/coinexcom/coinex_exchange_api/wiki/032market_order" /></para>
            <para><a href="https://github.com/coinexcom/coinex_exchange_api/wiki/03111stop_limit_order" /></para>
            <para><a href="https://github.com/coinexcom/coinex_exchange_api/wiki/033IOC_order" /></para>
            </summary>
            <param name="symbol">The symbol to place the order for</param>
            <param name="side">Order side</param>
            <param name="type">Order type</param>
            <param name="quantity">The quantity of the order</param>
            <param name="price">The price of a single unit of the order</param>
            <param name="orderOption">Option for the order</param>
            <param name="stopPrice">The stop-price of a single unit of the order</param>
            <param name="immediateOrCancel">True if the order should be filled immediately up on placing, otherwise it will be canceled</param>
            <param name="clientOrderId">Client id which can be used to match the order</param>
            <param name="sourceId">User defined number</param>
            <param name="ct">Cancellation token</param>
            <returns>Details of the order that was placed</returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.SpotApiV1.ICoinExRestClientSpotApiTrading.GetOpenOrdersAsync(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Retrieves a list of open orders for a symbol. Requires API credentials
            <para><a href="https://github.com/coinexcom/coinex_exchange_api/wiki/034pending" /></para>
            </summary>
            <param name="symbol">The symbol to retrieve the open orders for</param>
            <param name="page">The page of the resulting list</param>
            <param name="limit">The number of results per page</param>
            <param name="ct">Cancellation token</param>
            <returns>List of open orders for a symbol</returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.SpotApiV1.ICoinExRestClientSpotApiTrading.GetOpenStopOrdersAsync(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Retrieves a list of open stop orders for a symbol. Requires API credentials
            <para><a href="https://github.com/coinexcom/coinex_exchange_api/wiki/041stop_pending" /></para>
            </summary>
            <param name="symbol">The symbol to retrieve the open orders for</param>
            <param name="page">The page of the resulting list</param>
            <param name="limit">The number of results per page</param>
            <param name="ct">Cancellation token</param>
            <returns>List of open orders for a symbol</returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.SpotApiV1.ICoinExRestClientSpotApiTrading.GetClosedOrdersAsync(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Retrieves a list of executed orders for a symbol in the last 2 days. Requires API credentials
            <para><a href="https://github.com/coinexcom/coinex_exchange_api/wiki/036finished" /></para>
            </summary>
            <param name="symbol">The symbol to retrieve the open orders for</param>
            <param name="page">The page of the resulting list</param>
            <param name="limit">The number of results per page</param>
            <param name="ct">Cancellation token</param>
            <returns>List of executed orders for a symbol</returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.SpotApiV1.ICoinExRestClientSpotApiTrading.GetOrderAsync(System.String,System.Int64,System.Threading.CancellationToken)">
            <summary>
            Retrieves details of an order. Requires API credentials
            <para><a href="https://github.com/coinexcom/coinex_exchange_api/wiki/037order_status" /></para>
            </summary>
            <param name="orderId">The id of the order to retrieve</param>
            <param name="symbol">The symbol the order is for</param>
            <param name="ct">Cancellation token</param>
            <returns>Details of the order</returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.SpotApiV1.ICoinExRestClientSpotApiTrading.GetOrderTradesAsync(System.Int64,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Retrieves execution details of a specific order. Requires API credentials
            <para><a href="https://github.com/coinexcom/coinex_exchange_api/wiki/0311order_deals" /></para>
            </summary>
            <param name="orderId">The id of the order</param>
            <param name="page">The page of the resulting list</param>
            <param name="limit">The number of results per page</param>
            <param name="ct">Cancellation token</param>
            <returns>Details of an executed order</returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.SpotApiV1.ICoinExRestClientSpotApiTrading.GetUserTradesAsync(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets a list of trades you executed on a specific symbol. Requires API credentials
            <para><a href="https://github.com/coinexcom/coinex_exchange_api/wiki/039user_deals" /></para>
            </summary>
            <param name="symbol">The symbol to retrieve trades for</param>
            <param name="page">The page of the resulting list</param>
            <param name="limit">The number of results per page</param>
            <param name="ct">Cancellation token</param>
            <returns>List of trades for a symbol</returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.SpotApiV1.ICoinExRestClientSpotApiTrading.CancelOrderAsync(System.String,System.Int64,System.Threading.CancellationToken)">
            <summary>
            Cancels an order. Requires API credentials
            <para><a href="https://github.com/coinexcom/coinex_exchange_api/wiki/035cancel" /></para>
            </summary>
            <param name="symbol">The symbol the order is on</param>
            <param name="orderId">The id of the order to cancel</param>
            <param name="ct">Cancellation token</param>
            <returns>Details of the canceled order</returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.SpotApiV1.ICoinExRestClientSpotApiTrading.CancelAllStopOrdersAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Cancels all stop orders. Requires API credentials
            </summary>
            <param name="symbol">The symbol the orders are on</param>
            <param name="ct">Cancellation token</param>
            <returns>Execution statut</returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.SpotApiV1.ICoinExRestClientSpotApiTrading.CancelAllOrdersAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Cancels all orders. Requires API credentials
            <para><a href="https://github.com/coinexcom/coinex_exchange_api/wiki/0315cancel_all" /></para>
            </summary>
            <param name="symbol">The symbol the orders are on</param>
            <param name="ct">Cancellation token</param>
            <returns>Execution statut</returns>
        </member>
        <member name="T:CoinEx.Net.Interfaces.Clients.SpotApiV1.ICoinExSocketClientSpotApi">
            <summary>
            Spot streams
            </summary>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.SpotApiV1.ICoinExSocketClientSpotApi.PingAsync">
            <summary>
            Pings the server
            <para><a href="https://github.com/coinexcom/coinex_exchange_api/wiki/048ping" /></para>
            </summary>
            <returns>Success if server responded, error otherwise</returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.SpotApiV1.ICoinExSocketClientSpotApi.GetServerTimeAsync">
            <summary>
            Gets the server time
            <para><a href="https://github.com/coinexcom/coinex_exchange_api/wiki/049time" /></para>
            </summary>
            <returns>The server time</returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.SpotApiV1.ICoinExSocketClientSpotApi.GetTickerAsync(System.String,System.Int32)">
            <summary>
            Get the symbol ticker
            <para><a href="https://github.com/coinexcom/coinex_exchange_api/wiki/053state" /></para>
            </summary>
            <param name="symbol">The symbol to get the state for</param>
            <param name="cyclePeriod">The period to get data over, specified in seconds. i.e. one minute = 60, one day = 86400</param>
            <returns>Symbol state</returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.SpotApiV1.ICoinExSocketClientSpotApi.SubscribeToTickerUpdatesAsync(System.String,System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{CoinEx.Net.Objects.Models.Socket.CoinExSocketSymbolState}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to symbol ticker updates for a specific symbol
            <para><a href="https://github.com/coinexcom/coinex_exchange_api/wiki/053state" /></para>
            </summary>
            <param name="symbol">Symbol to receive updates for</param>
            <param name="onMessage">Data handler</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.SpotApiV1.ICoinExSocketClientSpotApi.SubscribeToAllTickerUpdatesAsync(System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{System.Collections.Generic.IEnumerable{CoinEx.Net.Objects.Models.Socket.CoinExSocketSymbolState}}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to ticker updates for all symbols
            <para><a href="https://github.com/coinexcom/coinex_exchange_api/wiki/053state" /></para>
            </summary>
            <param name="onMessage">Data handler</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.SpotApiV1.ICoinExSocketClientSpotApi.GetOrderBookAsync(System.String,System.Int32,System.Int32)">
            <summary>
            Get an order book
            <para><a href="https://github.com/coinexcom/coinex_exchange_api/wiki/044depth" /></para>
            </summary>
            <param name="symbol">The symbol to get the order book for</param>
            <param name="limit">The limit of results returned, 5, 10 or 20</param>
            <param name="mergeDepth">The depth of merging, based on 8 decimals. 1 mergeDepth will merge the last decimals of all order in the book, 7 will merge the last 7 decimals of all orders together</param>
            <returns>Order book of a symbol</returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.SpotApiV1.ICoinExSocketClientSpotApi.SubscribeToOrderBookUpdatesAsync(System.String,System.Int32,System.Int32,System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{CoinEx.Net.Objects.Models.Socket.CoinExSocketOrderBook}},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Subscribe to order book updates
            <para><a href="https://github.com/coinexcom/coinex_exchange_api/wiki/044depth" /></para>
            </summary>
            <param name="symbol">The symbol to receive updates for</param>
            <param name="limit">The limit of results to receive in a update</param>
            <param name="mergeDepth">The depth of merging, based on 8 decimals. 1 mergeDepth will merge the last decimals of all order in the book, 7 will merge the last 7 decimals of all orders together</param>
            <param name="diffUpdates">Set to true to get snapshot first, then diff updates</param>
            <param name="onMessage">Data handler</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.SpotApiV1.ICoinExSocketClientSpotApi.GetTradeHistoryAsync(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Gets the latest trades on a symbol
            <para><a href="https://github.com/coinexcom/coinex_exchange_api/wiki/045deals" /></para>
            </summary>
            <param name="symbol">The symbol to get the trades for</param>
            <param name="limit">The limit of trades</param>
            <param name="fromId">Return trades since this id</param>
            <returns>List of trades</returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.SpotApiV1.ICoinExSocketClientSpotApi.SubscribeToTradeUpdatesAsync(System.String,System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{System.Collections.Generic.IEnumerable{CoinEx.Net.Objects.Models.Socket.CoinExSocketSymbolTrade}}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to symbol trade updates for a symbol
            <para><a href="https://github.com/coinexcom/coinex_exchange_api/wiki/045deals" /></para>
            </summary>
            <param name="symbol">The symbol to receive updates from</param>
            <param name="onMessage">Data handler</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.SpotApiV1.ICoinExSocketClientSpotApi.GetKlinesAsync(System.String,CoinEx.Net.Enums.KlineInterval)">
            <summary>
            Gets symbol kline data
            <para><a href="https://github.com/coinexcom/coinex_exchange_api/wiki/046kline" /></para>
            </summary>
            <param name="symbol">The symbol to get the data for</param>
            <param name="interval">The interval of the candles</param>
            <returns></returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.SpotApiV1.ICoinExSocketClientSpotApi.GetBalancesAsync(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Get balances of assets. Requires API credentials
            <para><a href="https://github.com/coinexcom/coinex_exchange_api/wiki/051asset" /></para>
            </summary>
            <param name="assets">The assets to get the balances for, empty for all</param>
            <returns>Dictionary of assets and their balances</returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.SpotApiV1.ICoinExSocketClientSpotApi.SubscribeToBalanceUpdatesAsync(System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{System.Collections.Generic.IEnumerable{CoinEx.Net.Objects.Models.CoinExBalance}}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to updates of your balances, Receives updates whenever the balance for an asset changes
            <para><a href="https://github.com/coinexcom/coinex_exchange_api/wiki/051asset" /></para>
            </summary>
            <param name="onMessage">Data handler</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.SpotApiV1.ICoinExSocketClientSpotApi.GetOpenOrdersAsync(System.String,System.Nullable{CoinEx.Net.Enums.OrderSide},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Gets a list of open orders for a symbol
            <para><a href="https://github.com/coinexcom/coinex_exchange_api/wiki/052order" /></para>
            </summary>
            <param name="symbol">Symbol to get open orders for</param>
            <param name="side">Order side</param>
            <param name="offset">The offset in the list</param>
            <param name="limit">The limit of results</param>
            <returns>List of open orders</returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.SpotApiV1.ICoinExSocketClientSpotApi.SubscribeToOrderUpdatesAsync(System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{CoinEx.Net.Objects.Models.Socket.CoinExSocketOrderUpdate}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to updates of active orders. Receives updates whenever an order is placed, updated or finished
            <para><a href="https://github.com/coinexcom/coinex_exchange_api/wiki/052order" /></para>
            </summary>
            <param name="onMessage">Data handler</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.SpotApiV1.ICoinExSocketClientSpotApi.SubscribeToOrderUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{CoinEx.Net.Objects.Models.Socket.CoinExSocketOrderUpdate}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to updates of active orders. Receives updates whenever an order is placed, updated or finished
            <para><a href="https://github.com/coinexcom/coinex_exchange_api/wiki/052order" /></para>
            </summary>
            <param name="symbols">The symbols to receive order updates from</param>
            <param name="onMessage">Data handler</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="T:CoinEx.Net.Interfaces.Clients.SpotApiV2.ICoinExRestClientSpotApi">
            <summary>
            Spot API
            </summary>
        </member>
        <member name="P:CoinEx.Net.Interfaces.Clients.SpotApiV2.ICoinExRestClientSpotApi.Account">
            <summary>
            Endpoints related to account settings, info or actions
            </summary>
        </member>
        <member name="P:CoinEx.Net.Interfaces.Clients.SpotApiV2.ICoinExRestClientSpotApi.ExchangeData">
            <summary>
            Endpoints related to retrieving market and system data
            </summary>
        </member>
        <member name="P:CoinEx.Net.Interfaces.Clients.SpotApiV2.ICoinExRestClientSpotApi.Trading">
            <summary>
            Endpoints related to orders and trades
            </summary>
        </member>
        <member name="P:CoinEx.Net.Interfaces.Clients.SpotApiV2.ICoinExRestClientSpotApi.CommonSpotClient">
            <summary>
            DEPRECATED; use <see cref="T:CryptoExchange.Net.SharedApis.ISharedClient" /> instead for common/shared functionality. See <see href="https://jkorf.github.io/CryptoExchange.Net/docs/index.html#shared" /> for more info.
            </summary>
        </member>
        <member name="P:CoinEx.Net.Interfaces.Clients.SpotApiV2.ICoinExRestClientSpotApi.SharedClient">
            <summary>
            Get the shared rest requests client. This interface is shared with other exhanges to allow for a common implementation for different exchanges.
            </summary>
        </member>
        <member name="T:CoinEx.Net.Interfaces.Clients.SpotApiV2.ICoinExRestClientSpotApiAccount">
            <summary>
            CoinEx account endpoints. Account endpoints include balance info, withdraw/deposit info and requesting and account settings
            </summary>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.SpotApiV2.ICoinExRestClientSpotApiAccount.GetTradingFeesAsync(System.String,CoinEx.Net.Enums.AccountType,System.Threading.CancellationToken)">
            <summary>
            Get trading fees
            <para><a href="https://docs.coinex.com/api/v2/account/fees/http/get-account-trade-fees" /></para>
            </summary>
            <param name="symbol">Symbol name, for example `ETHUSDT`</param>
            <param name="accountType">Account type</param>
            <param name="ct">Cancelation token</param>
            <returns></returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.SpotApiV2.ICoinExRestClientSpotApiAccount.SetAccountConfigAsync(System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Update account settings
            <para><a href="https://docs.coinex.com/api/v2/account/settings/http/modify-account-settings" /></para>
            </summary>
            <param name="cetDiscountEnabled">Global switch for CET Deduction</param>
            <param name="ct">Cancelation token</param>
            <returns></returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.SpotApiV2.ICoinExRestClientSpotApiAccount.GetBalancesAsync(System.Threading.CancellationToken)">
            <summary>
            Get balances
            <para><a href="https://docs.coinex.com/api/v2/assets/balance/http/get-spot-balance" /></para>
            </summary>
            <param name="ct">Cancelation token</param>
            <returns></returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.SpotApiV2.ICoinExRestClientSpotApiAccount.GetMarginBalancesAsync(System.Threading.CancellationToken)">
            <summary>
            Get margin balances
            <para><a href="https://docs.coinex.com/api/v2/assets/balance/http/get-marigin-balance" /></para>
            </summary>
            <param name="ct">Cancelation token</param>
            <returns></returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.SpotApiV2.ICoinExRestClientSpotApiAccount.GetFinancialBalancesAsync(System.Threading.CancellationToken)">
            <summary>
            Get balances in the financial account
            <para><a href="https://docs.coinex.com/api/v2/assets/balance/http/get-financial-balance" /></para>
            </summary>
            <param name="ct">Cancelation token</param>
            <returns></returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.SpotApiV2.ICoinExRestClientSpotApiAccount.GetCreditAccountAsync(System.Threading.CancellationToken)">
            <summary>
            Get credit account info
            <para><a href="https://docs.coinex.com/api/v2/assets/balance/http/get-credit-info" /></para>
            </summary>
            <param name="ct">Cancelation token</param>
            <returns></returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.SpotApiV2.ICoinExRestClientSpotApiAccount.GetAutoMarketMakerAccountLiquidityAsync(System.Threading.CancellationToken)">
            <summary>
            Get automated market maker account liquidity
            <para><a href="https://docs.coinex.com/api/v2/assets/balance/http/get-amm-liquidity" /></para>
            </summary>
            <param name="ct">Cancelation token</param>
            <returns></returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.SpotApiV2.ICoinExRestClientSpotApiAccount.MarginBorrowAsync(System.String,System.String,System.Decimal,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Apply for margin borrowing
            <para><a href="https://docs.coinex.com/api/v2/assets/loan-flat/http/margin-borrow" /></para>
            </summary>
            <param name="symbol">Symbol, for example `ETHUSDT`</param>
            <param name="asset">Asset</param>
            <param name="quantity">Quantity to borrow</param>
            <param name="autoRenew">Whether to renew automatically. Automatic renewal means that after the loan expires, the system will renew the loan based on the latest borrowing interest rate and cycle.</param>
            <param name="ct">Cancelation token</param>
            <returns></returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.SpotApiV2.ICoinExRestClientSpotApiAccount.MarginRepayAsync(System.String,System.String,System.Decimal,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Repay a margin loan
            <para><a href="https://docs.coinex.com/api/v2/assets/loan-flat/http/margin-repay" /></para>
            </summary>
            <param name="symbol">Symbol, for example `ETHUSDT`</param>
            <param name="asset">Asset</param>
            <param name="quantity">Quantity to repay</param>
            <param name="borrowId">Loan record ID</param>
            <param name="ct">Cancelation token</param>
            <returns></returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.SpotApiV2.ICoinExRestClientSpotApiAccount.GetBorrowHistoryAsync(System.String,System.Nullable{CoinEx.Net.Enums.BorrowStatus},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get borrow history
            <para><a href="https://docs.coinex.com/api/v2/assets/loan-flat/http/list-margin-borrow-history" /></para>
            </summary>
            <param name="symbol">Filter by symbol, for example `ETHUSDT`</param>
            <param name="status">Filter by status</param>
            <param name="page">Page number</param>
            <param name="pageSize">Page size</param>
            <param name="ct">Cancelation token</param>
            <returns></returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.SpotApiV2.ICoinExRestClientSpotApiAccount.GetBorrowLimitAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Get borrow limits
            <para><a href="https://docs.coinex.com/api/v2/assets/loan-flat/http/list-margin-interest-limit" /></para>
            </summary>
            <param name="symbol">Symbol, for example `ETHUSDT`</param>
            <param name="asset">Asset</param>
            <param name="ct">Cancelation token</param>
            <returns></returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.SpotApiV2.ICoinExRestClientSpotApiAccount.GetDepositAddressAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Get the deposit address for an asset
            <para><a href="https://docs.coinex.com/api/v2/assets/deposit-withdrawal/http/get-deposit-address" /></para>
            </summary>
            <param name="asset">The asset to deposit, for example `ETH`</param>
            <param name="network">Network</param>
            <param name="ct">Cancelation token</param>
            <returns></returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.SpotApiV2.ICoinExRestClientSpotApiAccount.RenewDepositAddressAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Renew deposit address
            <para><a href="https://docs.coinex.com/api/v2/assets/deposit-withdrawal/http/update-deposit-address" /></para>
            </summary>
            <param name="asset">The asset, for example `ETH`</param>
            <param name="network">Network</param>
            <param name="ct">Cancelation token</param>
            <returns></returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.SpotApiV2.ICoinExRestClientSpotApiAccount.GetDepositHistoryAsync(System.String,System.String,System.Nullable{CoinEx.Net.Enums.DepositStatus},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get deposit history
            <para><a href="https://docs.coinex.com/api/v2/assets/deposit-withdrawal/http/list-deposit-history" /></para>
            </summary>
            <param name="asset">Asset, for example `ETH`</param>
            <param name="transactionId">Filter by transaction id</param>
            <param name="status">Filter by status</param>
            <param name="page">Page number</param>
            <param name="pageSize">Page size</param>
            <param name="ct">Cancelation token</param>
            <returns></returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.SpotApiV2.ICoinExRestClientSpotApiAccount.WithdrawAsync(System.String,System.Decimal,System.String,System.Nullable{CoinEx.Net.Enums.MovementMethod},System.String,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            Withdraw funds to an external address or another CoinEx user
            <para><a href="https://docs.coinex.com/api/v2/assets/deposit-withdrawal/http/withdrawal" /></para>
            </summary>
            <param name="asset">Asset to withdraw, for example `ETH`</param>
            <param name="quantity">Withdrawal quantity</param>
            <param name="toAddress">Withdrawal address.The withdrawal address needs to be added to the IP whitelist via Developer Console</param>
            <param name="method">Withdrawal methods (On-chain or inter-user transfer). Default as on-chain withdrawal</param>
            <param name="network">Network name. Required for On-chain, not required for inter-user transfer</param>
            <param name="remark">Withdrawal note</param>
            <param name="memo">Memo for the withdrawal, required for some deposits</param>
            <param name="extraParameters">If it is a withdrawal from the KDA chain, you need to append the chain_id field to the extra field</param>
            <param name="ct">Cancelation token</param>
            <returns></returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.SpotApiV2.ICoinExRestClientSpotApiAccount.CancelWithdrawalAsync(System.Int64,System.Threading.CancellationToken)">
            <summary>
            Cancel a pending withdrawal
            <para><a href="https://docs.coinex.com/api/v2/assets/deposit-withdrawal/http/cancel-withdrawal" /></para>
            </summary>
            <param name="withdrawalId">The withdrawal id</param>
            <param name="ct">Cancelation token</param>
            <returns></returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.SpotApiV2.ICoinExRestClientSpotApiAccount.GetWithdrawalHistoryAsync(System.String,System.Nullable{System.Int64},System.Nullable{CoinEx.Net.Enums.WithdrawStatus},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get withdrawal history
            <para><a href="https://docs.coinex.com/api/v2/assets/deposit-withdrawal/http/list-withdrawal-history" /></para>
            </summary>
            <param name="asset">Filter by asset, for example `ETH`</param>
            <param name="withdrawId">Filter by withdrawal id</param>
            <param name="status">Filter by status</param>
            <param name="page">Page number</param>
            <param name="pageSize">Page size</param>
            <param name="ct">Cancelation token</param>
            <returns></returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.SpotApiV2.ICoinExRestClientSpotApiAccount.GetDepositWithdrawalConfigAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Get withdraw and deposit information for an asset
            <para><a href="https://docs.coinex.com/api/v2/assets/deposit-withdrawal/http/get-deposit-withdrawal-config" /></para>
            </summary>
            <param name="asset">The asset, for example `ETH`</param>
            <param name="ct">Cancelation token</param>
            <returns></returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.SpotApiV2.ICoinExRestClientSpotApiAccount.TransferAsync(System.String,CoinEx.Net.Enums.AccountType,CoinEx.Net.Enums.AccountType,System.Decimal,System.String,System.Threading.CancellationToken)">
            <summary>
            Transfer between accounts
            <para><a href="https://docs.coinex.com/api/v2/assets/transfer/http/transfer" /></para>
            </summary>
            <param name="asset">Asset to transfer, for example `ETH`</param>
            <param name="fromAccount">From account</param>
            <param name="toAccount">To account</param>
            <param name="quantity">Quantity to transfer</param>
            <param name="marginSymbol">Margin symbol, only needed when from or to account type is Margin</param>
            <param name="ct">Cancelation token</param>
            <returns></returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.SpotApiV2.ICoinExRestClientSpotApiAccount.GetTransfersAsync(System.String,CoinEx.Net.Enums.AccountType,System.String,System.Nullable{CoinEx.Net.Enums.TransferStatus},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get transfer history
            <para><a href="https://docs.coinex.com/api/v2/assets/transfer/http/list-transfer-history" /></para>
            </summary>
            <param name="asset">Asset, for example `ETH`</param>
            <param name="transferType">Transfer type. Must be either Margin or Futures</param>
            <param name="marginSymbol">Filter by margin symbol</param>
            <param name="status">Filter by status</param>
            <param name="startTime">Filter by start time</param>
            <param name="endTime">Filter by end time</param>
            <param name="page">Page number</param>
            <param name="pageSize">Page size</param>
            <param name="ct">Cancelation token</param>
            <returns></returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.SpotApiV2.ICoinExRestClientSpotApiAccount.AddAutoMarketMakerLiquidityAsync(System.String,System.Decimal,System.Decimal,System.Threading.CancellationToken)">
            <summary>
            Add AAM liquidity
            <para><a href="https://docs.coinex.com/api/v2/assets/amm/http/add-liquidtiy" /></para>
            </summary>
            <param name="symbol">Symbol, for example `ETH`</param>
            <param name="baseAssetQuantity">Base asset quantity to add</param>
            <param name="quoteAssetQuantity">Quote asset quantity to add</param>
            <param name="ct">Cancelation token</param>
            <returns></returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.SpotApiV2.ICoinExRestClientSpotApiAccount.RemoveAutoMarketMakerLiquidityAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Remove AAM liquidity. Currently only support withdrawing all liquidity
            <para><a href="https://docs.coinex.com/api/v2/assets/amm/http/remove-liquidtiy" /></para>
            </summary>
            <param name="symbol">Symbol, for example `ETHUSDT`</param>
            <param name="ct">Cancelation token</param>
            <returns></returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.SpotApiV2.ICoinExRestClientSpotApiAccount.GetTransactionHistoryAsync(CoinEx.Net.Enums.TransactionType,System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get account transaction history
            <para><a href="https://docs.coinex.com/api/v2/assets/balance/http/get-spot-transcation-history" /></para>
            </summary>
            <param name="transactionType"></param>
            <param name="asset">Filter by asset, for example `ETH`</param>
            <param name="startTime">Filter by start time</param>
            <param name="endTime">Filter by end time</param>
            <param name="page">Page</param>
            <param name="pageSize">Page size</param>
            <param name="ct">Cancelation token</param>
            <returns></returns>
        </member>
        <member name="T:CoinEx.Net.Interfaces.Clients.SpotApiV2.ICoinExRestClientSpotApiExchangeData">
            <summary>
            CoinEx exchange data endpoints. Exchange data includes market data (tickers, order books, etc) and system status.
            </summary>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.SpotApiV2.ICoinExRestClientSpotApiExchangeData.GetServerTimeAsync(System.Threading.CancellationToken)">
            <summary>
            Get server time
            </summary>
            <para><a href="https://docs.coinex.com/api/v2/common/http/time" /></para>
            <param name="ct">Cancelation token</param>
            <returns></returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.SpotApiV2.ICoinExRestClientSpotApiExchangeData.GetSymbolsAsync(System.Threading.CancellationToken)">
            <summary>
            Get symbol information
            <para><a href="https://docs.coinex.com/api/v2/spot/market/http/list-market" /></para>
            </summary>
            <param name="ct">Cancelation Token</param>
            <returns></returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.SpotApiV2.ICoinExRestClientSpotApiExchangeData.GetAssetsAsync(System.Threading.CancellationToken)">
            <summary>
            Get asset information
            <para><a href="https://docs.coinex.com/api/v2/assets/deposit-withdrawal/http/list-assets-info" /></para>
            </summary>
            <param name="ct">Cancelation Token</param>
            <returns></returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.SpotApiV2.ICoinExRestClientSpotApiExchangeData.GetTickersAsync(System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <summary>
            Get symbol tickers
            <para><a href="https://docs.coinex.com/api/v2/spot/market/http/list-market-ticker" /></para>
            </summary>
            <param name="symbols">Fitler by symbol names, for example `ETHUSDT`</param>
            <param name="ct">Cancelation Token</param>
            <returns></returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.SpotApiV2.ICoinExRestClientSpotApiExchangeData.GetOrderBookAsync(System.String,System.Int32,System.String,System.Threading.CancellationToken)">
            <summary>
            Get the orderbook for a symbol
            <para><a href="https://docs.coinex.com/api/v2/spot/market/http/list-market-depth" /></para>
            </summary>
            <param name="symbol">Symbol, for example `ETHUSDT`</param>
            <param name="limit">Amount of rows, 5, 10, 20 or 50</param>
            <param name="mergeLevel">The merge level, 0.00000000001 up to 1000, 0 for no merging</param>
            <param name="ct">Cancelation Token</param>
            <returns></returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.SpotApiV2.ICoinExRestClientSpotApiExchangeData.GetTradeHistoryAsync(System.String,System.Nullable{System.Int32},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Get the trade history for a symbol
            <para><a href="https://docs.coinex.com/api/v2/spot/market/http/list-market-deals" /></para>
            </summary>
            <param name="symbol">Symbol, for example `ETHUSDT`</param>
            <param name="limit">Max amount of results</param>
            <param name="lastId">The starting point of the query, 0 means to acquire from the latest record</param>
            <param name="ct">Cancelation Token</param>
            <returns></returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.SpotApiV2.ICoinExRestClientSpotApiExchangeData.GetKlinesAsync(System.String,CoinEx.Net.Enums.KlineInterval,System.Nullable{System.Int32},System.Nullable{CoinEx.Net.Enums.PriceType},System.Threading.CancellationToken)">
            <summary>
            Get klines/candlesticks
            <para><a href="https://docs.coinex.com/api/v2/spot/market/http/list-market-kline" /></para>
            </summary>
            <param name="symbol">Symbol, for example `ETHUSDT`</param>
            <param name="interval">Kline interval</param>
            <param name="limit">Max amount of results</param>
            <param name="priceType">Price type, either LastPrice(default) or IndexPrice</param>
            <param name="ct">Cancelation Token</param>
            <returns></returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.SpotApiV2.ICoinExRestClientSpotApiExchangeData.GetIndexPricesAsync(System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <summary>
            Get index prices
            <para><a href="https://docs.coinex.com/api/v2/spot/market/http/list-market-index" /></para>
            </summary>
            <param name="symbols">Filter by symbols, for example `ETHUSDT`</param>
            <param name="ct">Cancelation Token</param>
            <returns></returns>
        </member>
        <member name="T:CoinEx.Net.Interfaces.Clients.SpotApiV2.ICoinExRestClientSpotApiShared">
            <summary>
            Shared interface for Spot rest API usage
            </summary>
        </member>
        <member name="T:CoinEx.Net.Interfaces.Clients.SpotApiV2.ICoinExRestClientSpotApiTrading">
            <summary>
            CoinEx trading endpoints, placing and mananging orders.
            </summary>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.SpotApiV2.ICoinExRestClientSpotApiTrading.PlaceOrderAsync(System.String,CoinEx.Net.Enums.AccountType,CoinEx.Net.Enums.OrderSide,CoinEx.Net.Enums.OrderTypeV2,System.Decimal,System.Nullable{System.Decimal},System.String,System.String,System.Nullable{System.Boolean},System.Nullable{CoinEx.Net.Enums.SelfTradePreventionMode},System.Threading.CancellationToken)">
            <summary>
            Place a new order
            <para><a href="https://docs.coinex.com/api/v2/spot/order/http/put-order" /></para>
            </summary>
            <param name="symbol">The symbol, for example `ETHUSDT`</param>
            <param name="accountType">Account type, Spot or Margin</param>
            <param name="side">Order side</param>
            <param name="type">Order type</param>
            <param name="quantity">Quantity</param>
            <param name="price">Price of the order</param>
            <param name="quantityAsset">The asset the quantity is in, for market orders van be the base or quote asset</param>
            <param name="clientOrderId">Client order id</param>
            <param name="hide">Hide the order</param>
            <param name="stpMode">Self trade prevention mode</param>
            <param name="ct">Cancelation Token</param>
            <returns></returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.SpotApiV2.ICoinExRestClientSpotApiTrading.PlaceStopOrderAsync(System.String,CoinEx.Net.Enums.AccountType,CoinEx.Net.Enums.OrderSide,CoinEx.Net.Enums.OrderTypeV2,System.Decimal,System.Decimal,System.Nullable{System.Decimal},System.String,System.String,System.Nullable{System.Boolean},System.Nullable{CoinEx.Net.Enums.SelfTradePreventionMode},System.Threading.CancellationToken)">
            <summary>
            Place a new stop order
            <para><a href="https://docs.coinex.com/api/v2/spot/order/http/put-stop-order" /></para>
            </summary>
            <param name="symbol">The symbol, for example `ETHUSDT`</param>
            <param name="accountType">Account type, Spot or Margin</param>
            <param name="side">Order side</param>
            <param name="type">Order type</param>
            <param name="quantity">Quantity</param>
            <param name="price">Price of the order</param>
            <param name="quantityAsset">The asset the quantity is in, for market orders van be the base or quote asset</param>
            <param name="clientOrderId">Client order id</param>
            <param name="triggerPrice">Price to trigger on</param>
            <param name="hide">Hide the order</param>
            <param name="stpMode">Self trade prevention mode</param>
            <param name="ct">Cancelation Token</param>
            <returns></returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.SpotApiV2.ICoinExRestClientSpotApiTrading.PlaceMultipleOrdersAsync(System.Collections.Generic.IEnumerable{CoinEx.Net.Objects.Models.V2.CoinExPlaceOrderRequest},System.Threading.CancellationToken)">
            <summary>
            Place multiple orders in a single call
            <para><a href="https://docs.coinex.com/api/v2/spot/order/http/put-multi-order" /></para>
            </summary>
            <param name="requests">The orders to place</param>
            <param name="ct">Cancelation Token</param>
            <returns></returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.SpotApiV2.ICoinExRestClientSpotApiTrading.PlaceMultipleStopOrdersAsync(System.Collections.Generic.IEnumerable{CoinEx.Net.Objects.Models.V2.CoinExPlaceStopOrderRequest},System.Threading.CancellationToken)">
            <summary>
            Place multiple stop orders in a single call
            <para><a href="https://docs.coinex.com/api/v2/spot/order/http/put-multi-stop-order" /></para>
            </summary>
            <param name="requests">The stop orders to place</param>
            <param name="ct">Cancelation Token</param>
            <returns></returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.SpotApiV2.ICoinExRestClientSpotApiTrading.GetOrderAsync(System.String,System.Int64,System.Threading.CancellationToken)">
            <summary>
            Get an order by id
            <para><a href="https://docs.coinex.com/api/v2/spot/order/http/get-order-status" /></para>
            </summary>
            <param name="symbol">Symbol, for example `ETHUSDT`</param>
            <param name="orderId">Order id</param>
            <param name="ct">Cancelation Token</param>
            <returns></returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.SpotApiV2.ICoinExRestClientSpotApiTrading.GetOpenOrdersAsync(CoinEx.Net.Enums.AccountType,System.String,System.Nullable{CoinEx.Net.Enums.OrderSide},System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get a list of open orders
            <para><a href="https://docs.coinex.com/api/v2/spot/order/http/list-pending-order" /></para>
            </summary>
            <param name="symbol">Filter by symbol, for example `ETHUSDT`</param>
            <param name="accountType">Account type</param>
            <param name="side">Filter by side</param>
            <param name="clientOrderId">Filter by client order id</param>
            <param name="page">Page number</param>
            <param name="pageSize">Page size</param>
            <param name="ct">Cancelation Token</param>
            <returns></returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.SpotApiV2.ICoinExRestClientSpotApiTrading.GetClosedOrdersAsync(CoinEx.Net.Enums.AccountType,System.String,System.Nullable{CoinEx.Net.Enums.OrderSide},System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get a list of closed orders. Note that orders canceled without having any trades will not be returned
            <para><a href="https://docs.coinex.com/api/v2/spot/order/http/list-finished-order" /></para>
            </summary>
            <param name="symbol">Filter by symbol, for example `ETHUSDT`</param>
            <param name="accountType">Account type</param>
            <param name="side">Filter by side</param>
            <param name="clientOrderId">Filter by client order id</param>
            <param name="page">Page number</param>
            <param name="pageSize">Page size</param>
            <param name="ct">Cancelation Token</param>
            <returns></returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.SpotApiV2.ICoinExRestClientSpotApiTrading.GetOpenStopOrdersAsync(CoinEx.Net.Enums.AccountType,System.String,System.Nullable{CoinEx.Net.Enums.OrderSide},System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get a list of open stop orders
            <para><a href="https://docs.coinex.com/api/v2/spot/order/http/list-pending-stop-order" /></para>
            </summary>
            <param name="symbol">Filter by symbol, for example `ETHUSDT`</param>
            <param name="accountType">Account type</param>
            <param name="side">Filter by side</param>
            <param name="clientOrderId">Filter by client order id</param>
            <param name="page">Page number</param>
            <param name="pageSize">Page size</param>
            <param name="ct">Cancelation Token</param>
            <returns></returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.SpotApiV2.ICoinExRestClientSpotApiTrading.GetClosedStopOrdersAsync(CoinEx.Net.Enums.AccountType,System.String,System.Nullable{CoinEx.Net.Enums.OrderSide},System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get a list of closed stop orders. Note that orders canceled without having any trades will not be returned
            <para><a href="https://docs.coinex.com/api/v2/spot/order/http/list-finished-stop-order" /></para>
            </summary>
            <param name="symbol">Filter by symbol, for example `ETHUSDT`</param>
            <param name="accountType">Account type</param>
            <param name="side">Filter by side</param>
            <param name="clientOrderId">Filter by client order id</param>
            <param name="page">Page number</param>
            <param name="pageSize">Page size</param>
            <param name="ct">Cancelation Token</param>
            <returns></returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.SpotApiV2.ICoinExRestClientSpotApiTrading.EditOrderAsync(System.String,CoinEx.Net.Enums.AccountType,System.Int64,System.Decimal,System.Nullable{System.Decimal},System.Threading.CancellationToken)">
            <summary>
            Edit an active order
            <para><a href="https://docs.coinex.com/api/v2/spot/order/http/edit-order" /></para>
            </summary>
            <param name="symbol">Symbol, for example `ETHUSDT`</param>
            <param name="accountType">Account type</param>
            <param name="orderId">Order id</param>
            <param name="quantity">New quantity</param>
            <param name="price">New price</param>
            <param name="ct">Cancelation Token</param>
            <returns></returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.SpotApiV2.ICoinExRestClientSpotApiTrading.EditStopOrderAsync(System.String,CoinEx.Net.Enums.AccountType,System.Int64,System.Decimal,System.Decimal,System.Nullable{System.Decimal},System.Threading.CancellationToken)">
            <summary>
            Edit an active stop order
            <para><a href="https://docs.coinex.com/api/v2/spot/order/http/edit-stop-order" /></para>
            </summary>
            <param name="symbol">Symbol, for example `ETHUSDT`</param>
            <param name="accountType">Account type</param>
            <param name="stopOrderId">Order id</param>
            <param name="quantity">New quantity</param>
            <param name="price">New price</param>
            <param name="triggerPrice">New trigger price</param>
            <param name="ct">Cancelation Token</param>
            <returns></returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.SpotApiV2.ICoinExRestClientSpotApiTrading.CancelAllOrdersAsync(System.String,CoinEx.Net.Enums.AccountType,System.Nullable{CoinEx.Net.Enums.OrderSide},System.Threading.CancellationToken)">
            <summary>
            Cancel all orders for a symbol
            <para><a href="https://docs.coinex.com/api/v2/spot/order/http/cancel-all-order" /></para>
            </summary>
            <param name="symbol">Symbol, for example `ETHUSDT`</param>
            <param name="accountType">Account type</param>
            <param name="side">Only cancel a specific order side</param>
            <param name="ct">Cancelation Token</param>
            <returns></returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.SpotApiV2.ICoinExRestClientSpotApiTrading.CancelOrderAsync(System.String,CoinEx.Net.Enums.AccountType,System.Int64,System.Threading.CancellationToken)">
            <summary>
            Cancel an active order
            <para><a href="https://docs.coinex.com/api/v2/spot/order/http/cancel-order" /></para>
            </summary>
            <param name="symbol">Symbol, for example `ETHUSDT`</param>
            <param name="accountType">Account type</param>
            <param name="orderId">Id of order to cancel</param>
            <param name="ct">Cancelation Token</param>
            <returns></returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.SpotApiV2.ICoinExRestClientSpotApiTrading.CancelOrdersAsync(System.String,System.Collections.Generic.IEnumerable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Cancel multiple orders
            <para><a href="https://docs.coinex.com/api/v2/spot/order/http/cancel-batch-order" /></para>
            </summary>
            <param name="symbol">Symbol, for example `ETHUSDT`</param>
            <param name="orderIds">Ids of orders to cancel</param>
            <param name="ct">Cancelation Token</param>
            <returns></returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.SpotApiV2.ICoinExRestClientSpotApiTrading.CancelStopOrderAsync(System.String,CoinEx.Net.Enums.AccountType,System.Int64,System.Threading.CancellationToken)">
            <summary>
            Cancel an active stop order
            <para><a href="https://docs.coinex.com/api/v2/spot/order/http/cancel-stop-order" /></para>
            </summary>
            <param name="symbol">Symbol, for example `ETHUSDT`</param>
            <param name="accountType">Account type</param>
            <param name="stopOrderId">Id of stop order to cancel</param>
            <param name="ct">Cancelation Token</param>
            <returns></returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.SpotApiV2.ICoinExRestClientSpotApiTrading.CancelOrderByClientOrderIdAsync(System.String,CoinEx.Net.Enums.AccountType,System.String,System.Threading.CancellationToken)">
            <summary>
            Cancel an active order by its client order id
            <para><a href="https://docs.coinex.com/api/v2/spot/order/http/cancel-order-by-client-id" /></para>
            </summary>
            <param name="symbol">Symbol, for example `ETHUSDT`</param>
            <param name="accountType">Account type</param>
            <param name="clientOrderId">Client order id of order to cancel</param>
            <param name="ct">Cancelation Token</param>
            <returns></returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.SpotApiV2.ICoinExRestClientSpotApiTrading.CancelStopOrderByClientOrderIdAsync(System.String,CoinEx.Net.Enums.AccountType,System.String,System.Threading.CancellationToken)">
            <summary>
            Cancel an active stop order by its client order id
            <para><a href="https://docs.coinex.com/api/v2/spot/order/http/cancel-stop-order-by-client-id" /></para>
            </summary>
            <param name="symbol">Symbol, for example `ETHUSDT`</param>
            <param name="accountType">Account type</param>
            <param name="clientStopOrderId">Client order id of stop order to cancel</param>
            <param name="ct">Cancelation Token</param>
            <returns></returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.SpotApiV2.ICoinExRestClientSpotApiTrading.CancelStopOrdersAsync(System.String,System.Collections.Generic.IEnumerable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Cancel multiple stop orders
            <para><a href="https://docs.coinex.com/api/v2/spot/order/http/cancel-batch-stop-order" /></para>
            </summary>
            <param name="symbol">Symbol, for example `ETHUSDT`</param>
            <param name="orderIds">Stop order ids to cancel</param>
            <param name="ct">Cancelation Token</param>
            <returns></returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.SpotApiV2.ICoinExRestClientSpotApiTrading.GetUserTradesAsync(System.String,CoinEx.Net.Enums.AccountType,System.Nullable{CoinEx.Net.Enums.OrderSide},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get trade list
            <para><a href="https://docs.coinex.com/api/v2/spot/deal/http/list-user-deals" /></para>
            </summary>
            <param name="symbol">Symbol, for example `ETHUSDT`</param>
            <param name="accountType">Account type</param>
            <param name="side">Filter by side</param>
            <param name="startTime">Filter by start time</param>
            <param name="endTime">Filter by end time</param>
            <param name="page">Page number</param>
            <param name="pageSize">Page size</param>
            <param name="ct">Cancelation Token</param>
            <returns></returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.SpotApiV2.ICoinExRestClientSpotApiTrading.GetOrderTradesAsync(System.String,CoinEx.Net.Enums.AccountType,System.Int64,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get trades for a specific order
            <para><a href="https://docs.coinex.com/api/v2/spot/deal/http/list-user-order-deals" /></para>
            </summary>
            <param name="symbol">Symbol, for example `ETHUSDT`</param>
            <param name="accountType">Account type</param>
            <param name="orderId">The order id</param>
            <param name="page">Page number</param>
            <param name="pageSize">Page size</param>
            <param name="ct">Cancelation Token</param>
            <returns></returns>
        </member>
        <member name="T:CoinEx.Net.Interfaces.Clients.SpotApiV2.ICoinExSocketClientSpotApi">
            <summary>
            Spot streams
            </summary>
        </member>
        <member name="P:CoinEx.Net.Interfaces.Clients.SpotApiV2.ICoinExSocketClientSpotApi.SharedClient">
            <summary>
            Get the shared socket subscription client. This interface is shared with other exhanges to allow for a common implementation for different exchanges.
            </summary>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.SpotApiV2.ICoinExSocketClientSpotApi.SubscribeToSystemNoticeUpdatesAsync(System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{System.Collections.Generic.IEnumerable{CoinEx.Net.Objects.Models.V2.CoinExMaintenance}}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to system notification updates
            </summary>
            <param name="onMessage">Data handler</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.SpotApiV2.ICoinExSocketClientSpotApi.SubscribeToTickerUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{System.Collections.Generic.IEnumerable{CoinEx.Net.Objects.Models.V2.CoinExTicker}}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to symbol ticker updates for the specified symbols. Note that only one ticker subscription can be active at the same time; new ticker subscription will override the old subscriptions.
            <para><a href="https://docs.coinex.com/api/v2/spot/market/ws/market" /></para>
            </summary>
            <param name="symbols">The symbols to subscribe, for example `ETHUSDT`</param>
            <param name="onMessage">Data handler</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.SpotApiV2.ICoinExSocketClientSpotApi.SubscribeToTickerUpdatesAsync(System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{System.Collections.Generic.IEnumerable{CoinEx.Net.Objects.Models.V2.CoinExTicker}}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to symbol ticker updates for all symbols. Note that only one ticker subscription can be active at the same time; new ticker subscription will override the old subscriptions.
            <para><a href="https://docs.coinex.com/api/v2/spot/market/ws/market" /></para>
            </summary>
            <param name="onMessage">Data handler</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.SpotApiV2.ICoinExSocketClientSpotApi.SubscribeToOrderBookUpdatesAsync(System.String,System.Int32,System.String,System.Boolean,System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{CoinEx.Net.Objects.Models.V2.CoinExOrderBook}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to order book updates
            <para><a href="https://docs.coinex.com/api/v2/spot/market/ws/market-depth" /></para>
            </summary>
            <param name="symbol">Symbol, for example `ETHUSDT`</param>
            <param name="depth">Order book depth, 5, 10, 20 or 50</param>
            <param name="mergeLevel">The merge level, 0.00000000001 up to 1000, 0 for no merging</param>
            <param name="fullBookUpdates">Whether updates should provide full update or only updates</param>
            <param name="onMessage">Data handler</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.SpotApiV2.ICoinExSocketClientSpotApi.SubscribeToOrderBookUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},System.Int32,System.String,System.Boolean,System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{CoinEx.Net.Objects.Models.V2.CoinExOrderBook}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to order book updates
            <para><a href="https://docs.coinex.com/api/v2/spot/market/ws/market-depth" /></para>
            </summary>
            <param name="symbols">Symbols, for example `ETHUSDT`</param>
            <param name="depth">Order book depth, 5, 10, 20 or 50</param>
            <param name="mergeLevel">The merge level, 0.00000000001 up to 1000, 0 for no merging</param>
            <param name="fullBookUpdates">Whether updates should provide full update or only updates</param>
            <param name="onMessage">Data handler</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.SpotApiV2.ICoinExSocketClientSpotApi.SubscribeToTradeUpdatesAsync(System.String,System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{System.Collections.Generic.IEnumerable{CoinEx.Net.Objects.Models.V2.CoinExTrade}}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to live trade updates
            <para><a href="https://docs.coinex.com/api/v2/spot/market/ws/market-deals" /></para>
            </summary>
            <param name="symbol">Symbol, for example `ETHUSDT`</param>
            <param name="onMessage">Data handler</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.SpotApiV2.ICoinExSocketClientSpotApi.SubscribeToTradeUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{System.Collections.Generic.IEnumerable{CoinEx.Net.Objects.Models.V2.CoinExTrade}}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to live trade updates
            <para><a href="https://docs.coinex.com/api/v2/spot/market/ws/market-deals" /></para>
            </summary>
            <param name="symbols">Symbols, for example `ETHUSDT`</param>
            <param name="onMessage">Data handler</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.SpotApiV2.ICoinExSocketClientSpotApi.SubscribeToTradeUpdatesAsync(System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{System.Collections.Generic.IEnumerable{CoinEx.Net.Objects.Models.V2.CoinExTrade}}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to live trade updates
            <para><a href="https://docs.coinex.com/api/v2/spot/market/ws/market-deals" /></para>
            </summary>
            <param name="onMessage">Data handler</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.SpotApiV2.ICoinExSocketClientSpotApi.SubscribeToIndexPriceUpdatesAsync(System.String,System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{CoinEx.Net.Objects.Models.V2.CoinExIndexPriceUpdate}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to index price updates
            <para><a href="https://docs.coinex.com/api/v2/spot/market/ws/market-index" /></para>
            </summary>
            <param name="symbol">Symbol, for example `ETHUSDT`</param>
            <param name="onMessage">Data handler</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.SpotApiV2.ICoinExSocketClientSpotApi.SubscribeToIndexPriceUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{CoinEx.Net.Objects.Models.V2.CoinExIndexPriceUpdate}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to index price updates
            <para><a href="https://docs.coinex.com/api/v2/spot/market/ws/market-index" /></para>
            </summary>
            <param name="symbols">Symbols, for example `ETHUSDT`</param>
            <param name="onMessage">Data handler</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.SpotApiV2.ICoinExSocketClientSpotApi.SubscribeToBookPriceUpdatesAsync(System.String,System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{CoinEx.Net.Objects.Models.V2.CoinExBookPriceUpdate}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to book price updates
            <para><a href="https://docs.coinex.com/api/v2/spot/market/ws/market-bbo" /></para>
            </summary>
            <param name="symbol">Symbol, for example `ETHUSDT`</param>
            <param name="onMessage">Data handler</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.SpotApiV2.ICoinExSocketClientSpotApi.SubscribeToBookPriceUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{CoinEx.Net.Objects.Models.V2.CoinExBookPriceUpdate}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to book price updates
            <para><a href="https://docs.coinex.com/api/v2/spot/market/ws/market-bbo" /></para>
            </summary>
            <param name="symbols">Symbols, for example `ETHUSDT`</param>
            <param name="onMessage">Data handler</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.SpotApiV2.ICoinExSocketClientSpotApi.SubscribeToOrderUpdatesAsync(System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{CoinEx.Net.Objects.Models.V2.CoinExOrderUpdate}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to user order updates
            <para><a href="https://docs.coinex.com/api/v2/spot/order/ws/user-order" /></para>
            </summary>
            <param name="onMessage">Data handler</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.SpotApiV2.ICoinExSocketClientSpotApi.SubscribeToStopOrderUpdatesAsync(System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{CoinEx.Net.Objects.Models.V2.CoinExStopOrderUpdate}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to user stop order updates
            <para><a href="https://docs.coinex.com/api/v2/spot/order/ws/user-stop-order" /></para>
            </summary>
            <param name="onMessage">Data handler</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.SpotApiV2.ICoinExSocketClientSpotApi.SubscribeToUserTradeUpdatesAsync(System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{CoinEx.Net.Objects.Models.V2.CoinExUserTrade}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to user trade updates
            <para><a href="https://docs.coinex.com/api/v2/spot/deal/ws/user-deals" /></para>
            </summary>
            <param name="onMessage">Data handler</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.SpotApiV2.ICoinExSocketClientSpotApi.SubscribeToBalanceUpdatesAsync(System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{System.Collections.Generic.IEnumerable{CoinEx.Net.Objects.Models.V2.CoinExBalanceUpdate}}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to user balance updates
            <para><a href="https://docs.coinex.com/api/v2/assets/balance/ws/spot_balance" /></para>
            </summary>
            <param name="onMessage">Data handler</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="T:CoinEx.Net.Interfaces.Clients.SpotApiV2.ICoinExSocketClientSpotApiShared">
            <summary>
            Get the shared socket subscription client. This interface is shared with other exhanges to allow for a common implementation for different exchanges.
            </summary>
        </member>
        <member name="T:CoinEx.Net.Interfaces.ICoinExOrderBookFactory">
            <summary>
            CoinEx order book factory
            </summary>
        </member>
        <member name="P:CoinEx.Net.Interfaces.ICoinExOrderBookFactory.Spot">
            <summary>
            Spot order book factory methods
            </summary>
        </member>
        <member name="P:CoinEx.Net.Interfaces.ICoinExOrderBookFactory.Futures">
            <summary>
            Futures order book factory methods
            </summary>
        </member>
        <member name="M:CoinEx.Net.Interfaces.ICoinExOrderBookFactory.Create(CryptoExchange.Net.SharedApis.SharedSymbol,System.Action{CoinEx.Net.Objects.Options.CoinExOrderBookOptions})">
            <summary>
            Create a SymbolOrderBook for the symbol
            </summary>
            <param name="symbol">The symbol</param>
            <param name="options">Book options</param>
            <returns></returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.ICoinExOrderBookFactory.CreateSpot(System.String,System.Action{CoinEx.Net.Objects.Options.CoinExOrderBookOptions})">
            <summary>
            Create a SymbolOrderBook for the Spot API
            </summary>
            <param name="symbol">The symbol</param>
            <param name="options">Order book options</param>
            <returns></returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.ICoinExOrderBookFactory.CreateFutures(System.String,System.Action{CoinEx.Net.Objects.Options.CoinExOrderBookOptions})">
            <summary>
            Create a SymbolOrderBook for the Futures API
            </summary>
            <param name="symbol">The symbol</param>
            <param name="options">Order book options</param>
            <returns></returns>
        </member>
        <member name="T:CoinEx.Net.Interfaces.ICoinExTrackerFactory">
            <summary>
            Tracker factory
            </summary>
        </member>
        <member name="M:CoinEx.Net.Interfaces.ICoinExTrackerFactory.CreateTradeTracker(CryptoExchange.Net.SharedApis.SharedSymbol,System.Nullable{System.Int32},System.Nullable{System.TimeSpan})">
            <summary>
            Create a new trade tracker for a symbol
            </summary>
            <param name="symbol">The symbol</param>
            <param name="limit">The max amount of klines to retain</param>
            <param name="period">The max period the data should be retained</param>
            <returns></returns>
        </member>
        <member name="T:CoinEx.Net.Objects.CoinExApiAddresses">
            <summary>
            Api addresses usable for the CoinEx clients
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.CoinExApiAddresses.RestClientAddress">
            <summary>
            The address used by the CoinExRestClient for the rest API
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.CoinExApiAddresses.SocketClientAddress">
            <summary>
            The address used by the CoinExSocketClient for the socket API
            </summary>
        </member>
        <member name="F:CoinEx.Net.Objects.CoinExApiAddresses.Default">
            <summary>
            The default addresses to connect to the CoinEx.com API
            </summary>
        </member>
        <member name="M:CoinEx.Net.Objects.Internal.CoinExNonceProvider.GetNonce">
            <inheritdoc />
        </member>
        <member name="T:CoinEx.Net.Objects.Models.CoinExAssetConfig">
            <summary>
            Asset config
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExAssetConfig.Asset">
            <summary>
            Asset
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExAssetConfig.Network">
            <summary>
            Network
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExAssetConfig.CanDeposit">
            <summary>
            Deposit is enabled
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExAssetConfig.CanWithdraw">
            <summary>
            Withdraw is enabled
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExAssetConfig.MinDeposit">
            <summary>
            Minimal deposit quantity
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExAssetConfig.MinWithdraw">
            <summary>
            Minimal withdrawal quantity
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExAssetConfig.WithdrawFee">
            <summary>
            Withdraw fee
            </summary>
        </member>
        <member name="T:CoinEx.Net.Objects.Models.CoinExBalance">
            <summary>
            Balance info
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExBalance.Asset">
            <summary>
            The asset
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExBalance.Available">
            <summary>
            The quantity of the asset that is available
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExBalance.Frozen">
            <summary>
            The quantity of the asset not currently available
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExBalance.Timestamp">
            <summary>
            Data timestamp
            </summary>
        </member>
        <member name="T:CoinEx.Net.Objects.Models.CoinExDeposit">
            <summary>
            Deposit info
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExDeposit.ActualQuantity">
            <summary>
            The actual quantity of the deposit
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExDeposit.ActualQuantityDisplay">
            <summary>
            The display for the deposit
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExDeposit.AddExplorer">
            <summary>
            Depositor
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExDeposit.Quantity">
            <summary>
            The total quantity of the deposit
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExDeposit.QuantityDisplay">
            <summary>
            The display for the quantity
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExDeposit.Address">
            <summary>
            Deposit add displayed
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExDeposit.AddressDisplay">
            <summary>
            Deposit add displayed
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExDeposit.Id">
            <summary>
            Deposit ID
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExDeposit.CoinType">
            <summary>
            Deposit ID
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExDeposit.Confirmations">
            <summary>
            Deposit ID
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExDeposit.CreateTime">
            <summary>
            Deposit ID
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExDeposit.Explorer">
            <summary>
            Explorer
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExDeposit.Remark">
            <summary>
            Remarks
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExDeposit.Status">
            <summary>
            Status
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExDeposit.StatusDisplay">
            <summary>
            Status Displayed
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExDeposit.TransferMethod">
            <summary>
            transfer method
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExDeposit.TransactionId">
            <summary>
            The transaction id of the withdrawal
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExDeposit.TransactionIdDisplay">
            <summary>
            The transaction id of the withdrawal
            </summary>
        </member>
        <member name="T:CoinEx.Net.Objects.Models.CoinExDepositAddress">
            <summary>
            Deposit address
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExDepositAddress.Address">
            <summary>
            The address
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExDepositAddress.CreateTime">
            <summary>
            Time the address was created
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExDepositAddress.Id">
            <summary>
            Deposit address id
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExDepositAddress.IsBitcoinCash">
            <summary>
            Is bitcoin cash
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExDepositAddress.Status">
            <summary>
            Status
            </summary>
        </member>
        <member name="T:CoinEx.Net.Objects.Models.CoinExKline">
            <summary>
            Kline data
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExKline.OpenTime">
            <summary>
            The open time of this kline
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExKline.OpenPrice">
            <summary>
            The price of the symbol when this kline started
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExKline.ClosePrice">
            <summary>
            The price of the symbol when this kline ended
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExKline.HighPrice">
            <summary>
            The highest price of the symbol during this kline
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExKline.LowPrice">
            <summary>
            The lowest price of the symbol during this kline
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExKline.Volume">
            <summary>
            The volume of the quote asset. i.e. for symbol ETHBTC this is the volume in ETH
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExKline.QuoteVolume">
            <summary>
            The volume of the base asset. i.e. for symbol ETHBTC this is the volume in BTC
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExKline.Symbol">
            <summary>
            The symbol for this kline
            </summary>
        </member>
        <member name="T:CoinEx.Net.Objects.Models.CoinExMiningDifficulty">
            <summary>
            Mining difficulty info
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExMiningDifficulty.Difficulty">
            <summary>
            The difficulty in CET/Hour
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExMiningDifficulty.Prediction">
            <summary>
            Estimated hourly mining yield to distribute
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExMiningDifficulty.UpdateTime">
            <summary>
            The update time of the Prediction field
            </summary>
        </member>
        <member name="T:CoinEx.Net.Objects.Models.CoinExOrder">
            <summary>
            Order info
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExOrder.Quantity">
            <summary>
            The quantity of the order
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExOrder.Fee">
            <summary>
            The fee of the order
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExOrder.QuoteFee">
            <summary>
            The fee of the order in quote
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExOrder.FeeAsset">
            <summary>
            The asset of the fee
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExOrder.FeeDiscount">
            <summary>
            The fee discount
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExOrder.AveragePrice">
            <summary>
            Average price of the executed order for market orders
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExOrder.CreateTime">
            <summary>
            The time the order was created
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExOrder.CloseTime">
            <summary>
            The time the order was finished
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExOrder.QuantityFilled">
            <summary>
            The executed quantity
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExOrder.OrderFee">
            <summary>
            The fee of the executed quantity
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExOrder.QuoteQuantityFilled">
            <summary>
            The value of the executed quantity
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExOrder.Id">
            <summary>
            The id of the order
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExOrder.QuantityRemaining">
            <summary>
            The quantity still left to execute
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExOrder.MakerFeeRate">
            <summary>
            The maker fee rate
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExOrder.Symbol">
            <summary>
            The symbol of the order
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExOrder.OrderType">
            <summary>
            The type of the order
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExOrder.Price">
            <summary>
            The price per unit of the order
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExOrder.SourceId">
            <summary>
            The source id optionally specified by the client
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExOrder.ClientOrderId">
            <summary>
            The client id optionally specified by the client
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExOrder.Status">
            <summary>
            The status of the order
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExOrder.TakerFeeRate">
            <summary>
            The taker fee rate
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExOrder.StopPrice">
            <summary>
            The stop price
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExOrder.Side">
            <summary>
            The transaction type of the order
            </summary>
        </member>
        <member name="T:CoinEx.Net.Objects.Models.CoinExOrderBook">
            <summary>
            Order book
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExOrderBook.LastPrice">
            <summary>
            The price of the last transaction
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExOrderBook.Timestamp">
            <summary>
            Timestamp
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExOrderBook.Asks">
            <summary>
            The asks on this symbol
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExOrderBook.Bids">
            <summary>
            The bids on this symbol
            </summary>
        </member>
        <member name="T:CoinEx.Net.Objects.Models.CoinExDepthEntry">
            <summary>
            Depth info
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExDepthEntry.Price">
            <summary>
            The price per unit of the entry
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExDepthEntry.Quantity">
            <summary>
            The quantity of the entry
            </summary>
        </member>
        <member name="T:CoinEx.Net.Objects.Models.CoinExOrderTrade">
            <summary>
            Order transaction info
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExOrderTrade.Quantity">
            <summary>
            The quantity of the transaction
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExOrderTrade.Timestamp">
            <summary>
            The time the transaction was created
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExOrderTrade.QuoteQuantity">
            <summary>
            The value of the transaction
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExOrderTrade.Fee">
            <summary>
            The fee of the transactions
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExOrderTrade.FeeAsset">
            <summary>
            The asset of the fee
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExOrderTrade.Id">
            <summary>
            The id of the transaction
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExOrderTrade.OrderId">
            <summary>
            The id of the order
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExOrderTrade.Price">
            <summary>
            The price per unit of the transaction
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExOrderTrade.Role">
            <summary>
            The role of the transaction, maker or taker
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExOrderTrade.Side">
            <summary>
            Order side
            </summary>
        </member>
        <member name="T:CoinEx.Net.Objects.Models.CoinExOrderTradeExtended">
            <summary>
            Order transaction info
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExOrderTradeExtended.Symbol">
            <summary>
            The symbol of the transaction
            </summary>
        </member>
        <member name="T:CoinEx.Net.Objects.Models.CoinExPagedResult`1">
            <summary>
            Paged result
            </summary>
            <typeparam name="T">Type of data</typeparam>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExPagedResult`1.Count">
            <summary>
            The total number of results
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExPagedResult`1.CurrentPage">
            <summary>
            The page currently returned
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExPagedResult`1.Data">
            <summary>
            The results
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExPagedResult`1.HasNext">
            <summary>
            Whether there is a next page
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExPagedResult`1.TotalItems">
            <summary>
            Total items
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExPagedResult`1.TotalPages">
            <summary>
            Total pages
            </summary>
        </member>
        <member name="T:CoinEx.Net.Objects.Models.CoinExSymbol">
            <summary>
            Symbol Info
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExSymbol.Name">
            <summary>
            The name of the symbol
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExSymbol.MinQuantity">
            <summary>
            The minimum quantity that can be traded
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExSymbol.MakerFeeRate">
            <summary>
            The fee for the maker
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExSymbol.TakerFeeRate">
            <summary>
            The fee for the taker
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExSymbol.PricingName">
            <summary>
            The asset being that is being traded against
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExSymbol.PricingDecimal">
            <summary>
            The number of decimals for the price
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExSymbol.TradingName">
            <summary>
            The asset being traded
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExSymbol.TradingDecimal">
            <summary>
            The number of decimals for the price
            </summary>
        </member>
        <member name="T:CoinEx.Net.Objects.Models.CoinExSymbolState">
            <summary>
            Symbol state info
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExSymbolState.Timestamp">
            <summary>
            The timestamp of the data
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExSymbolState.Ticker">
            <summary>
            The symbol state data
            </summary>
        </member>
        <member name="T:CoinEx.Net.Objects.Models.CoinExSymbolStatesList">
            <summary>
            Symbol state list
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExSymbolStatesList.Timestamp">
            <summary>
            The timestamp of the data
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExSymbolStatesList.Tickers">
            <summary>
            The data specified as symbol -> symbol state data
            </summary>
        </member>
        <member name="T:CoinEx.Net.Objects.Models.CoinExSymbolStateData">
            <summary>
            Symbol state data
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExSymbolStateData.Symbol">
            <summary>
            Symbol
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExSymbolStateData.BestAskPrice">
            <summary>
            The best buy price available on the symbol
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExSymbolStateData.BestAskQuantity">
            <summary>
            The quantity of the best buy price
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExSymbolStateData.BestBidPrice">
            <summary>
            The best sell price available on the symbol
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExSymbolStateData.BestBidQuantity">
            <summary>
            The quantity of the best sell price
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExSymbolStateData.OpenPrice">
            <summary>
            The open price based on a 24H ticker
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExSymbolStateData.HighPrice">
            <summary>
            The high price based on a 24H ticker
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExSymbolStateData.LowPrice">
            <summary>
            The low price based on a 24H ticker
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExSymbolStateData.LastPrice">
            <summary>
            The price of the last trade
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExSymbolStateData.Volume">
            <summary>
            The volume of the quote asset. i.e. for symbol ETHBTC this is the volume in ETH
            </summary>
        </member>
        <member name="T:CoinEx.Net.Objects.Models.CoinExSymbolTrade">
            <summary>
            Symbol trade info
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExSymbolTrade.Quantity">
            <summary>
            The quantity of the transaction
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExSymbolTrade.Timestamp">
            <summary>
            The timestamp of the transaction
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExSymbolTrade.Id">
            <summary>
            The id of the transaction
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExSymbolTrade.Price">
            <summary>
            The price per unit of the transaction
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExSymbolTrade.Side">
            <summary>
            Order side
            </summary>
        </member>
        <member name="T:CoinEx.Net.Objects.Models.CoinExWithdrawal">
            <summary>
            Withdrawal info
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExWithdrawal.ActualQuantity">
            <summary>
            The actual quantity of the withdrawal, i.e. the quantity which will be transferred to the destination address
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExWithdrawal.Quantity">
            <summary>
            The total quantity of the withdrawal
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExWithdrawal.Address">
            <summary>
            The destination address of the withdrawal
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExWithdrawal.CoinType">
            <summary>
            The name of the asset of the withdrawal
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExWithdrawal.Id">
            <summary>
            The id of this withdrawal
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExWithdrawal.Confirmations">
            <summary>
            The current number of confirmations
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExWithdrawal.CreateTime">
            <summary>
            The time the withdrawal was created
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExWithdrawal.Status">
            <summary>
            The status of the withdrawal
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExWithdrawal.TransactionFee">
            <summary>
            The fee for the withdrawal
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExWithdrawal.TransactionId">
            <summary>
            The transaction id of the withdrawal
            </summary>
        </member>
        <member name="T:CoinEx.Net.Objects.Models.Socket.CoinExSocketOrder">
            <summary>
            Order info
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.Socket.CoinExSocketOrder.Quantity">
            <summary>
            The total quantity of the oder
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.Socket.CoinExSocketOrder.CreateTime">
            <summary>
            The time the order was created
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.Socket.CoinExSocketOrder.Fee">
            <summary>
            The fee of the order
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.Socket.CoinExSocketOrder.FeeDiscount">
            <summary>
            The fee discount
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.Socket.CoinExSocketOrder.FeeAsset">
            <summary>
            The asset the fee is on
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.Socket.CoinExSocketOrder.TransactionFee">
            <summary>
            The executed quantity transaction fee
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.Socket.CoinExSocketOrder.QuoteQuantityFilled">
            <summary>
            The executed value in this update
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.Socket.CoinExSocketOrder.QuantityFilled">
            <summary>
            The executed quantity in this update
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.Socket.CoinExSocketOrder.Id">
            <summary>
            The order id
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.Socket.CoinExSocketOrder.QuantityRemaining">
            <summary>
            Quantity of order left to execute
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.Socket.CoinExSocketOrder.MakerFee">
            <summary>
            Maker fee
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.Socket.CoinExSocketOrder.UpdateTime">
            <summary>
            The last update time
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.Socket.CoinExSocketOrder.Price">
            <summary>
            The price per unit of the order
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.Socket.CoinExSocketOrder.Side">
            <summary>
            The order side
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.Socket.CoinExSocketOrder.Source">
            <summary>
            The source of the order
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.Socket.CoinExSocketOrder.TakerFee">
            <summary>
            Taker fee
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.Socket.CoinExSocketOrder.Type">
            <summary>
            The type of the order
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.Socket.CoinExSocketOrder.UserId">
            <summary>
            The id of the user that placed the order
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.Socket.CoinExSocketOrder.Symbol">
            <summary>
            The symbol of the order
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.Socket.CoinExSocketOrder.ClientOrderId">
            <summary>
            The client id
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.Socket.CoinExSocketOrder.LastTradeQuantity">
            <summary>
            Quantity of the last trade filled for this order
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.Socket.CoinExSocketOrder.LastTradePrice">
            <summary>
            Price of the last trade filled for this order
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.Socket.CoinExSocketOrder.LastTradeTime">
            <summary>
            Timestamp of the last trade filled for this order
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.Socket.CoinExSocketOrder.LastTradeId">
            <summary>
            Id of the last trade filled for this order
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.Socket.CoinExSocketOrder.LastTradeRole">
            <summary>
            Role of the last trade filled for this order
            </summary>
        </member>
        <member name="T:CoinEx.Net.Objects.Models.Socket.CoinExSocketOrderBook">
            <summary>
            Order book
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.Socket.CoinExSocketOrderBook.LastPrice">
            <summary>
            The price of the last trade. Only filled on a full update.
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.Socket.CoinExSocketOrderBook.Timestamp">
            <summary>
            The timestamp of the data. Only filled on a full update.
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.Socket.CoinExSocketOrderBook.Asks">
            <summary>
            The asks on the symbol
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.Socket.CoinExSocketOrderBook.Bids">
            <summary>
            The bids on the symbol
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.Socket.CoinExSocketOrderBook.Checksum">
            <summary>
            Signed integer (32 bit) of full depth data checksum
            </summary>
        </member>
        <member name="T:CoinEx.Net.Objects.Models.Socket.CoinExSocketOrderUpdate">
            <summary>
            Order update
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.Socket.CoinExSocketOrderUpdate.UpdateType">
            <summary>
            The type of update
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.Socket.CoinExSocketOrderUpdate.Order">
            <summary>
            The order info
            </summary>
        </member>
        <member name="T:CoinEx.Net.Objects.Models.Socket.CoinExSocketPagedResult`1">
            <summary>
            Paged result
            </summary>
            <typeparam name="T">Type of data</typeparam>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.Socket.CoinExSocketPagedResult`1.Limit">
            <summary>
            The number of results
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.Socket.CoinExSocketPagedResult`1.Offset">
            <summary>
            The offset in the list
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.Socket.CoinExSocketPagedResult`1.Total">
            <summary>
            The total number of results
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.Socket.CoinExSocketPagedResult`1.Data">
            <summary>
            The data
            </summary>
        </member>
        <member name="T:CoinEx.Net.Objects.Models.Socket.CoinExSocketSymbolState">
            <summary>
            Symbol state info
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.Socket.CoinExSocketSymbolState.Close">
            <summary>
            The close price of the period
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.Socket.CoinExSocketSymbolState.QuoteVolume">
            <summary>
            The volume of the quote asset. i.e. for symbol ETHBTC this is the volume in BTC
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.Socket.CoinExSocketSymbolState.HighPrice">
            <summary>
            The highest symbol price in the period
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.Socket.CoinExSocketSymbolState.LastPrice">
            <summary>
            The last symbol trade in the period
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.Socket.CoinExSocketSymbolState.LowPrice">
            <summary>
            The lowest symbol price in the period
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.Socket.CoinExSocketSymbolState.OpenPrice">
            <summary>
            The open price of the period
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.Socket.CoinExSocketSymbolState.Period">
            <summary>
            The period the data is over in seconds
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.Socket.CoinExSocketSymbolState.Volume">
            <summary>
            The volume of the base asset. i.e. for symbol ETHBTC this is the volume in ETH
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.Socket.CoinExSocketSymbolState.Symbol">
            <summary>
            Symbol
            </summary>
        </member>
        <member name="T:CoinEx.Net.Objects.Models.Socket.CoinExSocketSymbolTrade">
            <summary>
            Transaction data
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.Socket.CoinExSocketSymbolTrade.Side">
            <summary>
            The orde side
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.Socket.CoinExSocketSymbolTrade.Timestamp">
            <summary>
            The timestamp of the transaction
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.Socket.CoinExSocketSymbolTrade.Price">
            <summary>
            The price per unit of the transaction
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.Socket.CoinExSocketSymbolTrade.OrderId">
            <summary>
            The order id of the transaction
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.Socket.CoinExSocketSymbolTrade.Quantity">
            <summary>
            The quantity of the transaction
            </summary>
        </member>
        <member name="T:CoinEx.Net.Objects.Models.V2.CoinExAamLiquidity">
            <summary>
            Automated market maker liquidity info
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExAamLiquidity.Symbol">
            <summary>
            Symbol
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExAamLiquidity.BaseAssetQuantity">
            <summary>
            Base asset amount in AMM account
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExAamLiquidity.QuoteAssetQuantity">
            <summary>
            Quote asset amount in AMM account
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExAamLiquidity.LiquidityProportion">
            <summary>
            Liquidity percentage in AMM account
            </summary>
        </member>
        <member name="T:CoinEx.Net.Objects.Models.V2.CoinExAmmBalance">
            <summary>
            Automated Market Maker liquidity info
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExAmmBalance.Symbol">
            <summary>
            Symbol
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExAmmBalance.BaseAsset">
            <summary>
            Base asset
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExAmmBalance.QuoteAsset">
            <summary>
            Quote asset
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExAmmBalance.BaseAssetQuantity">
            <summary>
            Base asset amount
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExAmmBalance.QuoteAssetQuantity">
            <summary>
            Quote asset amount
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExAmmBalance.LiquidityProportion">
            <summary>
            Liquidity percentage in AMM account
            </summary>
        </member>
        <member name="T:CoinEx.Net.Objects.Models.V2.CoinExAsset">
            <summary>
            Asset info
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExAsset.ShortName">
            <summary>
            Short name
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExAsset.FullName">
            <summary>
            Full name
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExAsset.WebsiteUrl">
            <summary>
            Website url
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExAsset.WhitePaperUrl">
            <summary>
            White paper url
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExAsset.Networks">
            <summary>
            Network info
            </summary>
        </member>
        <member name="T:CoinEx.Net.Objects.Models.V2.CoinExAssetNetwork">
            <summary>
            Asset network info
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExAssetNetwork.Name">
            <summary>
            Network name
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExAssetNetwork.Identity">
            <summary>
            Identity
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExAssetNetwork.ExplorerUrl">
            <summary>
            Explorer url
            </summary>
        </member>
        <member name="T:CoinEx.Net.Objects.Models.V2.CoinExBalance">
            <summary>
            Balance info
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExBalance.Asset">
            <summary>
            Asset name
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExBalance.Available">
            <summary>
            Available amount
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExBalance.Frozen">
            <summary>
            Frozen amount
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExBalance.Total">
            <summary>
            Total amount
            </summary>
        </member>
        <member name="T:CoinEx.Net.Objects.Models.V2.CoinExBalanceUpdate">
            <summary>
            Balance update
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExBalanceUpdate.MarginSymbol">
            <summary>
            Margin symbol
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExBalanceUpdate.Asset">
            <summary>
            Asset name
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExBalanceUpdate.Available">
            <summary>
            Available amount
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExBalanceUpdate.Frozen">
            <summary>
            Frozen amount
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExBalanceUpdate.UpdateTime">
            <summary>
            Update time
            </summary>
        </member>
        <member name="T:CoinEx.Net.Objects.Models.V2.CoinExBasis">
            <summary>
            Basis rate
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExBasis.Symbol">
            <summary>
            Symbol
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExBasis.CreateTime">
            <summary>
            Create time
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExBasis.BasisRate">
            <summary>
            Basis rate
            </summary>
        </member>
        <member name="T:CoinEx.Net.Objects.Models.V2.CoinExBatchOrderResult">
            <summary>
            Batch operation result
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExBatchOrderResult.Code">
            <summary>
            Result code
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExBatchOrderResult.Message">
            <summary>
            Result message
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExBatchOrderResult.Success">
            <summary>
            Whether the operation was successful
            </summary>
        </member>
        <member name="T:CoinEx.Net.Objects.Models.V2.CoinExBatchResult`1">
            <summary>
            Batch operation result
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExBatchResult`1.Code">
            <summary>
            Result code
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExBatchResult`1.Message">
            <summary>
            Result message
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExBatchResult`1.Data">
            <summary>
            The result data, only available when Success is true
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExBatchResult`1.Success">
            <summary>
            Whether the operation was successful
            </summary>
        </member>
        <member name="T:CoinEx.Net.Objects.Models.V2.CoinExBookPriceUpdate">
            <summary>
            Best book prices update
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExBookPriceUpdate.Symbol">
            <summary>
            Symbol
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExBookPriceUpdate.UpdateTime">
            <summary>
            Update time
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExBookPriceUpdate.BestBidPrice">
            <summary>
            Current best bid price
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExBookPriceUpdate.BestBidQuantity">
            <summary>
            Current best bid quantity
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExBookPriceUpdate.BestAskPrice">
            <summary>
            Current best ask price
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExBookPriceUpdate.BestAskQuantity">
            <summary>
            Current best ask quantity
            </summary>
        </member>
        <member name="T:CoinEx.Net.Objects.Models.V2.CoinExBorrow">
            <summary>
            Borrow record
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExBorrow.BorrowId">
            <summary>
            Id
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExBorrow.Symbol">
            <summary>
            Symbol
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExBorrow.Asset">
            <summary>
            Asset
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExBorrow.DailyInterestRate">
            <summary>
            Daily interest rate
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExBorrow.ExireTime">
            <summary>
            Expire time
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExBorrow.BorrowQuantity">
            <summary>
            Borrow amount
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExBorrow.ToRepayQuantity">
            <summary>
            Amount to repay
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExBorrow.Status">
            <summary>
            Borrow status
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExBorrow.IsAutoRenew">
            <summary>
            Is auto renewing
            </summary>
        </member>
        <member name="T:CoinEx.Net.Objects.Models.V2.CoinExBorrowLimit">
            <summary>
            Borrow limit info
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExBorrowLimit.Symbol">
            <summary>
            Symbol
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExBorrowLimit.Asset">
            <summary>
            Asset
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExBorrowLimit.DailyInterestRate">
            <summary>
            Daily interest rate
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExBorrowLimit.Leverage">
            <summary>
            Max leverage
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExBorrowLimit.MinBorrowable">
            <summary>
            Min amount borrowable
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExBorrowLimit.MaxBorrowable">
            <summary>
            Max amount borrowable
            </summary>
        </member>
        <member name="T:CoinEx.Net.Objects.Models.V2.CoinExCreditBalance">
            <summary>
            Credit account balance
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExCreditBalance.Equity">
            <summary>
            Account assets
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExCreditBalance.ToBeRepaid">
            <summary>
            To be repaid
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExCreditBalance.RiskRate">
            <summary>
            Current risk rate
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExCreditBalance.WithdrawalRiskRate">
            <summary>
            Withdrawal risk rate
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExCreditBalance.WithdrawalValueAvailable">
            <summary>
            Market value of available withdrawal
            </summary>
        </member>
        <member name="T:CoinEx.Net.Objects.Models.V2.CoinExDeposit">
            <summary>
            Deposit info
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExDeposit.Id">
            <summary>
            Deposit id
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExDeposit.CreateTime">
            <summary>
            Creation time
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExDeposit.TransactionId">
            <summary>
            Transaction id
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExDeposit.Asset">
            <summary>
            Asset
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExDeposit.Network">
            <summary>
            Network
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExDeposit.Quantity">
            <summary>
            Quantity deposited
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExDeposit.QuantityCredited">
            <summary>
            Actual amount received
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExDeposit.DepositAddress">
            <summary>
            Deposit address
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExDeposit.Confirmations">
            <summary>
            Amount of confirmations
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExDeposit.Status">
            <summary>
            Status of the deposit
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExDeposit.TransactionExplorerUrl">
            <summary>
            Blockchain explorer url for the transaction
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExDeposit.DepositAddressExplorerUrl">
            <summary>
            Blockchain explorer url for the deposit address
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExDeposit.Remark">
            <summary>
            Remark
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExDeposit.DepositMethod">
            <summary>
            Deposit method
            </summary>
        </member>
        <member name="T:CoinEx.Net.Objects.Models.V2.CoinExDepositAddress">
            <summary>
            Deposit addres
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExDepositAddress.Memo">
            <summary>
            Memo
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExDepositAddress.Address">
            <summary>
            Deposit address
            </summary>
        </member>
        <member name="T:CoinEx.Net.Objects.Models.V2.CoinExDepositWithdrawalConfig">
            <summary>
            Deposit and withdrawal configuration and info
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExDepositWithdrawalConfig.Asset">
            <summary>
            Asset information
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExDepositWithdrawalConfig.Networks">
            <summary>
            Available networks
            </summary>
        </member>
        <member name="T:CoinEx.Net.Objects.Models.V2.CoinExDepositWithdrawalAsset">
            <summary>
            Asset infos
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExDepositWithdrawalAsset.Asset">
            <summary>
            Asset name
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExDepositWithdrawalAsset.DepositEnabled">
            <summary>
            Is deposit enabled
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExDepositWithdrawalAsset.WithdrawEnabled">
            <summary>
            Is withdrawal enabled
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExDepositWithdrawalAsset.InterTransferEnabled">
            <summary>
            Is inter user transfer enabled
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExDepositWithdrawalAsset.IsSt">
            <summary>
            Is st
            </summary>
        </member>
        <member name="T:CoinEx.Net.Objects.Models.V2.CoinExNetwork">
            <summary>
            Network info
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExNetwork.Network">
            <summary>
            Network name
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExNetwork.MinDepositQuantity">
            <summary>
            Min deposit quantity
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExNetwork.MinWithdrawQuantity">
            <summary>
            Min withdraw quantity
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExNetwork.DepositEnabled">
            <summary>
            Is deposit enabled
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExNetwork.WithdrawEnabled">
            <summary>
            Is withdrawal enabled
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExNetwork.SafeConfirmations">
            <summary>
            Number of confirmations needed
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExNetwork.IrreversableConfirmations">
            <summary>
            Number of confirmations before transaction is irreversable
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExNetwork.DeflationRate">
            <summary>
            Deflation rate
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExNetwork.WithdrawalFee">
            <summary>
            Withdrawal fee
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExNetwork.WithdrawalPrecision">
            <summary>
            Withdrawal precision
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExNetwork.Memo">
            <summary>
            Memo
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExNetwork.MemoRequired">
            <summary>
            Is memo required for deposits
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExNetwork.ExplorerUrl">
            <summary>
            Blockchain explorer url
            </summary>
        </member>
        <member name="T:CoinEx.Net.Objects.Models.V2.CoinExFundingRate">
            <summary>
            Funding rate info
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExFundingRate.Symbol">
            <summary>
            Symbol
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExFundingRate.MarkPrice">
            <summary>
            Mark price
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExFundingRate.LastFundingRate">
            <summary>
            Last funding rate
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExFundingRate.NextFundingRate">
            <summary>
            Next funding rate
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExFundingRate.LastFundingTime">
            <summary>
            Last funding time
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExFundingRate.NextFundingTime">
            <summary>
            Next funding time
            </summary>
        </member>
        <member name="T:CoinEx.Net.Objects.Models.V2.CoinExFundingRateHistory">
            <summary>
            Historic funding rate info
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExFundingRateHistory.Symbol">
            <summary>
            Symbol
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExFundingRateHistory.FundingTime">
            <summary>
            Funding time
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExFundingRateHistory.TheoreticalFundingrate">
            <summary>
            Theoretical funding rate. The theoretical funding rate to be collected for the current period after calculation
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExFundingRateHistory.ActualFundingRate">
            <summary>
            Actual funding rate. The actual funding rate charged in the current period
            </summary>
        </member>
        <member name="T:CoinEx.Net.Objects.Models.V2.CoinExFuturesBalance">
            <summary>
            Futures balance info
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExFuturesBalance.Asset">
            <summary>
            Asset
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExFuturesBalance.Available">
            <summary>
            Available balance
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExFuturesBalance.Frozen">
            <summary>
            Frozen balance
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExFuturesBalance.Margin">
            <summary>
            Position margin
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExFuturesBalance.UnrealizedPnl">
            <summary>
            Unrealized profit and loss
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExFuturesBalance.Transferable">
            <summary>
            Transferable balance
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExFuturesBalance.Equity">
            <summary>
            Equity
            </summary>
        </member>
        <member name="T:CoinEx.Net.Objects.Models.V2.CoinExFuturesOrder">
            <summary>
            Order info
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExFuturesOrder.Id">
            <summary>
            Order id
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExFuturesOrder.Symbol">
            <summary>
            Symbol
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExFuturesOrder.AccountType">
            <summary>
            Account type
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExFuturesOrder.Side">
            <summary>
            Order side
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExFuturesOrder.OrderType">
            <summary>
            Order type
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExFuturesOrder.Quantity">
            <summary>
            Order quantity
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExFuturesOrder.Price">
            <summary>
            Order price
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExFuturesOrder.QuantityRemaining">
            <summary>
            Quantity remaining
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExFuturesOrder.QuantityFilled">
            <summary>
            Quantity filled
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExFuturesOrder.ValueFilled">
            <summary>
            Value of the filled part
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExFuturesOrder.ClientOrderId">
            <summary>
            Client order id
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExFuturesOrder.Fee">
            <summary>
            Fee
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExFuturesOrder.FeeAsset">
            <summary>
            Fee asset
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExFuturesOrder.MakerFeeRate">
            <summary>
            Maker fee rate
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExFuturesOrder.TakerFeeRate">
            <summary>
            Taker fee rate
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExFuturesOrder.LastFilledQuantity">
            <summary>
            Filled amount of the last trade
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExFuturesOrder.LastFilledPrice">
            <summary>
            Price of the last trade
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExFuturesOrder.RealizedPnl">
            <summary>
            Realized profit and loss
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExFuturesOrder.CreateTime">
            <summary>
            Timestamp order was created
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExFuturesOrder.UpdateTime">
            <summary>
            Timestamp order was last updated
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExFuturesOrder.Status">
            <summary>
            Status of the order
            </summary>
        </member>
        <member name="T:CoinEx.Net.Objects.Models.V2.CoinExFuturesOrderUpdate">
            <summary>
            Order update
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExFuturesOrderUpdate.Event">
            <summary>
            Event that triggered the update
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExFuturesOrderUpdate.Order">
            <summary>
            Order data
            </summary>
        </member>
        <member name="T:CoinEx.Net.Objects.Models.V2.CoinExFuturesPlaceOrderRequest">
            <summary>
            Place order request
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExFuturesPlaceOrderRequest.Symbol">
            <summary>
            The symbol, for example `ETHUSDT`
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExFuturesPlaceOrderRequest.AccountType">
            <summary>
            The account type
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExFuturesPlaceOrderRequest.Side">
            <summary>
            The side
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExFuturesPlaceOrderRequest.OrderType">
            <summary>
            The order type
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExFuturesPlaceOrderRequest.Quantity">
            <summary>
            The quantity
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExFuturesPlaceOrderRequest.Price">
            <summary>
            The limit price
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExFuturesPlaceOrderRequest.ClientOrderId">
            <summary>
            The client order id
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExFuturesPlaceOrderRequest.Hide">
            <summary>
            Whether to hide the order
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExFuturesPlaceOrderRequest.StpMode">
            <summary>
            Self trade prevention mode
            </summary>
        </member>
        <member name="T:CoinEx.Net.Objects.Models.V2.CoinExFuturesPlaceStopOrderRequest">
            <summary>
            Place stop order request
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExFuturesPlaceStopOrderRequest.Symbol">
            <summary>
            The symbol, for example `ETHUSDT`
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExFuturesPlaceStopOrderRequest.AccountType">
            <summary>
            The account type
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExFuturesPlaceStopOrderRequest.Side">
            <summary>
            The side
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExFuturesPlaceStopOrderRequest.OrderType">
            <summary>
            The order type
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExFuturesPlaceStopOrderRequest.Quantity">
            <summary>
            The quantity
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExFuturesPlaceStopOrderRequest.Price">
            <summary>
            The limit price
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExFuturesPlaceStopOrderRequest.TriggerPrice">
            <summary>
            The trigger price
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExFuturesPlaceStopOrderRequest.TriggerPriceType">
            <summary>
            The trigger price type
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExFuturesPlaceStopOrderRequest.ClientOrderId">
            <summary>
            The client order id
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExFuturesPlaceStopOrderRequest.Hide">
            <summary>
            Whether to hide the order
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExFuturesPlaceStopOrderRequest.StpMode">
            <summary>
            Self trade prevention mode
            </summary>
        </member>
        <member name="T:CoinEx.Net.Objects.Models.V2.CoinExFuturesSymbol">
            <summary>
            Futures symbol info
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExFuturesSymbol.Symbol">
            <summary>
            Symbol name
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExFuturesSymbol.ContractType">
            <summary>
            Contract type
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExFuturesSymbol.TakerFeeRate">
            <summary>
            Taker fee rate
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExFuturesSymbol.MakerFeeRate">
            <summary>
            Maker fee rate
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExFuturesSymbol.MinOrderQuantity">
            <summary>
            Min order quantity
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExFuturesSymbol.BaseAsset">
            <summary>
            Base asset
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExFuturesSymbol.QuoteAsset">
            <summary>
            Quote asset
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExFuturesSymbol.QuantityPrecision">
            <summary>
            Base asset precision
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExFuturesSymbol.PricePrecision">
            <summary>
            Quote asset precision
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExFuturesSymbol.Leverage">
            <summary>
            Leverage
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExFuturesSymbol.OpenInterestVolume">
            <summary>
            Open interest volume
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExFuturesSymbol.TradingAvailable">
            <summary>
            Is trading available
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExFuturesSymbol.CopyTradingAvailable">
            <summary>
            Is copy trading available
            </summary>
        </member>
        <member name="T:CoinEx.Net.Objects.Models.V2.CoinExFuturesTicker">
            <inheritdoc />
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExFuturesTicker.IndexPrice">
            <summary>
            Index price
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExFuturesTicker.MarkPrice">
            <summary>
            Mark price
            </summary>
        </member>
        <member name="T:CoinEx.Net.Objects.Models.V2.CoinExFuturesTickerUpdate">
            <summary>
            Futures ticker update
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExFuturesTickerUpdate.OpenInterestSize">
            <summary>
            Open interest size
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExFuturesTickerUpdate.LastFundingRate">
            <summary>
            Last funding rate
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExFuturesTickerUpdate.NextFundingRate">
            <summary>
            Next funding rate
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExFuturesTickerUpdate.LastFundingTime">
            <summary>
            Last funding time
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExFuturesTickerUpdate.NextFundingTime">
            <summary>
            Next funding time
            </summary>
        </member>
        <member name="T:CoinEx.Net.Objects.Models.V2.CoinExIndexPrice">
            <summary>
            Index price
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExIndexPrice.Symbol">
            <summary>
            Symbol
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExIndexPrice.Timestamp">
            <summary>
            Timestamp
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExIndexPrice.Price">
            <summary>
            Price
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExIndexPrice.Sources">
            <summary>
            Index sources
            </summary>
        </member>
        <member name="T:CoinEx.Net.Objects.Models.V2.CoinExIndexPriceSource">
            <summary>
            Index price source
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExIndexPriceSource.Exchange">
            <summary>
            Exchange
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExIndexPriceSource.Timestamp">
            <summary>
            Timestamp
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExIndexPriceSource.Weight">
            <summary>
            Weight of the source
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExIndexPriceSource.Price">
            <summary>
            Price
            </summary>
        </member>
        <member name="T:CoinEx.Net.Objects.Models.V2.CoinExIndexPriceUpdate">
            <summary>
            Index price update
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExIndexPriceUpdate.Symbol">
            <summary>
            Symbol
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExIndexPriceUpdate.IndexPrice">
            <summary>
            Index price
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExIndexPriceUpdate.MarkPrice">
            <summary>
            Mark price
            </summary>
        </member>
        <member name="T:CoinEx.Net.Objects.Models.V2.CoinExKline">
            <summary>
            Kline/candlestick info
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExKline.Symbol">
            <summary>
            Symbol
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExKline.OpenTime">
            <summary>
            Open time
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExKline.OpenPrice">
            <summary>
            Open price
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExKline.ClosePrice">
            <summary>
            Close price
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExKline.HighPrice">
            <summary>
            High price
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExKline.LowPrice">
            <summary>
            Low price
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExKline.Volume">
            <summary>
            Volume
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExKline.Value">
            <summary>
            Value (Quote asset volume)
            </summary>
        </member>
        <member name="T:CoinEx.Net.Objects.Models.V2.CoinExLeverage">
            <summary>
            Leverage info
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExLeverage.MarginMode">
            <summary>
            Margin mode
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExLeverage.Leverage">
            <summary>
            Leverage
            </summary>
        </member>
        <member name="T:CoinEx.Net.Objects.Models.V2.CoinExLiquidation">
            <summary>
            Liquidation record
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExLiquidation.Symbol">
            <summary>
            Symbol
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExLiquidation.Side">
            <summary>
            Position side
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExLiquidation.LiquidationPrice">
            <summary>
            Liquidation price
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExLiquidation.LiquidationQuantity">
            <summary>
            Liquidation quantity
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExLiquidation.BankruptcyPrice">
            <summary>
            Bankruptcy price
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExLiquidation.CreateTime">
            <summary>
            Timestamp
            </summary>
        </member>
        <member name="T:CoinEx.Net.Objects.Models.V2.CoinExMaintenance">
            <summary>
            Maintenance info
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExMaintenance.StartTime">
            <summary>
            Start time of the maintenance
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExMaintenance.EndTime">
            <summary>
            End time of the maintenance
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExMaintenance.Scope">
            <summary>
            Scope that's impacted
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExMaintenance.ProtectDurationStart">
            <summary>
            Protection period start time. The protection period refers to a continuous period following the system maintenance (It's an optional configuration, and may or may not be set). During the protection period, you can cancel orders, place orders (limited to Maker Only Limit Orders), and adjust (add or reduce) margins.
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExMaintenance.ProtectDurationEnd">
            <summary>
            Protection period end time. The protection period refers to a continuous period following the system maintenance (It's an optional configuration, and may or may not be set). During the protection period, you can cancel orders, place orders (limited to Maker Only Limit Orders), and adjust (add or reduce) margins.
            </summary>
        </member>
        <member name="T:CoinEx.Net.Objects.Models.V2.CoinExMarginBalance">
            <summary>
            Margin balance info
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExMarginBalance.MarginAccount">
            <summary>
            Margin account
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExMarginBalance.BaseAsset">
            <summary>
            Base asset
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExMarginBalance.QuoteAsset">
            <summary>
            Quote asset
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExMarginBalance.RiskRate">
            <summary>
            Current risk rate
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExMarginBalance.LiquidationPrice">
            <summary>
            Current liquidation price
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExMarginBalance.Available">
            <summary>
            Available
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExMarginBalance.Frozen">
            <summary>
            Frozen
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExMarginBalance.Repaid">
            <summary>
            Repaid
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExMarginBalance.Interest">
            <summary>
            Interest
            </summary>
        </member>
        <member name="T:CoinEx.Net.Objects.Models.V2.CoinExMarginAssetsBalance">
            <summary>
            Assets balance info
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExMarginAssetsBalance.BaseAsset">
            <summary>
            Base asset amount
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExMarginAssetsBalance.QuoteAsset">
            <summary>
            Quote asset amount
            </summary>
        </member>
        <member name="T:CoinEx.Net.Objects.Models.V2.CoinExOrder">
            <summary>
            Order info
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExOrder.Id">
            <summary>
            Order id
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExOrder.Symbol">
            <summary>
            Symbol
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExOrder.AccountType">
            <summary>
            Account type
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExOrder.QuantityAsset">
            <summary>
            Asset the quantity is in
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExOrder.Side">
            <summary>
            Order side
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExOrder.OrderType">
            <summary>
            Order type
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExOrder.Quantity">
            <summary>
            Order quantity
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExOrder.Price">
            <summary>
            Order price
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExOrder.QuantityRemaining">
            <summary>
            Quantity remaining
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExOrder.QuantityFilled">
            <summary>
            Quantity filled
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExOrder.ValueFilled">
            <summary>
            Value of the filled part
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExOrder.ClientOrderId">
            <summary>
            Client order id
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExOrder.FeeBaseAsset">
            <summary>
            Fee in base asset
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExOrder.FeeQuoteAsset">
            <summary>
            Fee in quote asset
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExOrder.FeeDiscount">
            <summary>
            Fee discount
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExOrder.MakerFeeRate">
            <summary>
            Maker fee rate
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExOrder.TakerFeeRate">
            <summary>
            Taker fee rate
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExOrder.LastFilledQuantity">
            <summary>
            Filled amount of the last trade
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExOrder.LastFilledPrice">
            <summary>
            Price of the last trade
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExOrder.CreateTime">
            <summary>
            Timestamp order was created
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExOrder.UpdateTime">
            <summary>
            Timestamp order was last updated
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExOrder.Status">
            <summary>
            Status of the order
            </summary>
        </member>
        <member name="T:CoinEx.Net.Objects.Models.V2.CoinExOrderBook">
            <summary>
            Order book info
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExOrderBook.Symbol">
            <summary>
            Symbol
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExOrderBook.IsFull">
            <summary>
            Is full order book
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExOrderBook.Data">
            <summary>
            The book data
            </summary>
        </member>
        <member name="T:CoinEx.Net.Objects.Models.V2.CoinExOrderBookData">
            <summary>
            Order book data
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExOrderBookData.Asks">
            <summary>
            Asks list
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExOrderBookData.Bids">
            <summary>
            Bids list
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExOrderBookData.LastPrice">
            <summary>
            Last price
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExOrderBookData.UpdateTime">
            <summary>
            Update time
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExOrderBookData.Checksum">
            <summary>
            Checksum for validating the order book is correct
            </summary>
        </member>
        <member name="T:CoinEx.Net.Objects.Models.V2.CoinExOrderBookEntry">
            <summary>
            Order book entry
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExOrderBookEntry.Price">
            <summary>
            Price
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExOrderBookEntry.Quantity">
            <summary>
            Quantity
            </summary>
        </member>
        <member name="T:CoinEx.Net.Objects.Models.V2.CoinExOrderUpdate">
            <summary>
            Order update
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExOrderUpdate.Event">
            <summary>
            Event that triggered the update
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExOrderUpdate.Order">
            <summary>
            Order data
            </summary>
        </member>
        <member name="T:CoinEx.Net.Objects.Models.V2.CoinExPaginated`1">
            <summary>
            Paginated result
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExPaginated`1.Total">
            <summary>
            Total results
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExPaginated`1.HasNext">
            <summary>
            Has next page
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExPaginated`1.Items">
            <summary>
            Page items
            </summary>
        </member>
        <member name="T:CoinEx.Net.Objects.Models.V2.CoinExPlaceOrderRequest">
            <summary>
            Place order request
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExPlaceOrderRequest.Symbol">
            <summary>
            The symbol, for example `ETHUSDT`
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExPlaceOrderRequest.AccountType">
            <summary>
            The account type
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExPlaceOrderRequest.Side">
            <summary>
            The side
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExPlaceOrderRequest.OrderType">
            <summary>
            The order type
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExPlaceOrderRequest.QuantityAsset">
            <summary>
            The asset the quantity is in, for market orders van be the base or quote asset
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExPlaceOrderRequest.Quantity">
            <summary>
            The quantity
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExPlaceOrderRequest.Price">
            <summary>
            The limit price
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExPlaceOrderRequest.ClientOrderId">
            <summary>
            The client order id
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExPlaceOrderRequest.Hide">
            <summary>
            Whether to hide the order
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExPlaceOrderRequest.StpMode">
            <summary>
            Self trade prevention mode
            </summary>
        </member>
        <member name="T:CoinEx.Net.Objects.Models.V2.CoinExPlaceStopOrderRequest">
            <summary>
            Place stop order request
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExPlaceStopOrderRequest.Symbol">
            <summary>
            The symbol, for example `ETHUSDT`
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExPlaceStopOrderRequest.AccountType">
            <summary>
            The account type
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExPlaceStopOrderRequest.Side">
            <summary>
            The side
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExPlaceStopOrderRequest.OrderType">
            <summary>
            The order type
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExPlaceStopOrderRequest.QuantityAsset">
            <summary>
            The asset the quantity is in, for market orders van be the base or quote asset
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExPlaceStopOrderRequest.Quantity">
            <summary>
            The quantity
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExPlaceStopOrderRequest.Price">
            <summary>
            The limit price
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExPlaceStopOrderRequest.TriggerPrice">
            <summary>
            The trigger price
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExPlaceStopOrderRequest.ClientOrderId">
            <summary>
            The client order id
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExPlaceStopOrderRequest.Hide">
            <summary>
            Whether to hide the order
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExPlaceStopOrderRequest.StpMode">
            <summary>
            Self trade prevention mode
            </summary>
        </member>
        <member name="T:CoinEx.Net.Objects.Models.V2.CoinExPosition">
            <summary>
            Position info
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExPosition.Id">
            <summary>
            Position id
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExPosition.Symbol">
            <summary>
            Symbol
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExPosition.AccountType">
            <summary>
            Account type
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExPosition.Side">
            <summary>
            Position side
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExPosition.MarginMode">
            <summary>
            Margin mode
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExPosition.OpenInterest">
            <summary>
            Open interest
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExPosition.CloseAvailable">
            <summary>
            position size available for closing
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExPosition.AthPositionQuantity">
            <summary>
            All time high position quantity
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExPosition.UnrealizedPnl">
            <summary>
            Unrealized profit and loss
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExPosition.RealizedPnl">
            <summary>
            Realized profit and loss
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExPosition.AverageEntryPrice">
            <summary>
            Average entry price
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExPosition.PositionValue">
            <summary>
            Cumulative position value
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExPosition.MaxPositionValue">
            <summary>
            Max position value
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExPosition.TakeProfitPrice">
            <summary>
            Take profit price
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExPosition.StopLossPrice">
            <summary>
            Stop loss price
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExPosition.TakeProfitType">
            <summary>
            Take profit price type
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExPosition.StopLossType">
            <summary>
            Stop loss price type
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExPosition.Leverage">
            <summary>
            Leverage
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExPosition.MarginAvailable">
            <summary>
            Margin available
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExPosition.AthMarginSize">
            <summary>
            All time high margin size
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExPosition.PositionMarginRate">
            <summary>
            Position margin rate
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExPosition.MaintenanceMarginRate">
            <summary>
            Maintenance margin rate
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExPosition.MaintenanceMarginValue">
            <summary>
            Maintenance margin value
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExPosition.LiquidationPrice">
            <summary>
            Liquidation price
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExPosition.BankruptcyPrice">
            <summary>
            Bankruptcy price
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExPosition.AdlLevel">
            <summary>
            Auto deleveraging level
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExPosition.SettlePrice">
            <summary>
            Settlement price
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExPosition.SettleValue">
            <summary>
            Settlement value
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExPosition.CreateTime">
            <summary>
            Timestamp created
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExPosition.UpdateTime">
            <summary>
            Timestamp last updated
            </summary>
        </member>
        <member name="T:CoinEx.Net.Objects.Models.V2.CoinExPositionAdl">
            <summary>
            Auto deleveraging info
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExPositionAdl.Id">
            <summary>
            Position id
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExPositionAdl.Symbol">
            <summary>
            Symbol
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExPositionAdl.AccountType">
            <summary>
            Account type
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExPositionAdl.OrderId">
            <summary>
            Order id
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExPositionAdl.TradeId">
            <summary>
            Trade id
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExPositionAdl.Side">
            <summary>
            Order side
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExPositionAdl.Quantity">
            <summary>
            Order quantity
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExPositionAdl.Price">
            <summary>
            Order price
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExPositionAdl.Role">
            <summary>
            Role
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExPositionAdl.CreateTime">
            <summary>
            Timestamp created
            </summary>
        </member>
        <member name="T:CoinEx.Net.Objects.Models.V2.CoinExPositionFundingRate">
            <summary>
            Position funding rate history
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExPositionFundingRate.Id">
            <summary>
            Position id
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExPositionFundingRate.Symbol">
            <summary>
            Symbol
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExPositionFundingRate.AccountType">
            <summary>
            Account type
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExPositionFundingRate.Side">
            <summary>
            Position side
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExPositionFundingRate.MarginMode">
            <summary>
            Margin mode
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExPositionFundingRate.OpenInterest">
            <summary>
            Open interest
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExPositionFundingRate.SettlePrice">
            <summary>
            Settlement price
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExPositionFundingRate.FundingRate">
            <summary>
            Funding rate
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExPositionFundingRate.FundingValue">
            <summary>
            Funding value
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExPositionFundingRate.CreateTime">
            <summary>
            Timestamp
            </summary>
        </member>
        <member name="T:CoinEx.Net.Objects.Models.V2.CoinExPositionLevels">
            <summary>
            Position levels info
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExPositionLevels.Symbol">
            <summary>
            Symbol
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExPositionLevels.Levels">
            <summary>
            Levels
            </summary>
        </member>
        <member name="T:CoinEx.Net.Objects.Models.V2.CoinExPositionLevel">
            <summary>
            Position level info
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExPositionLevel.Amount">
            <summary>
            Upper limit of the current position
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExPositionLevel.Leverage">
            <summary>
            Leverage of current level
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExPositionLevel.MaintenanceMarginRate">
            <summary>
            Current maintenance margin rate
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExPositionLevel.MinInitialMarginRate">
            <summary>
            Minimum initial margin rate for the current level
            </summary>
        </member>
        <member name="T:CoinEx.Net.Objects.Models.V2.CoinExPositionMargin">
            <summary>
            Position margin info
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExPositionMargin.Id">
            <summary>
            Position id
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExPositionMargin.Symbol">
            <summary>
            Symbol
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExPositionMargin.AccountType">
            <summary>
            Account type
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExPositionMargin.MarginMode">
            <summary>
            Margin mode
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExPositionMargin.Leverage">
            <summary>
            Leverage
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExPositionMargin.LiquidationPrice">
            <summary>
            Liquidation price
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExPositionMargin.BankruptcyPrice">
            <summary>
            Bankruptcy price
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExPositionMargin.SettlePrice">
            <summary>
            Settlement price
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExPositionMargin.OpenInterest">
            <summary>
            Open interest
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExPositionMargin.MarginAvailable">
            <summary>
            Margin available
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExPositionMargin.MarginChange">
            <summary>
            Adjusted margin amount
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExPositionMargin.CreateTime">
            <summary>
            Timestamp created
            </summary>
        </member>
        <member name="T:CoinEx.Net.Objects.Models.V2.CoinExPositionSettlement">
            <summary>
            Position settlement info
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExPositionSettlement.Id">
            <summary>
            Position id
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExPositionSettlement.Symbol">
            <summary>
            Symbol
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExPositionSettlement.AccountType">
            <summary>
            Account type
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExPositionSettlement.MarginMode">
            <summary>
            Margin mode
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExPositionSettlement.Leverage">
            <summary>
            Leverage
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExPositionSettlement.LiquidationPrice">
            <summary>
            Liquidation price
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExPositionSettlement.BankruptcyPrice">
            <summary>
            Bankruptcy price
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExPositionSettlement.SettlePrice">
            <summary>
            Settlement price
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExPositionSettlement.OpenInterest">
            <summary>
            Open interest
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExPositionSettlement.MarginAvailable">
            <summary>
            Margin available
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExPositionSettlement.MarginChange">
            <summary>
            Adjusted margin amount
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExPositionSettlement.CreateTime">
            <summary>
            Timestamp created
            </summary>
        </member>
        <member name="T:CoinEx.Net.Objects.Models.V2.CoinExPositionUpdate">
            <summary>
            Position update
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExPositionUpdate.Event">
            <summary>
            Event that triggered the update
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExPositionUpdate.Position">
            <summary>
            Position data
            </summary>
        </member>
        <member name="T:CoinEx.Net.Objects.Models.V2.CoinExStreamPosition">
            <summary>
            Position info
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExStreamPosition.FirstFilledPrice">
            <summary>
            First filled price
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExStreamPosition.LastFilledPrice">
            <summary>
            Last filled price
            </summary>
        </member>
        <member name="T:CoinEx.Net.Objects.Models.V2.CoinExPremiumIndexHistory">
            <summary>
            Historic premium index
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExPremiumIndexHistory.Symbol">
            <summary>
            Symbol
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExPremiumIndexHistory.Timestamp">
            <summary>
            Timestamp
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExPremiumIndexHistory.PremiumIndex">
            <summary>
            	Premium index. The main basis for calculating the funding rate
            </summary>
        </member>
        <member name="T:CoinEx.Net.Objects.Models.V2.CoinExStopId">
            <summary>
            Stop order id
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExStopId.StopOrderId">
            <summary>
            Stop order id
            </summary>
        </member>
        <member name="T:CoinEx.Net.Objects.Models.V2.CoinExStopOrder">
            <summary>
            Stop order info
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExStopOrder.StopOrderId">
            <summary>
            Order id
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExStopOrder.Symbol">
            <summary>
            Symbol
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExStopOrder.AccountType">
            <summary>
            Account type
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExStopOrder.QuantityAsset">
            <summary>
            Asset the quantity is in
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExStopOrder.Side">
            <summary>
            Order side
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExStopOrder.Type">
            <summary>
            Order type
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExStopOrder.Quantity">
            <summary>
            Order quantity
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExStopOrder.Price">
            <summary>
            Order price
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExStopOrder.ClientOrderId">
            <summary>
            Client order id
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExStopOrder.CreateTime">
            <summary>
            Timestamp order was created
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExStopOrder.UpdateTime">
            <summary>
            Timestamp order was last updated
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExStopOrder.TriggerPrice">
            <summary>
            Trigger price
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExStopOrder.TriggerDirection">
            <summary>
            Trigger direction
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExStopOrder.TriggerPriceType">
            <summary>
            Trigger price type
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExStopOrder.TakerFeeRate">
            <summary>
            Taker fee rate
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExStopOrder.MakerFeeRate">
            <summary>
            Maker fee rate
            </summary>
        </member>
        <member name="T:CoinEx.Net.Objects.Models.V2.CoinExStopOrderUpdate">
            <summary>
            Stop order update
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExStopOrderUpdate.Event">
            <summary>
            Event that triggered the update
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExStopOrderUpdate.Order">
            <summary>
            Order data
            </summary>
        </member>
        <member name="T:CoinEx.Net.Objects.Models.V2.CoinExStreamOrder">
            <summary>
            Order info
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExStreamOrder.Id">
            <summary>
            Order id
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExStreamOrder.Symbol">
            <summary>
            Symbol
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExStreamOrder.Side">
            <summary>
            Order side
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExStreamOrder.OrderType">
            <summary>
            Order type
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExStreamOrder.Quantity">
            <summary>
            Order quantity
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExStreamOrder.Price">
            <summary>
            Order price
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExStreamOrder.QuantityRemaining">
            <summary>
            Quantity remaining
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExStreamOrder.QuantityFilled">
            <summary>
            Quantity filled
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExStreamOrder.ValueFilled">
            <summary>
            Value of the filled part
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExStreamOrder.ClientOrderId">
            <summary>
            Client order id
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExStreamOrder.FeeBaseAsset">
            <summary>
            Fee in base asset
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExStreamOrder.FeeQuoteAsset">
            <summary>
            Fee in quote asset
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExStreamOrder.FeeDiscount">
            <summary>
            Fee discount
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExStreamOrder.MakerFeeRate">
            <summary>
            Maker fee rate
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExStreamOrder.TakerFeeRate">
            <summary>
            Taker fee rate
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExStreamOrder.LastFilledQuantity">
            <summary>
            Filled amount of the last trade
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExStreamOrder.LastFilledPrice">
            <summary>
            Price of the last trade
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExStreamOrder.CreateTime">
            <summary>
            Timestamp order was created
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExStreamOrder.UpdateTime">
            <summary>
            Timestamp order was last updated
            </summary>
        </member>
        <member name="T:CoinEx.Net.Objects.Models.V2.CoinExSymbol">
            <summary>
            Symbol info
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExSymbol.Name">
            <summary>
            Symbol name
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExSymbol.MakerFeeRate">
            <summary>
            Maker fee rate
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExSymbol.TakerFeeRate">
            <summary>
            Taker fee rate
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExSymbol.MinOrderQuantity">
            <summary>
            Minimal order quantiy
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExSymbol.BaseAsset">
            <summary>
            Base asset
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExSymbol.QuoteAsset">
            <summary>
            Quote asset
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExSymbol.QuantityPrecision">
            <summary>
            Quantity precision
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExSymbol.PricePrecision">
            <summary>
            Price precision
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExSymbol.AutoMarketMakerAvailable">
            <summary>
            Is Automated Market Maker available
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExSymbol.MarginTradingAvailable">
            <summary>
            Is Margin Trading available
            </summary>
        </member>
        <member name="T:CoinEx.Net.Objects.Models.V2.CoinExTicker">
            <summary>
            Ticker (24h price stats) info
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExTicker.Symbol">
            <summary>
            Symbol name
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExTicker.LastPrice">
            <summary>
            Last price
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExTicker.OpenPrice">
            <summary>
            Open price
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExTicker.ClosePrice">
            <summary>
            Close price
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExTicker.HighPrice">
            <summary>
            High price
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExTicker.LowPrice">
            <summary>
            Low price
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExTicker.Volume">
            <summary>
            Volume in base asset
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExTicker.Value">
            <summary>
            Volume in quote asset
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExTicker.SellVolume">
            <summary>
            Sell volume
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExTicker.BuyVolume">
            <summary>
            Buy volume
            </summary>
        </member>
        <member name="T:CoinEx.Net.Objects.Models.V2.CoinExTrade">
            <summary>
            Trade info
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExTrade.Id">
            <summary>
            Trade id
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExTrade.Timestamp">
            <summary>
            Timestamp
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExTrade.Side">
            <summary>
            Trade side
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExTrade.Price">
            <summary>
            Price traded at
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExTrade.Quantity">
            <summary>
            Quantity traded
            </summary>
        </member>
        <member name="T:CoinEx.Net.Objects.Models.V2.CoinExTradeFee">
            <summary>
            Trading fee info
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExTradeFee.Symbol">
            <summary>
            Symbol
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExTradeFee.MakerFeeRate">
            <summary>
            Fee for maker trades
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExTradeFee.TakerFeeRate">
            <summary>
            Fee for taker trades
            </summary>
        </member>
        <member name="T:CoinEx.Net.Objects.Models.V2.CoinExTransaction">
            <summary>
            Transaction info
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExTransaction.CreateTime">
            <summary>
            Creation time
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExTransaction.Asset">
            <summary>
            Asset
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExTransaction.Balance">
            <summary>
            Balance after change
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExTransaction.Change">
            <summary>
            Quantity of the transaction
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExTransaction.Type">
            <summary>
            Transfer status
            </summary>
        </member>
        <member name="T:CoinEx.Net.Objects.Models.V2.CoinExTransfer">
            <summary>
            Transfer info
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExTransfer.MarginSymbol">
            <summary>
            Margin symbol if either from account or to account was Margin
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExTransfer.CreateTime">
            <summary>
            Creation time
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExTransfer.FromAccountType">
            <summary>
            From account type
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExTransfer.ToAccountType">
            <summary>
            To account type
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExTransfer.Asset">
            <summary>
            Asset
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExTransfer.Quantity">
            <summary>
            Transfer quantity
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExTransfer.Status">
            <summary>
            Transfer status
            </summary>
        </member>
        <member name="T:CoinEx.Net.Objects.Models.V2.CoinExUserTrade">
            <summary>
            User trade info
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExUserTrade.Id">
            <summary>
            Trade id
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExUserTrade.CreateTime">
            <summary>
            Trade time
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExUserTrade.Symbol">
            <summary>
            Symbol
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExUserTrade.Side">
            <summary>
            Trade side
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExUserTrade.OrderId">
            <summary>
            Order id
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExUserTrade.MarginSymbol">
            <summary>
            Margin symbol
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExUserTrade.Price">
            <summary>
            Trade price
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExUserTrade.Quantity">
            <summary>
            Quantity traded
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExUserTrade.Fee">
            <summary>
            Fee paid
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExUserTrade.FeeAsset">
            <summary>
            Fee asset
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExUserTrade.Role">
            <summary>
            Role
            </summary>
        </member>
        <member name="T:CoinEx.Net.Objects.Models.V2.CoinExWithdrawal">
            <summary>
            Withdrawal info
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExWithdrawal.Id">
            <summary>
            Withdrawal id
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExWithdrawal.CreateTime">
            <summary>
            Creation time
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExWithdrawal.Asset">
            <summary>
            Asset
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExWithdrawal.Network">
            <summary>
            Network
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExWithdrawal.Memo">
            <summary>
            Memo
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExWithdrawal.Quantity">
            <summary>
            Quantity
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExWithdrawal.ActualQuantity">
            <summary>
            Actual withdrawal quantity
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExWithdrawal.Fee">
            <summary>
            Fee
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExWithdrawal.TransactionId">
            <summary>
            Transaction id
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExWithdrawal.ToAddress">
            <summary>
            Destination address
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExWithdrawal.Confirmations">
            <summary>
            Number of confirmations
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExWithdrawal.TransactionExplorerUrl">
            <summary>
            Blockchain explorer url for the transaction
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExWithdrawal.WithdrawalAddressExplorerUrl">
            <summary>
            Blockchain explorer url for the deposit address
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExWithdrawal.Status">
            <summary>
            Status
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.V2.CoinExWithdrawal.Remark">
            <summary>
            Remark
            </summary>
        </member>
        <member name="T:CoinEx.Net.Objects.Options.CoinExOrderBookOptions">
            <summary>
            Options for CoinEx SymbolOrderBook
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Options.CoinExOrderBookOptions.Default">
            <summary>
            Default options for the CoinEx SymbolOrderBook
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Options.CoinExOrderBookOptions.InitialDataTimeout">
            <summary>
            After how much time we should consider the connection dropped if no data is received for this time after the initial subscriptions
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Options.CoinExOrderBookOptions.Limit">
            <summary>
            The amount of rows. Should be one of: 5/10/20/50
            </summary>
        </member>
        <member name="T:CoinEx.Net.Objects.Options.CoinExRestOptions">
            <summary>
            Options for the CoinExRestClient
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Options.CoinExRestOptions.Default">
            <summary>
            Default options for the CoinExRestClient
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Options.CoinExRestOptions.NonceProvider">
            <summary>
            Optional nonce provider for signing requests. Careful providing a custom provider; once a nonce is sent to the server, every request after that needs a higher nonce than that
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Options.CoinExRestOptions.SpotOptions">
            <summary>
            Options for the Spot API
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Options.CoinExRestOptions.FuturesOptions">
            <summary>
            Options for the Futures API
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Options.CoinExRestOptions.BrokerId">
            <summary>
            The broker reference id to use
            </summary>
        </member>
        <member name="T:CoinEx.Net.Objects.Options.CoinExSocketOptions">
            <summary>
            Options for the CoinExSocketClient
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Options.CoinExSocketOptions.Default">
            <summary>
            Default options for the CoinExRestClient
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Options.CoinExSocketOptions.NonceProvider">
            <summary>
            Optional nonce provider for signing requests. Careful providing a custom provider; once a nonce is sent to the server, every request after that needs a higher nonce than that
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Options.CoinExSocketOptions.SpotOptions">
            <summary>
            Options for the Spot API
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Options.CoinExSocketOptions.FuturesOptions">
            <summary>
            Options for the Futures API
            </summary>
        </member>
        <member name="T:CoinEx.Net.SymbolOrderBooks.CoinExFuturesSymbolOrderBook">
            <summary>
            Symbol order book implementation
            </summary>
        </member>
        <member name="M:CoinEx.Net.SymbolOrderBooks.CoinExFuturesSymbolOrderBook.#ctor(System.String,System.Action{CoinEx.Net.Objects.Options.CoinExOrderBookOptions})">
            <summary>
            Create a new order book instance
            </summary>
            <param name="symbol">The symbol the order book is for</param>
            <param name="optionsDelegate">Option configuration delegate</param>
        </member>
        <member name="M:CoinEx.Net.SymbolOrderBooks.CoinExFuturesSymbolOrderBook.#ctor(System.String,System.Action{CoinEx.Net.Objects.Options.CoinExOrderBookOptions},Microsoft.Extensions.Logging.ILoggerFactory,CoinEx.Net.Interfaces.Clients.ICoinExSocketClient)">
            <summary>
            Create a new order book instance
            </summary>
            <param name="symbol">The symbol the order book is for</param>
            <param name="optionsDelegate">Option configuration delegate</param>
            <param name="logger">Logger</param>
            <param name="socketClient">Socket client instance</param>
        </member>
        <member name="M:CoinEx.Net.SymbolOrderBooks.CoinExFuturesSymbolOrderBook.DoStartAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.SymbolOrderBooks.CoinExFuturesSymbolOrderBook.DoResyncAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.SymbolOrderBooks.CoinExFuturesSymbolOrderBook.DoReset">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.SymbolOrderBooks.CoinExFuturesSymbolOrderBook.DoChecksum(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.SymbolOrderBooks.CoinExFuturesSymbolOrderBook.Dispose(System.Boolean)">
            <inheritdoc />
            <summary>
            Dispose
            </summary>
        </member>
        <member name="T:CoinEx.Net.SymbolOrderBooks.CoinExOrderBookFactory">
            <inheritdoc />
        </member>
        <member name="P:CoinEx.Net.SymbolOrderBooks.CoinExOrderBookFactory.Spot">
            <inheritdoc />
        </member>
        <member name="P:CoinEx.Net.SymbolOrderBooks.CoinExOrderBookFactory.Futures">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.SymbolOrderBooks.CoinExOrderBookFactory.#ctor(System.IServiceProvider)">
            <summary>
            ctor
            </summary>
            <param name="serviceProvider">Service provider for resolving logging and clients</param>
        </member>
        <member name="M:CoinEx.Net.SymbolOrderBooks.CoinExOrderBookFactory.Create(CryptoExchange.Net.SharedApis.SharedSymbol,System.Action{CoinEx.Net.Objects.Options.CoinExOrderBookOptions})">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.SymbolOrderBooks.CoinExOrderBookFactory.CreateSpot(System.String,System.Action{CoinEx.Net.Objects.Options.CoinExOrderBookOptions})">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.SymbolOrderBooks.CoinExOrderBookFactory.CreateFutures(System.String,System.Action{CoinEx.Net.Objects.Options.CoinExOrderBookOptions})">
            <inheritdoc />
        </member>
        <member name="T:CoinEx.Net.SymbolOrderBooks.CoinExSpotSymbolOrderBook">
            <summary>
            Symbol order book implementation
            </summary>
        </member>
        <member name="M:CoinEx.Net.SymbolOrderBooks.CoinExSpotSymbolOrderBook.#ctor(System.String,System.Action{CoinEx.Net.Objects.Options.CoinExOrderBookOptions})">
            <summary>
            Create a new order book instance
            </summary>
            <param name="symbol">The symbol the order book is for</param>
            <param name="optionsDelegate">Option configuration delegate</param>
        </member>
        <member name="M:CoinEx.Net.SymbolOrderBooks.CoinExSpotSymbolOrderBook.#ctor(System.String,System.Action{CoinEx.Net.Objects.Options.CoinExOrderBookOptions},Microsoft.Extensions.Logging.ILoggerFactory,CoinEx.Net.Interfaces.Clients.ICoinExSocketClient)">
            <summary>
            Create a new order book instance
            </summary>
            <param name="symbol">The symbol the order book is for</param>
            <param name="optionsDelegate">Option configuration delegate</param>
            <param name="logger">Logger</param>
            <param name="socketClient">Socket client instance</param>
        </member>
        <member name="M:CoinEx.Net.SymbolOrderBooks.CoinExSpotSymbolOrderBook.DoStartAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.SymbolOrderBooks.CoinExSpotSymbolOrderBook.DoResyncAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.SymbolOrderBooks.CoinExSpotSymbolOrderBook.DoReset">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.SymbolOrderBooks.CoinExSpotSymbolOrderBook.DoChecksum(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.SymbolOrderBooks.CoinExSpotSymbolOrderBook.Dispose(System.Boolean)">
            <inheritdoc />
            <summary>
            Dispose
            </summary>
        </member>
        <member name="T:CryptoExchange.Net.Interfaces.CryptoClientExtensions">
            <summary>
            Extensions for the ICryptoRestClient and ICryptoSocketClient interfaces
            </summary>
        </member>
        <member name="M:CryptoExchange.Net.Interfaces.CryptoClientExtensions.CoinEx(CryptoExchange.Net.Interfaces.ICryptoRestClient)">
            <summary>
            Get the CoinEx REST Api client
            </summary>
            <param name="baseClient"></param>
            <returns></returns>
        </member>
        <member name="M:CryptoExchange.Net.Interfaces.CryptoClientExtensions.CoinEx(CryptoExchange.Net.Interfaces.ICryptoSocketClient)">
            <summary>
            Get the CoinEx Websocket Api client
            </summary>
            <param name="baseClient"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Extensions.DependencyInjection.ServiceCollectionExtensions">
            <summary>
            Extensions for DI
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.ServiceCollectionExtensions.AddCoinEx(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{CoinEx.Net.Objects.Options.CoinExRestOptions},System.Action{CoinEx.Net.Objects.Options.CoinExSocketOptions},System.Nullable{Microsoft.Extensions.DependencyInjection.ServiceLifetime})">
            <summary>
            Add the ICoinExClient and ICoinExSocketClient to the sevice collection so they can be injected
            </summary>
            <param name="services">The service collection</param>
            <param name="defaultRestOptionsDelegate">Set default options for the rest client</param>
            <param name="defaultSocketOptionsDelegate">Set default options for the socket client</param>
            <param name="socketClientLifeTime">The lifetime of the ICoinExSocketClient for the service collection. Defaults to Singleton.</param>
            <returns></returns>
        </member>
    </members>
</doc>
